// Script: converte-arquivos-csharp-em-txt-unico (v1)
// Data de criação do arquivo de saída: 2025-05-12 12:53:34

// Estrutura de diretórios do projeto:
ChallengeMuttuApi/
    Controllers/
    Data/
    Enums/
    Model/
    Properties/
    bin/
        Debug/
            net8.0/
                cs/
                de/
                es/
                fr/
                it/
                ja/
                ko/
                pl/
                pt-BR/
                ru/
                runtimes/
                    browser/
                        lib/
                            net8.0/
                    linux/
                        lib/
                            net8.0/
                    osx/
                        lib/
                            net8.0/
                    win/
                        lib/
                            net8.0/
                tr/
                zh-Hans/
                zh-Hant/
    obj/
        Debug/
            net8.0/
                EndpointInfo/
                ref/
                refint/
                staticwebassets/

// Arquivos encontrados (Namespace.Tipo => caminho relativo):
// ChallengeMuttuApi.Controllers.BoxesController => Controllers\BoxesController.cs
// ChallengeMuttuApi.Controllers.ClientesController => Controllers\ClientesController.cs
// ChallengeMuttuApi.Controllers.ContatosController => Controllers\ContatosController.cs
// ChallengeMuttuApi.Controllers.EnderecosController => Controllers\EnderecosController.cs
// ChallengeMuttuApi.Controllers.PatiosController => Controllers\PatiosController.cs
// ChallengeMuttuApi.Controllers.RastreamentosController => Controllers\RastreamentosController.cs
// ChallengeMuttuApi.Controllers.VeiculosController => Controllers\VeiculosController.cs
// ChallengeMuttuApi.Controllers.WeatherForecastController => Controllers\WeatherForecastController.cs
// ChallengeMuttuApi.Controllers.ZonasController => Controllers\ZonasController.cs
// ChallengeMuttuApi.Data.AppDbContext => Data\AppDbContext.cs
// ChallengeMuttuApi.Enums.EstadoCivil => Enums\EstadoCivil.cs
// ChallengeMuttuApi.Model.Box => Model\Box.cs
// ChallengeMuttuApi.Model.Cliente => Model\Cliente.cs
// ChallengeMuttuApi.Model.ClienteVeiculo => Model\ClienteVeiculo.cs
// ChallengeMuttuApi.Model.Contato => Model\Contato.cs
// ChallengeMuttuApi.Model.ContatoPatio => Model\ContatoPatio.cs
// ChallengeMuttuApi.Model.Endereco => Model\Endereco.cs
// ChallengeMuttuApi.Model.EnderecoPatio => Model\EnderecoPatio.cs
// ChallengeMuttuApi.Model.Filial => Model\Filial.cs
// ChallengeMuttuApi.Model.Patio => Model\Patio.cs
// ChallengeMuttuApi.Model.PatioBox => Model\PatioBox.cs
// ChallengeMuttuApi.Model.Rastreamento => Model\Rastreamento.cs
// ChallengeMuttuApi.Model.Veiculo => Model\Veiculo.cs
// ChallengeMuttuApi.Model.VeiculoBox => Model\VeiculoBox.cs
// ChallengeMuttuApi.Model.VeiculoPatio => Model\VeiculoPatio.cs
// ChallengeMuttuApi.Model.VeiculoRastreamento => Model\VeiculoRastreamento.cs
// ChallengeMuttuApi.Model.VeiculoZona => Model\VeiculoZona.cs
// ChallengeMuttuApi.Model.Zona => Model\Zona.cs
// ChallengeMuttuApi.Model.ZonaBox => Model\ZonaBox.cs
// ChallengeMuttuApi.Model.ZonaPatio => Model\ZonaPatio.cs
// do => Program.cs
// ChallengeMuttuApi.WeatherForecast => WeatherForecast.cs
// .NETCoreApp,Version=v8.0.AssemblyAttributes => obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// ChallengeMuttuApi.AssemblyInfo => obj\Debug\net8.0\ChallengeMuttuApi.AssemblyInfo.cs
// ChallengeMuttuApi.GlobalUsings.g => obj\Debug\net8.0\ChallengeMuttuApi.GlobalUsings.g.cs
// ChallengeMuttuApi.MvcApplicationPartsAssemblyInfo => obj\Debug\net8.0\ChallengeMuttuApi.MvcApplicationPartsAssemblyInfo.cs

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\BoxesController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo BoxesController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Controllers/BoxesController.cs
using ChallengeMuttuApi.Data;
using ChallengeMuttuApi.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ChallengeMuttuApi.Controllers
{
    /// <summary>
    /// Controller responsável por gerenciar as operações CRUD para a entidade Box.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")] // Define a rota base para a controller (ex: /api/boxes)
    [Produces("application/json")]
    public class BoxesController : ControllerBase
    {
        private readonly AppDbContext _context;

        /// <summary>
        /// Construtor da BoxesController.
        /// </summary>
        /// <param name="context">O contexto do banco de dados da aplicação.</param>
        public BoxesController(AppDbContext context)
        {
            _context = context;
        }

        // ---------------------------------------------------------------------
        // Rotas GET (Recuperação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Retorna uma lista de todos os boxes cadastrados.
        /// </summary>
        /// <response code="200">Retorna a lista de boxes.</response>
        /// <response code="204">Não há boxes cadastrados.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Box>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Box>>> GetAllBoxes()
        {
            try
            {
                var boxes = await _context.Boxes.ToListAsync();
                if (!boxes.Any())
                {
                    return NoContent();
                }
                return Ok(boxes);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar todos os boxes: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar boxes.");
            }
        }

        /// <summary>
        /// Retorna um box específico pelo seu ID.
        /// </summary>
        /// <param name="id">O ID do box a ser buscado.</param>
        /// <response code="200">Retorna o box encontrado.</response>
        /// <response code="404">Box não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("{id:int}")]
        [ProducesResponseType(typeof(Box), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Box>> GetBoxById(int id)
        {
            try
            {
                var box = await _context.Boxes.FindAsync(id);
                if (box == null)
                {
                    return NotFound("Box não encontrado.");
                }
                return Ok(box);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar box por ID: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar box.");
            }
        }

        /// <summary>
        /// Pesquisa boxes por parte do nome.
        /// </summary>
        /// <param name="nome">A string a ser pesquisada no nome dos boxes.</param>
        /// <response code="200">Retorna a lista de boxes que correspondem à pesquisa.</response>
        /// <response code="204">Nenhum box encontrado com o nome especificado.</response>
        /// <response code="400">O parâmetro de nome para pesquisa é obrigatório.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("search-by-name")]
        [ProducesResponseType(typeof(IEnumerable<Box>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Box>>> SearchBoxesByName([FromQuery] string nome)
        {
            if (string.IsNullOrWhiteSpace(nome))
            {
                return BadRequest("O parâmetro 'nome' para pesquisa é obrigatório.");
            }

            try
            {
                var boxes = await _context.Boxes
                    .Where(b => b.Nome.ToLower().Contains(nome.ToLower()))
                    .ToListAsync();

                if (!boxes.Any())
                {
                    return NoContent();
                }
                return Ok(boxes);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao pesquisar boxes por nome: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao pesquisar boxes por nome.");
            }
        }

        /// <summary>
        /// Retorna boxes com base em seu status.
        /// </summary>
        /// <param name="status">O status do box ('A' para Ativo, 'I' para Inativo, etc.).</param>
        /// <response code="200">Retorna a lista de boxes com o status especificado.</response>
        /// <response code="204">Nenhum box encontrado com o status especificado.</response>
        /// <response code="400">O status fornecido é inválido.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("by-status/{status}")]
        [ProducesResponseType(typeof(IEnumerable<Box>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Box>>> GetBoxesByStatus(string status)
        {
            if (string.IsNullOrWhiteSpace(status) || status.Length != 1)
            {
                return BadRequest("Status inválido. Deve conter apenas um caractere.");
            }

            try
            {
                var boxes = await _context.Boxes
                    .Where(b => b.Status.ToLower() == status.ToLower())
                    .ToListAsync();

                if (!boxes.Any())
                {
                    return NoContent();
                }
                return Ok(boxes);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar boxes por status: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar boxes por status.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas POST (Criação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Cria um novo box.
        /// </summary>
        /// <param name="box">Os dados do box a serem criados.</param>
        /// <response code="201">Box criado com sucesso.</response>
        /// <response code="400">Dados do box inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPost]
        [ProducesResponseType(typeof(Box), 201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Box>> CreateBox([FromBody] Box box)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                _context.Boxes.Add(box);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetBoxById), new { id = box.IdBox }, box);
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Erro de banco de dados ao criar box: {ex.Message}");
                return StatusCode(500, "Erro ao persistir o box no banco de dados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao criar box: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao criar box.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas PUT (Atualização de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Atualiza um box existente pelo ID.
        /// </summary>
        /// <param name="id">O ID do box a ser atualizado.</param>
        /// <param name="box">Os dados do box atualizados.</param>
        /// <response code="204">Box atualizado com sucesso.</response>
        /// <response code="400">ID na URL não corresponde ao ID do box no corpo da requisição, ou dados inválidos.</response>
        /// <response code="404">Box não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPut("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> UpdateBox(int id, [FromBody] Box box)
        {
            if (id != box.IdBox)
            {
                return BadRequest("O ID na URL não corresponde ao ID do box fornecido.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                var existingBox = await _context.Boxes.AsNoTracking().FirstOrDefaultAsync(b => b.IdBox == id);
                if (existingBox == null)
                {
                    return NotFound("Box não encontrado para atualização.");
                }

                _context.Entry(box).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await _context.Boxes.AnyAsync(e => e.IdBox == id))
                {
                    return NotFound("Box não encontrado para atualização (possivelmente foi excluído por outro processo).");
                }
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao atualizar box: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao atualizar box.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas DELETE (Exclusão de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Exclui um box pelo ID.
        /// </summary>
        /// <param name="id">O ID do box a ser excluído.</param>
        /// <response code="204">Box excluído com sucesso.</response>
        /// <response code="404">Box não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpDelete("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> DeleteBox(int id)
        {
            try
            {
                var box = await _context.Boxes.FindAsync(id);
                if (box == null)
                {
                    return NotFound("Box não encontrado para exclusão.");
                }

                _context.Boxes.Remove(box);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir box: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao excluir box.");
            }
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\ClientesController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo ClientesController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Controllers/ClientesController.cs
using ChallengeMuttuApi.Data;
using ChallengeMuttuApi.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ChallengeMuttuApi.Controllers
{
    /// <summary>
    /// Controller responsável por gerenciar as operações CRUD para a entidade Cliente.
    /// </summary>
    [ApiController] // Indica que a classe é uma controller de API
    [Route("api/[controller]")] // Define a rota base para a controller (ex: /api/clientes)
    [Produces("application/json")] // Garante que a API sempre retorne JSON
    public class ClientesController : ControllerBase
    {
        private readonly AppDbContext _context;

        /// <summary>
        /// Construtor da ClientesController.
        /// Injeta a instância do AppDbContext para acesso ao banco de dados.
        /// </summary>
        /// <param name="context">O contexto do banco de dados da aplicação.</param>
        public ClientesController(AppDbContext context)
        {
            _context = context;
        }

        // ---------------------------------------------------------------------
        // Rotas GET (Recuperação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Retorna uma lista de todos os clientes cadastrados.
        /// </summary>
        /// <remarks>
        /// Este endpoint retorna todos os clientes disponíveis no banco de dados.
        /// </remarks>
        /// <response code="200">Retorna a lista de clientes.</response>
        /// <response code="204">Não há clientes cadastrados.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Cliente>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Cliente>>> GetAllClientes()
        {
            try
            {
                var clientes = await _context.Clientes.ToListAsync();
                if (!clientes.Any())
                {
                    return NoContent(); // Retorna 204 se não houver clientes
                }
                return Ok(clientes); // Retorna 200 com a lista de clientes
            }
            catch (Exception ex)
            {
                // Log the exception (e.g., using Serilog, NLog, or ILogger)
                Console.WriteLine($"Erro ao buscar todos os clientes: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar clientes.");
            }
        }

        /// <summary>
        /// Retorna um cliente específico pelo seu ID.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite buscar um cliente utilizando o seu identificador único.
        /// Exemplo: GET /api/clientes/1
        /// </remarks>
        /// <param name="id">O ID do cliente a ser buscado.</param>
        /// <response code="200">Retorna o cliente encontrado.</response>
        /// <response code="404">Cliente não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("{id:int}")] // Rota parametrizada com PathParam (id inteiro)
        [ProducesResponseType(typeof(Cliente), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Cliente>> GetClienteById(int id)
        {
            try
            {
                var cliente = await _context.Clientes.FindAsync(id);
                if (cliente == null)
                {
                    return NotFound("Cliente não encontrado."); // Retorna 404
                }
                return Ok(cliente); // Retorna 200 com o cliente
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar cliente por ID: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar cliente.");
            }
        }

        /// <summary>
        /// Retorna um cliente específico pelo seu CPF.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite buscar um cliente utilizando o seu número de CPF.
        /// Exemplo: GET /api/clientes/by-cpf/12345678901
        /// </remarks>
        /// <param name="cpf">O CPF do cliente a ser buscado.</param>
        /// <response code="200">Retorna o cliente encontrado.</response>
        /// <response code="400">O CPF fornecido é inválido.</response>
        /// <response code="404">Cliente com o CPF especificado não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("by-cpf/{cpf}")] // Rota parametrizada com PathParam (cpf string)
        [ProducesResponseType(typeof(Cliente), 200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Cliente>> GetClienteByCpf(string cpf)
        {
            // Adiciona validação básica de CPF para BadRequest
            if (string.IsNullOrWhiteSpace(cpf) || cpf.Length != 11 || !cpf.All(char.IsDigit))
            {
                return BadRequest("CPF inválido. Deve conter 11 dígitos numéricos.");
            }

            try
            {
                var cliente = await _context.Clientes.FirstOrDefaultAsync(c => c.Cpf == cpf);
                if (cliente == null)
                {
                    return NotFound($"Cliente com CPF '{cpf}' não encontrado."); // Retorna 404
                }
                return Ok(cliente); // Retorna 200 com o cliente
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar cliente por CPF: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar cliente por CPF.");
            }
        }

        /// <summary>
        /// Pesquisa clientes por parte do nome.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite buscar clientes cujos nomes contenham a string fornecida.
        /// A pesquisa não diferencia maiúsculas de minúsculas.
        /// Exemplo: GET /api/clientes/search-by-name?nome=maria
        /// </remarks>
        /// <param name="nome">A string a ser pesquisada no nome dos clientes.</param>
        /// <response code="200">Retorna a lista de clientes que correspondem à pesquisa.</response>
        /// <response code="204">Nenhum cliente encontrado com o nome especificado.</response>
        /// <response code="400">O parâmetro de nome para pesquisa é obrigatório.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("search-by-name")] // Rota parametrizada com QueryParam
        [ProducesResponseType(typeof(IEnumerable<Cliente>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Cliente>>> SearchClientesByName([FromQuery] string nome)
        {
            if (string.IsNullOrWhiteSpace(nome))
            {
                return BadRequest("O parâmetro 'nome' para pesquisa é obrigatório.");
            }

            try
            {
                var clientes = await _context.Clientes
                    .Where(c => c.Nome.ToLower().Contains(nome.ToLower()))
                    .ToListAsync();

                if (!clientes.Any())
                {
                    return NoContent(); // Retorna 204 se não houver resultados
                }
                return Ok(clientes); // Retorna 200 com a lista de clientes
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao pesquisar clientes por nome: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao pesquisar clientes por nome.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas POST (Criação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Cria um novo cliente.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite criar um novo registro de cliente no banco de dados.
        /// Um ID de cliente não deve ser fornecido no corpo da requisição, pois é gerado automaticamente.
        /// </remarks>
        /// <param name="cliente">Os dados do cliente a serem criados.</param>
        /// <response code="201">Cliente criado com sucesso.</response>
        /// <response code="400">Dados do cliente inválidos ou já existe um cliente com o mesmo CPF.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPost]
        [ProducesResponseType(typeof(Cliente), 201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Cliente>> CreateCliente([FromBody] Cliente cliente)
        {
            // Validação de modelo automática via [ApiController] e DataAnnotations
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState); // Retorna 400 com detalhes da validação
            }

            try
            {
                // A validação de CPF no setter da model já deve tratar isso,
                // mas é bom ter uma verificação de duplicidade no DB aqui.
                var existingCliente = await _context.Clientes.FirstOrDefaultAsync(c => c.Cpf == cliente.Cpf);
                if (existingCliente != null)
                {
                    return BadRequest("Já existe um cliente cadastrado com este CPF.");
                }

                // A DataCadastro é definida no construtor padrão do model, mas se for recebida via POST,
                // garantimos que é definida no servidor ou usada do banco.
                if (cliente.DataCadastro == DateTime.MinValue) // Se não foi definida no cliente recebido
                {
                    cliente.DataCadastro = DateTime.Now;
                }

                _context.Clientes.Add(cliente);
                await _context.SaveChangesAsync();

                // Retorna 201 Created, incluindo o novo recurso e sua URI de acesso
                return CreatedAtAction(nameof(GetClienteById), new { id = cliente.IdCliente }, cliente);
            }
            catch (ArgumentException ex) // Captura exceções da validação customizada no model
            {
                return BadRequest(ex.Message);
            }
            catch (DbUpdateException ex) // Captura erros de banco de dados (ex: violação de constraint única)
            {
                // Pode inspecionar ex.InnerException para detalhes específicos do DB
                Console.WriteLine($"Erro de banco de dados ao criar cliente: {ex.Message}");
                return StatusCode(500, "Erro ao persistir o cliente no banco de dados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao criar cliente: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao criar cliente.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas PUT (Atualização de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Atualiza um cliente existente pelo ID.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite a atualização completa de um cliente existente.
        /// O ID na URL deve corresponder ao ID do cliente no corpo da requisição.
        /// </remarks>
        /// <param name="id">O ID do cliente a ser atualizado.</param>
        /// <param name="cliente">Os dados do cliente atualizados.</param>
        /// <response code="204">Cliente atualizado com sucesso.</response>
        /// <response code="400">ID na URL não corresponde ao ID do cliente no corpo da requisição, ou dados inválidos.</response>
        /// <response code="404">Cliente não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPut("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> UpdateCliente(int id, [FromBody] Cliente cliente)
        {
            if (id != cliente.IdCliente)
            {
                return BadRequest("O ID na URL não corresponde ao ID do cliente fornecido.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                // Verifica se o cliente existe antes de tentar atualizar
                var existingCliente = await _context.Clientes.AsNoTracking().FirstOrDefaultAsync(c => c.IdCliente == id);
                if (existingCliente == null)
                {
                    return NotFound("Cliente não encontrado para atualização.");
                }

                // Verifica duplicidade de CPF se ele foi alterado
                if (existingCliente.Cpf != cliente.Cpf)
                {
                    var clienteWithSameCpf = await _context.Clientes.AsNoTracking().FirstOrDefaultAsync(c => c.Cpf == cliente.Cpf);
                    if (clienteWithSameCpf != null && clienteWithSameCpf.IdCliente != id)
                    {
                        return BadRequest("Já existe outro cliente cadastrado com este CPF.");
                    }
                }

                // Anexa a entidade ao contexto no estado Modified
                _context.Entry(cliente).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return NoContent(); // Retorna 204
            }
            catch (ArgumentException ex) // Captura exceções da validação customizada no model
            {
                return BadRequest(ex.Message);
            }
            catch (DbUpdateConcurrencyException) // Erro de concorrência (ex: cliente excluído por outra transação)
            {
                if (!await _context.Clientes.AnyAsync(e => e.IdCliente == id))
                {
                    return NotFound("Cliente não encontrado para atualização (possivelmente foi excluído por outro processo).");
                }
                throw; // Lança o erro de concorrência para ser tratado em um nível superior
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao atualizar cliente: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao atualizar cliente.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas DELETE (Exclusão de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Exclui um cliente pelo ID.
        /// </summary>
        /// <remarks>
        /// Este endpoint remove permanentemente um registro de cliente do banco de dados.
        /// </remarks>
        /// <param name="id">O ID do cliente a ser excluído.</param>
        /// <response code="204">Cliente excluído com sucesso.</response>
        /// <response code="404">Cliente não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpDelete("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> DeleteCliente(int id)
        {
            try
            {
                var cliente = await _context.Clientes.FindAsync(id);
                if (cliente == null)
                {
                    return NotFound("Cliente não encontrado para exclusão."); // Retorna 404
                }

                _context.Clientes.Remove(cliente);
                await _context.SaveChangesAsync();

                return NoContent(); // Retorna 204
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir cliente: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao excluir cliente.");
            }
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\ContatosController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo ContatosController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Controllers/ContatosController.cs
using ChallengeMuttuApi.Data;
using ChallengeMuttuApi.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace ChallengeMuttuApi.Controllers
{
    /// <summary>
    /// Controller responsável por gerenciar as operações CRUD para a entidade Contato.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")] // Ex: /api/contatos
    [Produces("application/json")]
    public class ContatosController : ControllerBase
    {
        private readonly AppDbContext _context;

        /// <summary>
        /// Construtor da ContatosController.
        /// </summary>
        /// <param name="context">O contexto do banco de dados da aplicação.</param>
        public ContatosController(AppDbContext context)
        {
            _context = context;
        }

        // ---------------------------------------------------------------------
        // Rotas GET (Recuperação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Retorna uma lista de todos os contatos cadastrados.
        /// </summary>
        /// <response code="200">Retorna a lista de contatos.</response>
        /// <response code="204">Não há contatos cadastrados.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Contato>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Contato>>> GetAllContatos()
        {
            try
            {
                var contatos = await _context.Contatos.ToListAsync();
                if (!contatos.Any())
                {
                    return NoContent();
                }
                return Ok(contatos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar todos os contatos: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar contatos.");
            }
        }

        /// <summary>
        /// Retorna um contato específico pelo seu ID.
        /// </summary>
        /// <param name="id">O ID do contato a ser buscado.</param>
        /// <response code="200">Retorna o contato encontrado.</response>
        /// <response code="404">Contato não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("{id:int}")]
        [ProducesResponseType(typeof(Contato), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Contato>> GetContatoById(int id)
        {
            try
            {
                var contato = await _context.Contatos.FindAsync(id);
                if (contato == null)
                {
                    return NotFound("Contato não encontrado.");
                }
                return Ok(contato);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar contato por ID: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar contato.");
            }
        }

        /// <summary>
        /// Retorna um contato pelo seu endereço de e-mail.
        /// </summary>
        /// <param name="email">O endereço de e-mail do contato a ser buscado.</param>
        /// <response code="200">Retorna o contato encontrado.</response>
        /// <response code="400">O e-mail fornecido é inválido.</response>
        /// <response code="404">Contato com o e-mail especificado não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("by-email/{email}")]
        [ProducesResponseType(typeof(Contato), 200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Contato>> GetContatoByEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email) || !new EmailAddressAttribute().IsValid(email))
            {
                return BadRequest("E-mail inválido.");
            }

            try
            {
                var contato = await _context.Contatos.FirstOrDefaultAsync(c => c.Email == email);
                if (contato == null)
                {
                    return NotFound($"Contato com e-mail '{email}' não encontrado.");
                }
                return Ok(contato);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar contato por e-mail: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar contato por e-mail.");
            }
        }

        /// <summary>
        /// Pesquisa contatos por parte do número de celular.
        /// </summary>
        /// <param name="celular">A string a ser pesquisada no número de celular dos contatos.</param>
        /// <response code="200">Retorna a lista de contatos que correspondem à pesquisa.</response>
        /// <response code="204">Nenhum contato encontrado com o celular especificado.</response>
        /// <response code="400">O parâmetro de celular para pesquisa é obrigatório.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("search-by-celular")]
        [ProducesResponseType(typeof(IEnumerable<Contato>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Contato>>> SearchContatosByCelular([FromQuery] string celular)
        {
            if (string.IsNullOrWhiteSpace(celular))
            {
                return BadRequest("O parâmetro 'celular' para pesquisa é obrigatório.");
            }

            try
            {
                var contatos = await _context.Contatos
                    .Where(c => c.Celular.Contains(celular)) // Usando Contains para pesquisa parcial
                    .ToListAsync();

                if (!contatos.Any())
                {
                    return NoContent();
                }
                return Ok(contatos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao pesquisar contatos por celular: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao pesquisar contatos por celular.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas POST (Criação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Cria um novo contato.
        /// </summary>
        /// <param name="contato">Os dados do contato a serem criados.</param>
        /// <response code="201">Contato criado com sucesso.</response>
        /// <response code="400">Dados do contato inválidos ou já existe um contato com o mesmo e-mail.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPost]
        [ProducesResponseType(typeof(Contato), 201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Contato>> CreateContato([FromBody] Contato contato)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                // Verifica duplicidade de e-mail
                if (await _context.Contatos.AnyAsync(c => c.Email == contato.Email))
                {
                    return BadRequest("Já existe um contato cadastrado com este e-mail.");
                }

                _context.Contatos.Add(contato);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetContatoById), new { id = contato.IdContato }, contato);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Erro de banco de dados ao criar contato: {ex.Message}");
                return StatusCode(500, "Erro ao persistir o contato no banco de dados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao criar contato: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao criar contato.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas PUT (Atualização de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Atualiza um contato existente pelo ID.
        /// </summary>
        /// <param name="id">O ID do contato a ser atualizado.</param>
        /// <param name="contato">Os dados do contato atualizados.</param>
        /// <response code="204">Contato atualizado com sucesso.</response>
        /// <response code="400">ID na URL não corresponde ao ID do contato no corpo da requisição, ou dados inválidos.</response>
        /// <response code="404">Contato não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPut("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> UpdateContato(int id, [FromBody] Contato contato)
        {
            if (id != contato.IdContato)
            {
                return BadRequest("O ID na URL não corresponde ao ID do contato fornecido.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                var existingContato = await _context.Contatos.AsNoTracking().FirstOrDefaultAsync(c => c.IdContato == id);
                if (existingContato == null)
                {
                    return NotFound("Contato não encontrado para atualização.");
                }

                // Verifica duplicidade de e-mail se ele foi alterado
                if (existingContato.Email != contato.Email)
                {
                    var contatoWithSameEmail = await _context.Contatos.AsNoTracking().FirstOrDefaultAsync(c => c.Email == contato.Email);
                    if (contatoWithSameEmail != null && contatoWithSameEmail.IdContato != id)
                    {
                        return BadRequest("Já existe outro contato cadastrado com este e-mail.");
                    }
                }

                _context.Entry(contato).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await _context.Contatos.AnyAsync(e => e.IdContato == id))
                {
                    return NotFound("Contato não encontrado para atualização (possivelmente foi excluído por outro processo).");
                }
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao atualizar contato: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao atualizar contato.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas DELETE (Exclusão de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Exclui um contato pelo ID.
        /// </summary>
        /// <param name="id">O ID do contato a ser excluído.</param>
        /// <response code="204">Contato excluído com sucesso.</response>
        /// <response code="404">Contato não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpDelete("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> DeleteContato(int id)
        {
            try
            {
                var contato = await _context.Contatos.FindAsync(id);
                if (contato == null)
                {
                    return NotFound("Contato não encontrado para exclusão.");
                }

                _context.Contatos.Remove(contato);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir contato: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao excluir contato.");
            }
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\EnderecosController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo EnderecosController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Controllers/EnderecosController.cs
using ChallengeMuttuApi.Data;
using ChallengeMuttuApi.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ChallengeMuttuApi.Controllers
{
    /// <summary>
    /// Controller responsável por gerenciar as operações CRUD para a entidade Endereço.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")] // Ex: /api/enderecos
    [Produces("application/json")]
    public class EnderecosController : ControllerBase
    {
        private readonly AppDbContext _context;

        /// <summary>
        /// Construtor da EnderecosController.
        /// </summary>
        /// <param name="context">O contexto do banco de dados da aplicação.</param>
        public EnderecosController(AppDbContext context)
        {
            _context = context;
        }

        // ---------------------------------------------------------------------
        // Rotas GET (Recuperação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Retorna uma lista de todos os endereços cadastrados.
        /// </summary>
        /// <response code="200">Retorna a lista de endereços.</response>
        /// <response code="204">Não há endereços cadastrados.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Endereco>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Endereco>>> GetAllEnderecos()
        {
            try
            {
                var enderecos = await _context.Enderecos.ToListAsync();
                if (!enderecos.Any())
                {
                    return NoContent();
                }
                return Ok(enderecos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar todos os endereços: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar endereços.");
            }
        }

        /// <summary>
        /// Retorna um endereço específico pelo seu ID.
        /// </summary>
        /// <param name="id">O ID do endereço a ser buscado.</param>
        /// <response code="200">Retorna o endereço encontrado.</response>
        /// <response code="404">Endereço não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("{id:int}")]
        [ProducesResponseType(typeof(Endereco), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Endereco>> GetEnderecoById(int id)
        {
            try
            {
                var endereco = await _context.Enderecos.FindAsync(id);
                if (endereco == null)
                {
                    return NotFound("Endereço não encontrado.");
                }
                return Ok(endereco);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar endereço por ID: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar endereço.");
            }
        }

        /// <summary>
        /// Retorna endereços por CEP.
        /// </summary>
        /// <param name="cep">O CEP do endereço a ser buscado.</param>
        /// <response code="200">Retorna a lista de endereços com o CEP especificado.</response>
        /// <response code="204">Nenhum endereço encontrado com o CEP especificado.</response>
        /// <response code="400">O CEP fornecido é inválido.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("by-cep/{cep}")]
        [ProducesResponseType(typeof(IEnumerable<Endereco>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Endereco>>> GetEnderecosByCep(string cep)
        {
            if (string.IsNullOrWhiteSpace(cep) || cep.Length != 9) // Validação básica para CEP de 9 caracteres
            {
                return BadRequest("CEP inválido. Deve conter 9 caracteres.");
            }

            try
            {
                var enderecos = await _context.Enderecos.Where(e => e.Cep == cep).ToListAsync();
                if (!enderecos.Any())
                {
                    return NoContent();
                }
                return Ok(enderecos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar endereços por CEP: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar endereços por CEP.");
            }
        }

        /// <summary>
        /// Pesquisa endereços por parte da cidade e estado.
        /// </summary>
        /// <param name="cidade">A string a ser pesquisada na cidade dos endereços.</param>
        /// <param name="estado">A sigla do estado para pesquisa.</param>
        /// <response code="200">Retorna a lista de endereços que correspondem à pesquisa.</response>
        /// <response code="204">Nenhum endereço encontrado.</response>
        /// <response code="400">Os parâmetros de pesquisa são obrigatórios.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("search-by-location")]
        [ProducesResponseType(typeof(IEnumerable<Endereco>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Endereco>>> SearchEnderecosByLocation(
            [FromQuery] string cidade,
            [FromQuery] string estado)
        {
            if (string.IsNullOrWhiteSpace(cidade) || string.IsNullOrWhiteSpace(estado))
            {
                return BadRequest("Os parâmetros 'cidade' e 'estado' para pesquisa são obrigatórios.");
            }

            try
            {
                var enderecos = await _context.Enderecos
                    .Where(e => e.Cidade.ToLower().Contains(cidade.ToLower()) &&
                                e.Estado.ToLower() == estado.ToLower())
                    .ToListAsync();

                if (!enderecos.Any())
                {
                    return NoContent();
                }
                return Ok(enderecos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao pesquisar endereços por localização: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao pesquisar endereços por localização.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas POST (Criação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Cria um novo endereço.
        /// </summary>
        /// <param name="endereco">Os dados do endereço a serem criados.</param>
        /// <response code="201">Endereço criado com sucesso.</response>
        /// <response code="400">Dados do endereço inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPost]
        [ProducesResponseType(typeof(Endereco), 201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Endereco>> CreateEndereco([FromBody] Endereco endereco)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                _context.Enderecos.Add(endereco);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetEnderecoById), new { id = endereco.IdEndereco }, endereco);
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Erro de banco de dados ao criar endereço: {ex.Message}");
                return StatusCode(500, "Erro ao persistir o endereço no banco de dados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao criar endereço: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao criar endereço.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas PUT (Atualização de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Atualiza um endereço existente pelo ID.
        /// </summary>
        /// <param name="id">O ID do endereço a ser atualizado.</param>
        /// <param name="endereco">Os dados do endereço atualizados.</param>
        /// <response code="204">Endereço atualizado com sucesso.</response>
        /// <response code="400">ID na URL não corresponde ao ID do endereço no corpo da requisição, ou dados inválidos.</response>
        /// <response code="404">Endereço não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPut("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> UpdateEndereco(int id, [FromBody] Endereco endereco)
        {
            if (id != endereco.IdEndereco)
            {
                return BadRequest("O ID na URL não corresponde ao ID do endereço fornecido.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                var existingEndereco = await _context.Enderecos.AsNoTracking().FirstOrDefaultAsync(e => e.IdEndereco == id);
                if (existingEndereco == null)
                {
                    return NotFound("Endereço não encontrado para atualização.");
                }

                _context.Entry(endereco).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await _context.Enderecos.AnyAsync(e => e.IdEndereco == id))
                {
                    return NotFound("Endereço não encontrado para atualização (possivelmente foi excluído por outro processo).");
                }
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao atualizar endereço: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao atualizar endereço.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas DELETE (Exclusão de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Exclui um endereço pelo ID.
        /// </summary>
        /// <param name="id">O ID do endereço a ser excluído.</param>
        /// <response code="204">Endereço excluído com sucesso.</response>
        /// <response code="404">Endereço não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpDelete("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> DeleteEndereco(int id)
        {
            try
            {
                var endereco = await _context.Enderecos.FindAsync(id);
                if (endereco == null)
                {
                    return NotFound("Endereço não encontrado para exclusão.");
                }

                _context.Enderecos.Remove(endereco);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir endereço: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao excluir endereço.");
            }
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\PatiosController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo PatiosController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Controllers/PatiosController.cs
using ChallengeMuttuApi.Data;
using ChallengeMuttuApi.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ChallengeMuttuApi.Controllers
{
    /// <summary>
    /// Controller responsável por gerenciar as operações CRUD para a entidade Pátio.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")] // Ex: /api/patios
    [Produces("application/json")]
    public class PatiosController : ControllerBase
    {
        private readonly AppDbContext _context;

        /// <summary>
        /// Construtor da PatiosController.
        /// </summary>
        /// <param name="context">O contexto do banco de dados da aplicação.</param>
        public PatiosController(AppDbContext context)
        {
            _context = context;
        }

        // ---------------------------------------------------------------------
        // Rotas GET (Recuperação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Retorna uma lista de todos os pátios cadastrados.
        /// </summary>
        /// <response code="200">Retorna a lista de pátios.</response>
        /// <response code="204">Não há pátios cadastrados.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Patio>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Patio>>> GetAllPatios()
        {
            try
            {
                var patios = await _context.Patios.ToListAsync();
                if (!patios.Any())
                {
                    return NoContent();
                }
                return Ok(patios);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar todos os pátios: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar pátios.");
            }
        }

        /// <summary>
        /// Retorna um pátio específico pelo seu ID.
        /// </summary>
        /// <param name="id">O ID do pátio a ser buscado.</param>
        /// <response code="200">Retorna o pátio encontrado.</response>
        /// <response code="404">Pátio não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("{id:int}")]
        [ProducesResponseType(typeof(Patio), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Patio>> GetPatioById(int id)
        {
            try
            {
                var patio = await _context.Patios.FindAsync(id);
                if (patio == null)
                {
                    return NotFound("Pátio não encontrado.");
                }
                return Ok(patio);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar pátio por ID: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar pátio.");
            }
        }

        /// <summary>
        /// Pesquisa pátios por parte do nome do pátio.
        /// </summary>
        /// <param name="nomePatio">A string a ser pesquisada no nome dos pátios.</param>
        /// <response code="200">Retorna a lista de pátios que correspondem à pesquisa.</response>
        /// <response code="204">Nenhum pátio encontrado com o nome especificado.</response>
        /// <response code="400">O parâmetro de nome para pesquisa é obrigatório.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("search-by-name")]
        [ProducesResponseType(typeof(IEnumerable<Patio>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Patio>>> SearchPatiosByName([FromQuery] string nomePatio)
        {
            if (string.IsNullOrWhiteSpace(nomePatio))
            {
                return BadRequest("O parâmetro 'nomePatio' para pesquisa é obrigatório.");
            }

            try
            {
                var patios = await _context.Patios
                    .Where(p => p.NomePatio.ToLower().Contains(nomePatio.ToLower()))
                    .ToListAsync();

                if (!patios.Any())
                {
                    return NoContent();
                }
                return Ok(patios);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao pesquisar pátios por nome: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao pesquisar pátios por nome.");
            }
        }

        /// <summary>
        /// Retorna pátios que entraram ou saíram em uma data específica.
        /// </summary>
        /// <param name="date">A data para buscar pátios (formato YYYY-MM-DD).</param>
        /// <param name="type">Tipo de data para buscar ('entrada' ou 'saida').</param>
        /// <response code="200">Retorna a lista de pátios encontrados.</response>
        /// <response code="204">Nenhum pátio encontrado para a data e tipo especificados.</response>
        /// <response code="400">Parâmetros de data ou tipo inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("by-date")]
        [ProducesResponseType(typeof(IEnumerable<Patio>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Patio>>> GetPatiosByDate(
            [FromQuery] DateTime date,
            [FromQuery] string type)
        {
            if (date == default)
            {
                return BadRequest("Data inválida. Use o formato YYYY-MM-DD.");
            }
            if (string.IsNullOrWhiteSpace(type) || (type.ToLower() != "entrada" && type.ToLower() != "saida"))
            {
                return BadRequest("Tipo de busca inválido. Use 'entrada' ou 'saida'.");
            }

            try
            {
                IQueryable<Patio> query = _context.Patios;

                if (type.ToLower() == "entrada")
                {
                    query = query.Where(p => p.DataEntrada.Date == date.Date);
                }
                else if (type.ToLower() == "saida")
                {
                    query = query.Where(p => p.DataSaida.Date == date.Date);
                }

                var patios = await query.ToListAsync();

                if (!patios.Any())
                {
                    return NoContent();
                }
                return Ok(patios);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar pátios por data: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar pátios por data.");
            }
        }


        // ---------------------------------------------------------------------
        // Rotas POST (Criação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Cria um novo pátio.
        /// </summary>
        /// <param name="patio">Os dados do pátio a serem criados.</param>
        /// <response code="201">Pátio criado com sucesso.</response>
        /// <response code="400">Dados do pátio inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPost]
        [ProducesResponseType(typeof(Patio), 201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Patio>> CreatePatio([FromBody] Patio patio)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                _context.Patios.Add(patio);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetPatioById), new { id = patio.IdPatio }, patio);
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Erro de banco de dados ao criar pátio: {ex.Message}");
                return StatusCode(500, "Erro ao persistir o pátio no banco de dados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao criar pátio: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao criar pátio.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas PUT (Atualização de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Atualiza um pátio existente pelo ID.
        /// </summary>
        /// <param name="id">O ID do pátio a ser atualizado.</param>
        /// <param name="patio">Os dados do pátio atualizados.</param>
        /// <response code="204">Pátio atualizado com sucesso.</response>
        /// <response code="400">ID na URL não corresponde ao ID do pátio no corpo da requisição, ou dados inválidos.</response>
        /// <response code="404">Pátio não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPut("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> UpdatePatio(int id, [FromBody] Patio patio)
        {
            if (id != patio.IdPatio)
            {
                return BadRequest("O ID na URL não corresponde ao ID do pátio fornecido.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                var existingPatio = await _context.Patios.AsNoTracking().FirstOrDefaultAsync(p => p.IdPatio == id);
                if (existingPatio == null)
                {
                    return NotFound("Pátio não encontrado para atualização.");
                }

                _context.Entry(patio).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await _context.Patios.AnyAsync(e => e.IdPatio == id))
                {
                    return NotFound("Pátio não encontrado para atualização (possivelmente foi excluído por outro processo).");
                }
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao atualizar pátio: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao atualizar pátio.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas DELETE (Exclusão de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Exclui um pátio pelo ID.
        /// </summary>
        /// <param name="id">O ID do pátio a ser excluído.</param>
        /// <response code="204">Pátio excluído com sucesso.</response>
        /// <response code="404">Pátio não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpDelete("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> DeletePatio(int id)
        {
            try
            {
                var patio = await _context.Patios.FindAsync(id);
                if (patio == null)
                {
                    return NotFound("Pátio não encontrado para exclusão.");
                }

                _context.Patios.Remove(patio);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir pátio: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao excluir pátio.");
            }
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\RastreamentosController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo RastreamentosController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Controllers/RastreamentosController.cs
using ChallengeMuttuApi.Data;
using ChallengeMuttuApi.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ChallengeMuttuApi.Controllers
{
    /// <summary>
    /// Controller responsável por gerenciar as operações CRUD para a entidade Rastreamento.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")] // Ex: /api/rastreamentos
    [Produces("application/json")]
    public class RastreamentosController : ControllerBase
    {
        private readonly AppDbContext _context;

        /// <summary>
        /// Construtor da RastreamentosController.
        /// </summary>
        /// <param name="context">O contexto do banco de dados da aplicação.</param>
        public RastreamentosController(AppDbContext context)
        {
            _context = context;
        }

        // ---------------------------------------------------------------------
        // Rotas GET (Recuperação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Retorna uma lista de todos os rastreamentos cadastrados.
        /// </summary>
        /// <response code="200">Retorna a lista de rastreamentos.</response>
        /// <response code="204">Não há rastreamentos cadastrados.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Rastreamento>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Rastreamento>>> GetAllRastreamentos()
        {
            try
            {
                var rastreamentos = await _context.Rastreamentos.ToListAsync();
                if (!rastreamentos.Any())
                {
                    return NoContent();
                }
                return Ok(rastreamentos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar todos os rastreamentos: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar rastreamentos.");
            }
        }

        /// <summary>
        /// Retorna um rastreamento específico pelo seu ID.
        /// </summary>
        /// <param name="id">O ID do rastreamento a ser buscado.</param>
        /// <response code="200">Retorna o rastreamento encontrado.</response>
        /// <response code="404">Rastreamento não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("{id:int}")]
        [ProducesResponseType(typeof(Rastreamento), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Rastreamento>> GetRastreamentoById(int id)
        {
            try
            {
                var rastreamento = await _context.Rastreamentos.FindAsync(id);
                if (rastreamento == null)
                {
                    return NotFound("Rastreamento não encontrado.");
                }
                return Ok(rastreamento);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar rastreamento por ID: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar rastreamento.");
            }
        }

        /// <summary>
        /// Pesquisa rastreamentos por um range de Latitude e Longitude.
        /// </summary>
        /// <param name="minLat">Latitude mínima.</param>
        /// <param name="maxLat">Latitude máxima.</param>
        /// <param name="minLong">Longitude mínima.</param>
        /// <param name="maxLong">Longitude máxima.</param>
        /// <response code="200">Retorna a lista de rastreamentos que correspondem à pesquisa.</response>
        /// <response code="204">Nenhum rastreamento encontrado no range especificado.</response>
        /// <response code="400">Parâmetros de latitude/longitude inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("search-by-coordinates")]
        [ProducesResponseType(typeof(IEnumerable<Rastreamento>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Rastreamento>>> SearchRastreamentosByCoordinates(
            [FromQuery] decimal minLat, [FromQuery] decimal maxLat,
            [FromQuery] decimal minLong, [FromQuery] decimal maxLong)
        {
            // Validação básica dos ranges (pode ser mais robusta)
            if (minLat > maxLat || minLong > maxLong)
            {
                return BadRequest("Parâmetros de latitude ou longitude inválidos (min > max).");
            }

            try
            {
                var rastreamentos = await _context.Rastreamentos
                    .Where(r => r.GprsLatitude >= minLat && r.GprsLatitude <= maxLat &&
                                r.GprsLongitude >= minLong && r.GprsLongitude <= maxLong)
                    .ToListAsync();

                if (!rastreamentos.Any())
                {
                    return NoContent();
                }
                return Ok(rastreamentos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao pesquisar rastreamentos por coordenadas: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao pesquisar rastreamentos por coordenadas.");
            }
        }

        /// <summary>
        /// Retorna rastreamentos por um range específico das coordenadas IPS (x, y).
        /// </summary>
        /// <param name="minX">Coordenada X mínima.</param>
        /// <param name="maxX">Coordenada X máxima.</param>
        /// <param name="minY">Coordenada Y mínima.</param>
        /// <param name="maxY">Coordenada Y máxima.</param>
        /// <response code="200">Retorna a lista de rastreamentos encontrados.</response>
        /// <response code="204">Nenhum rastreamento encontrado no range IPS especificado.</response>
        /// <response code="400">Parâmetros de coordenadas IPS inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("by-ips-range")]
        [ProducesResponseType(typeof(IEnumerable<Rastreamento>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Rastreamento>>> GetRastreamentosByIpsRange(
            [FromQuery] decimal minX, [FromQuery] decimal maxX,
            [FromQuery] decimal minY, [FromQuery] decimal maxY)
        {
            if (minX > maxX || minY > maxY)
            {
                return BadRequest("Parâmetros de coordenadas IPS inválidos (min > max).");
            }

            try
            {
                var rastreamentos = await _context.Rastreamentos
                    .Where(r => r.IpsX >= minX && r.IpsX <= maxX &&
                                r.IpsY >= minY && r.IpsY <= maxY)
                    .ToListAsync();

                if (!rastreamentos.Any())
                {
                    return NoContent();
                }
                return Ok(rastreamentos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar rastreamentos por range IPS: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar rastreamentos por range IPS.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas POST (Criação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Cria um novo rastreamento.
        /// </summary>
        /// <param name="rastreamento">Os dados do rastreamento a serem criados.</param>
        /// <response code="201">Rastreamento criado com sucesso.</response>
        /// <response code="400">Dados do rastreamento inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPost]
        [ProducesResponseType(typeof(Rastreamento), 201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Rastreamento>> CreateRastreamento([FromBody] Rastreamento rastreamento)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                _context.Rastreamentos.Add(rastreamento);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetRastreamentoById), new { id = rastreamento.IdRastreamento }, rastreamento);
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Erro de banco de dados ao criar rastreamento: {ex.Message}");
                return StatusCode(500, "Erro ao persistir o rastreamento no banco de dados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao criar rastreamento: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao criar rastreamento.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas PUT (Atualização de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Atualiza um rastreamento existente pelo ID.
        /// </summary>
        /// <param name="id">O ID do rastreamento a ser atualizado.</param>
        /// <param name="rastreamento">Os dados do rastreamento atualizados.</param>
        /// <response code="204">Rastreamento atualizado com sucesso.</response>
        /// <response code="400">ID na URL não corresponde ao ID do rastreamento no corpo da requisição, ou dados inválidos.</response>
        /// <response code="404">Rastreamento não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPut("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> UpdateRastreamento(int id, [FromBody] Rastreamento rastreamento)
        {
            if (id != rastreamento.IdRastreamento)
            {
                return BadRequest("O ID na URL não corresponde ao ID do rastreamento fornecido.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                var existingRastreamento = await _context.Rastreamentos.AsNoTracking().FirstOrDefaultAsync(r => r.IdRastreamento == id);
                if (existingRastreamento == null)
                {
                    return NotFound("Rastreamento não encontrado para atualização.");
                }

                _context.Entry(rastreamento).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await _context.Rastreamentos.AnyAsync(e => e.IdRastreamento == id))
                {
                    return NotFound("Rastreamento não encontrado para atualização (possivelmente foi excluído por outro processo).");
                }
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao atualizar rastreamento: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao atualizar rastreamento.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas DELETE (Exclusão de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Exclui um rastreamento pelo ID.
        /// </summary>
        /// <param name="id">O ID do rastreamento a ser excluído.</param>
        /// <response code="204">Rastreamento excluído com sucesso.</response>
        /// <response code="404">Rastreamento não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpDelete("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> DeleteRastreamento(int id)
        {
            try
            {
                var rastreamento = await _context.Rastreamentos.FindAsync(id);
                if (rastreamento == null)
                {
                    return NotFound("Rastreamento não encontrado para exclusão.");
                }

                _context.Rastreamentos.Remove(rastreamento);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir rastreamento: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao excluir rastreamento.");
            }
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\VeiculosController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo VeiculosController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Controllers/VeiculosController.cs
using ChallengeMuttuApi.Data;
using ChallengeMuttuApi.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ChallengeMuttuApi.Controllers
{
    /// <summary>
    /// Controller responsável por gerenciar as operações CRUD para a entidade Veículo.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")] // Ex: /api/veiculos
    [Produces("application/json")]
    public class VeiculosController : ControllerBase
    {
        private readonly AppDbContext _context;

        /// <summary>
        /// Construtor da VeiculosController.
        /// Injeta a instância do AppDbContext.
        /// </summary>
        /// <param name="context">O contexto do banco de dados da aplicação.</param>
        public VeiculosController(AppDbContext context)
        {
            _context = context;
        }

        // ---------------------------------------------------------------------
        // Rotas GET (Recuperação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Retorna uma lista de todos os veículos cadastrados.
        /// </summary>
        /// <response code="200">Retorna a lista de veículos.</response>
        /// <response code="204">Não há veículos cadastrados.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Veiculo>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Veiculo>>> GetAllVeiculos()
        {
            try
            {
                var veiculos = await _context.Veiculos.ToListAsync();
                if (!veiculos.Any())
                {
                    return NoContent();
                }
                return Ok(veiculos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar todos os veículos: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar veículos.");
            }
        }

        /// <summary>
        /// Retorna um veículo específico pelo seu ID.
        /// </summary>
        /// <param name="id">O ID do veículo a ser buscado.</param>
        /// <response code="200">Retorna o veículo encontrado.</response>
        /// <response code="404">Veículo não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("{id:int}")]
        [ProducesResponseType(typeof(Veiculo), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Veiculo>> GetVeiculoById(int id)
        {
            try
            {
                var veiculo = await _context.Veiculos.FindAsync(id);
                if (veiculo == null)
                {
                    return NotFound("Veículo não encontrado.");
                }
                return Ok(veiculo);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar veículo por ID: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar veículo.");
            }
        }

        /// <summary>
        /// Retorna um veículo pela sua placa.
        /// </summary>
        /// <remarks>
        /// Exemplo: GET /api/veiculos/by-placa/ABC1234
        /// </remarks>
        /// <param name="placa">A placa do veículo a ser buscado.</param>
        /// <response code="200">Retorna o veículo encontrado.</response>
        /// <response code="400">A placa fornecida é inválida.</response>
        /// <response code="404">Veículo com a placa especificada não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("by-placa/{placa}")]
        [ProducesResponseType(typeof(Veiculo), 200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Veiculo>> GetVeiculoByPlaca(string placa)
        {
            if (string.IsNullOrWhiteSpace(placa) || placa.Length > 10) // Exemplo de validação básica
            {
                return BadRequest("Placa inválida.");
            }

            try
            {
                var veiculo = await _context.Veiculos.FirstOrDefaultAsync(v => v.Placa == placa);
                if (veiculo == null)
                {
                    return NotFound($"Veículo com placa '{placa}' não encontrado.");
                }
                return Ok(veiculo);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar veículo por placa: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar veículo por placa.");
            }
        }

        /// <summary>
        /// Pesquisa veículos por parte do modelo.
        /// </summary>
        /// <remarks>
        /// Exemplo: GET /api/veiculos/search-by-model?modelo=gol
        /// </remarks>
        /// <param name="modelo">A string a ser pesquisada no modelo dos veículos.</param>
        /// <response code="200">Retorna a lista de veículos que correspondem à pesquisa.</response>
        /// <response code="204">Nenhum veículo encontrado com o modelo especificado.</response>
        /// <response code="400">O parâmetro de modelo para pesquisa é obrigatório.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("search-by-model")]
        [ProducesResponseType(typeof(IEnumerable<Veiculo>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Veiculo>>> SearchVeiculosByModel([FromQuery] string modelo)
        {
            if (string.IsNullOrWhiteSpace(modelo))
            {
                return BadRequest("O parâmetro 'modelo' para pesquisa é obrigatório.");
            }

            try
            {
                var veiculos = await _context.Veiculos
                    .Where(v => v.Modelo.ToLower().Contains(modelo.ToLower()))
                    .ToListAsync();

                if (!veiculos.Any())
                {
                    return NoContent();
                }
                return Ok(veiculos);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao pesquisar veículos por modelo: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao pesquisar veículos por modelo.");
            }
        }


        // ---------------------------------------------------------------------
        // Rotas POST (Criação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Cria um novo veículo.
        /// </summary>
        /// <param name="veiculo">Os dados do veículo a serem criados.</param>
        /// <response code="201">Veículo criado com sucesso.</response>
        /// <response code="400">Dados do veículo inválidos ou já existe um veículo com a mesma placa, RENAVAM ou chassi.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPost]
        [ProducesResponseType(typeof(Veiculo), 201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Veiculo>> CreateVeiculo([FromBody] Veiculo veiculo)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                // Verifica duplicidade para Placa, RENAVAM e Chassi
                if (await _context.Veiculos.AnyAsync(v => v.Placa == veiculo.Placa || v.Renavam == veiculo.Renavam || v.Chassi == veiculo.Chassi))
                {
                    return BadRequest("Já existe um veículo cadastrado com a mesma Placa, RENAVAM ou Chassi.");
                }

                _context.Veiculos.Add(veiculo);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetVeiculoById), new { id = veiculo.IdVeiculo }, veiculo);
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Erro de banco de dados ao criar veículo: {ex.Message}");
                return StatusCode(500, "Erro ao persistir o veículo no banco de dados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao criar veículo: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao criar veículo.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas PUT (Atualização de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Atualiza um veículo existente pelo ID.
        /// </summary>
        /// <param name="id">O ID do veículo a ser atualizado.</param>
        /// <param name="veiculo">Os dados do veículo atualizados.</param>
        /// <response code="204">Veículo atualizado com sucesso.</response>
        /// <response code="400">ID na URL não corresponde ao ID do veículo no corpo da requisição, ou dados inválidos.</response>
        /// <response code="404">Veículo não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPut("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> UpdateVeiculo(int id, [FromBody] Veiculo veiculo)
        {
            if (id != veiculo.IdVeiculo)
            {
                return BadRequest("O ID na URL não corresponde ao ID do veículo fornecido.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                var existingVeiculo = await _context.Veiculos.AsNoTracking().FirstOrDefaultAsync(v => v.IdVeiculo == id);
                if (existingVeiculo == null)
                {
                    return NotFound("Veículo não encontrado para atualização.");
                }

                // Verifica duplicidade de chaves únicas se elas foram alteradas
                if (existingVeiculo.Placa != veiculo.Placa && await _context.Veiculos.AnyAsync(v => v.Placa == veiculo.Placa))
                {
                    return BadRequest("Já existe outro veículo com esta Placa.");
                }
                if (existingVeiculo.Renavam != veiculo.Renavam && await _context.Veiculos.AnyAsync(v => v.Renavam == veiculo.Renavam))
                {
                    return BadRequest("Já existe outro veículo com este RENAVAM.");
                }
                if (existingVeiculo.Chassi != veiculo.Chassi && await _context.Veiculos.AnyAsync(v => v.Chassi == veiculo.Chassi))
                {
                    return BadRequest("Já existe outro veículo com este Chassi.");
                }

                _context.Entry(veiculo).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await _context.Veiculos.AnyAsync(e => e.IdVeiculo == id))
                {
                    return NotFound("Veículo não encontrado para atualização (possivelmente foi excluído por outro processo).");
                }
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao atualizar veículo: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao atualizar veículo.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas DELETE (Exclusão de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Exclui um veículo pelo ID.
        /// </summary>
        /// <param name="id">O ID do veículo a ser excluído.</param>
        /// <response code="204">Veículo excluído com sucesso.</response>
        /// <response code="404">Veículo não encontrado.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpDelete("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> DeleteVeiculo(int id)
        {
            try
            {
                var veiculo = await _context.Veiculos.FindAsync(id);
                if (veiculo == null)
                {
                    return NotFound("Veículo não encontrado para exclusão.");
                }

                _context.Veiculos.Remove(veiculo);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir veículo: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao excluir veículo.");
            }
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\WeatherForecastController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo WeatherForecastController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

using Microsoft.AspNetCore.Mvc;

namespace ChallengeMuttuApi.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static readonly string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        private readonly ILogger<WeatherForecastController> _logger;

        public WeatherForecastController(ILogger<WeatherForecastController> logger)
        {
            _logger = logger;
        }

        [HttpGet(Name = "GetWeatherForecast")]
        public IEnumerable<WeatherForecast> Get()
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Controllers\ZonasController.cs   |   namespace ChallengeMuttuApi.Controllers   |   tipo ZonasController
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Controllers/ZonasController.cs
using ChallengeMuttuApi.Data;
using ChallengeMuttuApi.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ChallengeMuttuApi.Controllers
{
    /// <summary>
    /// Controller responsável por gerenciar as operações CRUD para a entidade Zona.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")] // Ex: /api/zonas
    [Produces("application/json")]
    public class ZonasController : ControllerBase
    {
        private readonly AppDbContext _context;

        /// <summary>
        /// Construtor da ZonasController.
        /// </summary>
        /// <param name="context">O contexto do banco de dados da aplicação.</param>
        public ZonasController(AppDbContext context)
        {
            _context = context;
        }

        // ---------------------------------------------------------------------
        // Rotas GET (Recuperação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Retorna uma lista de todas as zonas cadastradas.
        /// </summary>
        /// <response code="200">Retorna a lista de zonas.</response>
        /// <response code="204">Não há zonas cadastradas.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Zona>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Zona>>> GetAllZonas()
        {
            try
            {
                var zonas = await _context.Zonas.ToListAsync();
                if (!zonas.Any())
                {
                    return NoContent();
                }
                return Ok(zonas);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar todas as zonas: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar zonas.");
            }
        }

        /// <summary>
        /// Retorna uma zona específica pelo seu ID.
        /// </summary>
        /// <param name="id">O ID da zona a ser buscada.</param>
        /// <response code="200">Retorna a zona encontrada.</response>
        /// <response code="404">Zona não encontrada.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("{id:int}")]
        [ProducesResponseType(typeof(Zona), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Zona>> GetZonaById(int id)
        {
            try
            {
                var zona = await _context.Zonas.FindAsync(id);
                if (zona == null)
                {
                    return NotFound("Zona não encontrada.");
                }
                return Ok(zona);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar zona por ID: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar zona.");
            }
        }

        /// <summary>
        /// Pesquisa zonas por parte do nome.
        /// </summary>
        /// <param name="nome">A string a ser pesquisada no nome das zonas.</param>
        /// <response code="200">Retorna a lista de zonas que correspondem à pesquisa.</response>
        /// <response code="204">Nenhuma zona encontrada com o nome especificado.</response>
        /// <response code="400">O parâmetro de nome para pesquisa é obrigatório.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("search-by-name")]
        [ProducesResponseType(typeof(IEnumerable<Zona>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Zona>>> SearchZonasByName([FromQuery] string nome)
        {
            if (string.IsNullOrWhiteSpace(nome))
            {
                return BadRequest("O parâmetro 'nome' para pesquisa é obrigatório.");
            }

            try
            {
                var zonas = await _context.Zonas
                    .Where(z => z.Nome.ToLower().Contains(nome.ToLower()))
                    .ToListAsync();

                if (!zonas.Any())
                {
                    return NoContent();
                }
                return Ok(zonas);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao pesquisar zonas por nome: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao pesquisar zonas por nome.");
            }
        }

        /// <summary>
        /// Retorna zonas que tiveram entrada ou saída em uma data específica.
        /// </summary>
        /// <param name="date">A data para buscar zonas (formato YYYY-MM-DD).</param>
        /// <param name="type">Tipo de data para buscar ('entrada' ou 'saida').</param>
        /// <response code="200">Retorna a lista de zonas encontradas.</response>
        /// <response code="204">Nenhuma zona encontrada para a data e tipo especificados.</response>
        /// <response code="400">Parâmetros de data ou tipo inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpGet("by-date")]
        [ProducesResponseType(typeof(IEnumerable<Zona>), 200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<IEnumerable<Zona>>> GetZonasByDate(
            [FromQuery] DateTime date,
            [FromQuery] string type)
        {
            if (date == default)
            {
                return BadRequest("Data inválida. Use o formato YYYY-MM-DD.");
            }
            if (string.IsNullOrWhiteSpace(type) || (type.ToLower() != "entrada" && type.ToLower() != "saida"))
            {
                return BadRequest("Tipo de busca inválido. Use 'entrada' ou 'saida'.");
            }

            try
            {
                IQueryable<Zona> query = _context.Zonas;

                if (type.ToLower() == "entrada")
                {
                    query = query.Where(z => z.DataEntrada.Date == date.Date);
                }
                else if (type.ToLower() == "saida")
                {
                    query = query.Where(z => z.DataSaida.Date == date.Date);
                }

                var zonas = await query.ToListAsync();

                if (!zonas.Any())
                {
                    return NoContent();
                }
                return Ok(zonas);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao buscar zonas por data: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao buscar zonas por data.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas POST (Criação de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Cria uma nova zona.
        /// </summary>
        /// <param name="zona">Os dados da zona a serem criados.</param>
        /// <response code="201">Zona criada com sucesso.</response>
        /// <response code="400">Dados da zona inválidos.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPost]
        [ProducesResponseType(typeof(Zona), 201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<Zona>> CreateZona([FromBody] Zona zona)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                _context.Zonas.Add(zona);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetZonaById), new { id = zona.IdZona }, zona);
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Erro de banco de dados ao criar zona: {ex.Message}");
                return StatusCode(500, "Erro ao persistir a zona no banco de dados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao criar zona: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao criar zona.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas PUT (Atualização de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Atualiza uma zona existente pelo ID.
        /// </summary>
        /// <param name="id">O ID da zona a ser atualizada.</param>
        /// <param name="zona">Os dados da zona atualizados.</param>
        /// <response code="204">Zona atualizada com sucesso.</response>
        /// <response code="400">ID na URL não corresponde ao ID da zona no corpo da requisição, ou dados inválidos.</response>
        /// <response code="404">Zona não encontrada.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpPut("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> UpdateZona(int id, [FromBody] Zona zona)
        {
            if (id != zona.IdZona)
            {
                return BadRequest("O ID na URL não corresponde ao ID da zona fornecida.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                var existingZona = await _context.Zonas.AsNoTracking().FirstOrDefaultAsync(z => z.IdZona == id);
                if (existingZona == null)
                {
                    return NotFound("Zona não encontrada para atualização.");
                }

                _context.Entry(zona).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await _context.Zonas.AnyAsync(e => e.IdZona == id))
                {
                    return NotFound("Zona não encontrada para atualização (possivelmente foi excluída por outro processo).");
                }
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro inesperado ao atualizar zona: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao atualizar zona.");
            }
        }

        // ---------------------------------------------------------------------
        // Rotas DELETE (Exclusão de Dados)
        // ---------------------------------------------------------------------

        /// <summary>
        /// Exclui uma zona pelo ID.
        /// </summary>
        /// <param name="id">O ID da zona a ser excluída.</param>
        /// <response code="204">Zona excluída com sucesso.</response>
        /// <response code="404">Zona não encontrada.</response>
        /// <response code="500">Ocorreu um erro interno no servidor.</response>
        [HttpDelete("{id:int}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> DeleteZona(int id)
        {
            try
            {
                var zona = await _context.Zonas.FindAsync(id);
                if (zona == null)
                {
                    return NotFound("Zona não encontrada para exclusão.");
                }

                _context.Zonas.Remove(zona);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir zona: {ex.Message}");
                return StatusCode(500, "Erro interno do servidor ao excluir zona.");
            }
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Data\AppDbContext.cs   |   namespace ChallengeMuttuApi.Data   |   tipo AppDbContext
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Data/AppDbContext.cs - Este arquivo deve estar na pasta 'Data'
using ChallengeMuttuApi.Model;
using ChallengeMuttuApi.Enums;
// Se você criou uma subpasta "Relacionamento" dentro de "Model", ajuste o using abaixo:
using ChallengeMuttuApi.Model;

using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace ChallengeMuttuApi.Data
{
    /// <summary>
    /// Contexto de banco de dados da aplicação, responsável por mapear as entidades
    /// C# para as tabelas do banco de dados e gerenciar as operações de persistência.
    /// </summary>
    public class AppDbContext : DbContext
    {
        /// <summary>
        /// Construtor da classe AppDbContext.
        /// </summary>
        /// <param name="options">Opções de configuração do DbContext.</param>
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        // 🔹 Todos os DbSets para suas tabelas principais

        /// <summary>Representa a coleção de Boxes no banco de dados.</summary>
        public DbSet<Box> Boxes { get; set; }
        /// <summary>Representa a coleção de Clientes no banco de dados.</summary>
        public DbSet<Cliente> Clientes { get; set; }
        /// <summary>Representa a coleção de Contatos no banco de dados.</summary>
        public DbSet<Contato> Contatos { get; set; }
        /// <summary>Representa a coleção de Endereços no banco de dados.</summary>
        public DbSet<Endereco> Enderecos { get; set; }
        /// <summary>Representa a coleção de Pátios no banco de dados.</summary>
        public DbSet<Patio> Patios { get; set; }
        /// <summary>Representa a coleção de Rastreamentos no banco de dados.</summary>
        public DbSet<Rastreamento> Rastreamentos { get; set; }
        /// <summary>Representa a coleção de Veículos no banco de dados.</summary>
        public DbSet<Veiculo> Veiculos { get; set; }
        /// <summary>Representa a coleção de Zonas no banco de dados.</summary>
        public DbSet<Zona> Zonas { get; set; }

        // 🔹 DbSets para suas tabelas de ligação (models que representam as tabelas de junção)

        /// <summary>Representa a coleção de ligações entre Clientes e Veículos.</summary>
        public DbSet<ClienteVeiculo> ClienteVeiculos { get; set; }
        /// <summary>Representa a coleção de ligações entre Contatos e Pátios.</summary>
        public DbSet<ContatoPatio> ContatoPatios { get; set; }
        /// <summary>Representa a coleção de ligações entre Endereços e Pátios.</summary>
        public DbSet<EnderecoPatio> EnderecoPatios { get; set; }
        /// <summary>Representa a coleção de ligações entre Pátios e Boxes.</summary>
        public DbSet<PatioBox> PatioBoxes { get; set; }
        /// <summary>Representa a coleção de ligações entre Veículos e Boxes.</summary>
        public DbSet<VeiculoBox> VeiculoBoxes { get; set; }
        /// <summary>Representa a coleção de ligações entre Veículos e Pátios.</summary>
        public DbSet<VeiculoPatio> VeiculoPatios { get; set; }
        /// <summary>Representa a coleção de ligações entre Veículos e Rastreamentos.</summary>
        public DbSet<VeiculoRastreamento> VeiculoRastreamentos { get; set; }
        /// <summary>Representa a coleção de ligações entre Veículos e Zonas.</summary>
        public DbSet<VeiculoZona> VeiculoZonas { get; set; }
        /// <summary>Representa a coleção de ligações entre Zonas e Boxes.</summary>
        public DbSet<ZonaBox> ZonaBoxes { get; set; }
        /// <summary>Representa a coleção de ligações entre Zonas e Pátios.</summary>
        public DbSet<ZonaPatio> ZonaPatios { get; set; }


        /// <summary>
        /// Configura o modelo de dados que será usado pelo Entity Framework Core.
        /// Este método é chamado quando o contexto de banco de dados está sendo criado.
        /// </summary>
        /// <param name="modelBuilder">O construtor de modelo usado para configurar as entidades e seus mapeamentos.</param>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // 🔹 Configuração de Chaves Compostas para Tabelas de Ligação

            /// <summary>
            /// Define a chave primária composta para a tabela ClienteVeiculo.
            /// </summary>
            modelBuilder.Entity<ClienteVeiculo>()
                .HasKey(cv => new {
                    cv.TbClienteIdCliente,
                    cv.TbClienteTbEnderecoIdEndereco,
                    cv.TbClienteTbContatoIdContato,
                    cv.TbVeiculoIdVeiculo
                });

            // 🔹 Definição das chaves estrangeiras para ClienteVeiculo
            modelBuilder.Entity<ClienteVeiculo>()
                .HasOne(cv => cv.Cliente)
                .WithMany(c => c.ClienteVeiculos)
                .HasForeignKey(cv => cv.TbClienteIdCliente);

            modelBuilder.Entity<ClienteVeiculo>()
                .HasOne(cv => cv.Veiculo)
                .WithMany(v => v.ClienteVeiculos)
                .HasForeignKey(cv => cv.TbVeiculoIdVeiculo);

            /// <summary>Define a chave primária composta para a tabela ContatoPatio.</summary>
            modelBuilder.Entity<ContatoPatio>()
                .HasKey(cp => new { cp.TbPatioIdPatio, cp.TbContatoIdContato });
            modelBuilder.Entity<ContatoPatio>()
                .HasOne(cp => cp.Patio)
                .WithMany(p => p.ContatoPatios)
                .HasForeignKey(cp => cp.TbPatioIdPatio);
            modelBuilder.Entity<ContatoPatio>()
                .HasOne(cp => cp.Contato)
                .WithMany(c => c.ContatoPatios)
                .HasForeignKey(cp => cp.TbContatoIdContato);

            /// <summary>Define a chave primária composta para a tabela EnderecoPatio.</summary>
            modelBuilder.Entity<EnderecoPatio>()
                .HasKey(ep => new { ep.TbEnderecoIdEndereco, ep.TbPatioIdPatio });
            modelBuilder.Entity<EnderecoPatio>()
                .HasOne(ep => ep.Endereco)
                .WithMany(e => e.EnderecoPatios)
                .HasForeignKey(ep => ep.TbEnderecoIdEndereco);
            modelBuilder.Entity<EnderecoPatio>()
                .HasOne(ep => ep.Patio)
                .WithMany(p => p.EnderecoPatios)
                .HasForeignKey(ep => ep.TbPatioIdPatio);

            /// <summary>Define a chave primária composta para a tabela PatioBox.</summary>
            modelBuilder.Entity<PatioBox>()
                .HasKey(pb => new { pb.TbPatioIdPatio, pb.TbBoxIdBox });
            modelBuilder.Entity<PatioBox>()
                .HasOne(pb => pb.Patio)
                .WithMany(p => p.PatioBoxes)
                .HasForeignKey(pb => pb.TbPatioIdPatio);
            modelBuilder.Entity<PatioBox>()
                .HasOne(pb => pb.Box)
                .WithMany(b => b.PatioBoxes)
                .HasForeignKey(pb => pb.TbBoxIdBox);

            /// <summary>Define a chave primária composta para a tabela VeiculoBox.</summary>
            modelBuilder.Entity<VeiculoBox>()
                .HasKey(vb => new { vb.TbVeiculoIdVeiculo, vb.TbBoxIdBox });
            modelBuilder.Entity<VeiculoBox>()
                .HasOne(vb => vb.Veiculo)
                .WithMany(v => v.VeiculoBoxes)
                .HasForeignKey(vb => vb.TbVeiculoIdVeiculo);
            modelBuilder.Entity<VeiculoBox>()
                .HasOne(vb => vb.Box)
                .WithMany(b => b.VeiculoBoxes)
                .HasForeignKey(vb => vb.TbBoxIdBox);

            /// <summary>Define a chave primária composta para a tabela VeiculoPatio.</summary>
            modelBuilder.Entity<VeiculoPatio>()
                .HasKey(vp => new { vp.TbVeiculoIdVeiculo, vp.TbPatioIdPatio });
            modelBuilder.Entity<VeiculoPatio>()
                .HasOne(vp => vp.Veiculo)
                .WithMany(v => v.VeiculoPatios)
                .HasForeignKey(vp => vp.TbVeiculoIdVeiculo);
            modelBuilder.Entity<VeiculoPatio>()
                .HasOne(vp => vp.Patio)
                .WithMany(p => p.VeiculoPatios)
                .HasForeignKey(vp => vp.TbPatioIdPatio);

            /// <summary>Define a chave primária composta para a tabela VeiculoRastreamento.</summary>
            modelBuilder.Entity<VeiculoRastreamento>()
                .HasKey(vr => new { vr.TbVeiculoIdVeiculo, vr.TbRastreamentoIdRastreamento });
            modelBuilder.Entity<VeiculoRastreamento>()
                .HasOne(vr => vr.Veiculo)
                .WithMany(v => v.VeiculoRastreamentos)
                .HasForeignKey(vr => vr.TbVeiculoIdVeiculo);
            modelBuilder.Entity<VeiculoRastreamento>()
                .HasOne(vr => vr.Rastreamento)
                .WithMany(r => r.VeiculoRastreamentos)
                .HasForeignKey(vr => vr.TbRastreamentoIdRastreamento);

            /// <summary>Define a chave primária composta para a tabela VeiculoZona.</summary>
            modelBuilder.Entity<VeiculoZona>()
                .HasKey(vz => new { vz.TbVeiculoIdVeiculo, vz.TbZonaIdZona });
            modelBuilder.Entity<VeiculoZona>()
                .HasOne(vz => vz.Veiculo)
                .WithMany(v => v.VeiculoZonas)
                .HasForeignKey(vz => vz.TbVeiculoIdVeiculo);
            modelBuilder.Entity<VeiculoZona>()
                .HasOne(vz => vz.Zona)
                .WithMany(z => z.VeiculoZonas)
                .HasForeignKey(vz => vz.TbZonaIdZona);

            /// <summary>Define a chave primária composta para a tabela ZonaBox.</summary>
            modelBuilder.Entity<ZonaBox>()
                .HasKey(zb => new { zb.TbZonaIdZona, zb.TbBoxIdBox });
            modelBuilder.Entity<ZonaBox>()
                .HasOne(zb => zb.Zona)
                .WithMany(z => z.ZonaBoxes)
                .HasForeignKey(zb => zb.TbZonaIdZona);
            modelBuilder.Entity<ZonaBox>()
                .HasOne(zb => zb.Box)
                .WithMany(b => b.ZonaBoxes)
                .HasForeignKey(zb => zb.TbBoxIdBox);

            /// <summary>Define a chave primária composta para a tabela ZonaPatio.</summary>
            modelBuilder.Entity<ZonaPatio>()
                .HasKey(zp => new { zp.TbPatioIdPatio, zp.TbZonaIdZona });
            modelBuilder.Entity<ZonaPatio>()
                .HasOne(zp => zp.Patio)
                .WithMany(p => p.ZonaPatios)
                .HasForeignKey(zp => zp.TbPatioIdPatio);
            modelBuilder.Entity<ZonaPatio>()
                .HasOne(zp => zp.Zona)
                .WithMany(z => z.ZonaPatios)
                .HasForeignKey(zp => zp.TbZonaIdZona);

            // 🔹 Configuração de Índices Únicos usando Fluent API (Movido dos Models para cá)

            /// <summary>
            /// Configura o índice único para a coluna CPF na tabela Cliente.
            /// </summary>
            modelBuilder.Entity<Cliente>()
                .HasIndex(c => c.Cpf)
                .IsUnique();

            /// <summary>
            /// Configura os índices únicos para as colunas PLACA, RENAVAM e CHASSI na tabela Veiculo.
            /// </summary>
            modelBuilder.Entity<Veiculo>()
                .HasIndex(v => v.Placa)
                .IsUnique();

            modelBuilder.Entity<Veiculo>()
                .HasIndex(v => v.Renavam)
                .IsUnique();

            modelBuilder.Entity<Veiculo>()
                .HasIndex(v => v.Chassi)
                .IsUnique();

            // 🔹 Configurações adicionais de mapeamento

            /// <summary>
            /// Mapeamento da propriedade EstadoCivil do model Cliente para string no banco de dados,
            /// garantindo que os valores do enum sejam persistidos como seus nomes em string.
            /// </summary>
            modelBuilder.Entity<Cliente>()
                .Property(c => c.EstadoCivil)
                .HasConversion<string>();

            /// <summary>
            /// Mapeamento da propriedade Status do model Box para string no banco de dados,
            /// convertendo entre bool (C#) e string ('A'/'I') (Oracle).
            /// </summary>
            modelBuilder.Entity<Box>()
                .Property(b => b.Status)
                .HasConversion(
                    v => v == "A" ? true : false,
                    v => v ? "A" : "I"
                );
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Enums\EstadoCivil.cs   |   namespace ChallengeMuttuApi.Enums   |   tipo EstadoCivil
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Enums/EstadoCivil.cs

namespace ChallengeMuttuApi.Enums
{
    /// <summary>
    /// Define os estados civis possíveis para um cliente, mapeando os valores do banco de dados Oracle.
    /// </summary>
    public enum EstadoCivil
    {
        /// <summary>
        /// Representa o estado civil 'Solteiro'.
        /// </summary>
        Solteiro,
        /// <summary>
        /// Representa o estado civil 'Casado'.
        /// </summary>
        Casado,
        /// <summary>
        /// Representa o estado civil 'Divorciado'.
        /// </summary>
        Viuvo, // Representa o estado civil 'Viuvo'.
        /// <summary>
        /// Representa o estado civil 'Separado'.
        /// </summary>
        Separado,
        /// <summary>
        /// Representa o estado civil 'União Estável'.
        /// </summary>
        Uniao_Estavel // "Uni o Est vel" no DDL, adaptado para C#
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Box.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Box
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/Box.cs
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a entidade Box no banco de dados, mapeando para a tabela "TB_BOX".
    /// Armazena informações sobre caixas ou compartimentos, como nome, status e datas.
    /// </summary>
    [Table("TB_BOX")]
    public class Box
    {
        /// <summary>
        /// Construtor padrão da classe Box.
        /// Inicializa propriedades de string não anuláveis para evitar warnings CS8618.
        /// </summary>
        public Box()
        {
            Nome = string.Empty;
            Status = string.Empty;
        }

        /// <summary>
        /// Obtém ou define o identificador único do Box.
        /// Mapeia para a coluna "ID_BOX" (Chave Primária, gerada por identidade).
        /// </summary>
        [Key]
        [Column("ID_BOX")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Indica que o valor é gerado pelo banco de dados (coluna IDENTITY)
        public int IdBox { get; set; }

        /// <summary>
        /// Obtém ou define o nome do Box.
        /// Mapeia para a coluna "NOME" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("NOME")]
        [Required(ErrorMessage = "O nome do Box é obrigatório.")]
        [StringLength(50, ErrorMessage = "O nome do Box deve ter no máximo 50 caracteres.")]
        public string Nome { get; set; }

        /// <summary>
        /// Obtém ou define o status atual do Box.
        /// Mapeia para a coluna "STATUS" (VARCHAR2(1 CHAR), Obrigatório).
        /// Pode ser 'A' para Ativo, 'I' para Inativo, etc. (depende da lógica de negócio).
        /// </summary>
        [Column("STATUS")]
        [Required(ErrorMessage = "O status do Box é obrigatório.")]
        [StringLength(1, ErrorMessage = "O status deve ter 1 caractere.")]
        public string Status { get; set; } // Pode ser convertido para bool no DTO/negócio se 'A'/'I' ou similar

        /// <summary>
        /// Obtém ou define a data de entrada do Box.
        /// Mapeia para a coluna "DATA_ENTRADA" (DATE, Obrigatório).
        /// </summary>
        [Column("DATA_ENTRADA")]
        [Required(ErrorMessage = "A data de entrada é obrigatória.")]
        public DateTime DataEntrada { get; set; }

        /// <summary>
        /// Obtém ou define a data de saída do Box.
        /// Mapeia para a coluna "DATA_SAIDA" (DATE, Obrigatório).
        /// </summary>
        [Column("DATA_SAIDA")]
        [Required(ErrorMessage = "A data de saída é obrigatória.")]
        public DateTime DataSaida { get; set; }

        /// <summary>
        /// Obtém ou define observações adicionais sobre o Box.
        /// Mapeia para a coluna "OBSERVACAO" (VARCHAR2(100 BYTE), Opcional).
        /// </summary>
        [Column("OBSERVACAO")]
        [StringLength(100, ErrorMessage = "As observações devem ter no máximo 100 caracteres.")]
        public string? Observacao { get; set; } // "?" indica que a propriedade pode ser nula

        /// <summary>
        /// Coleção de entidades PatioBox, representando o relacionamento muitos-para-muitos com Pátios.
        /// </summary>
        public ICollection<PatioBox>? PatioBoxes { get; set; }

        /// <summary>
        /// Coleção de entidades VeiculoBox, representando o relacionamento muitos-para-muitos com Veículos.
        /// </summary>
        public ICollection<VeiculoBox>? VeiculoBoxes { get; set; }

        /// <summary>
        /// Coleção de entidades ZonaBox, representando o relacionamento muitos-para-muitos com Zonas.
        /// </summary>
        public ICollection<ZonaBox>? ZonaBoxes { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Cliente.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Cliente
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/Cliente.cs - Este arquivo deve estar na pasta 'Model'
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using ChallengeMuttuApi.Enums;
using System.Linq; // Necessário para .All(char.IsDigit)

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a entidade Cliente no banco de dados, mapeando para a tabela "TB_CLIENTE".
    /// Contém informações pessoais e de contato de um cliente.
    /// </summary>
    [Table("TB_CLIENTE")]
    public class Cliente
    {
        /// <summary>
        /// Construtor padrão da classe Cliente.
        /// Inicializa propriedades de string não anuláveis para evitar warnings CS8618.
        /// </summary>
        public Cliente()
        {
            Nome = string.Empty;
            Sobrenome = string.Empty;
            Profissao = string.Empty;
            _sexo = string.Empty; // Inicializa o campo de apoio
            _cpf = string.Empty;   // Inicializa o campo de apoio
        }

        /// <summary>
        /// Obtém ou define o identificador único do Cliente.
        /// Mapeia para a coluna "ID_CLIENTE" (Chave Primária, gerada por identidade).
        /// </summary>
        [Key]
        [Column("ID_CLIENTE")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int IdCliente { get; set; }

        /// <summary>
        /// Obtém ou define a data de cadastro do cliente.
        /// Mapeia para a coluna "DATA_CADASTRO" (DATE, Obrigatório, com valor padrão SYSDATE).
        /// </summary>
        [Column("DATA_CADASTRO")]
        [Required(ErrorMessage = "A data de cadastro é obrigatória.")]
        public DateTime DataCadastro { get; set; } = DateTime.Now; // Default SYSDATE no banco

        private string _sexo; // Campo de apoio para a propriedade Sexo

        /// <summary>
        /// Obtém ou define o sexo do cliente.
        /// Mapeia para a coluna "SEXO" (VARCHAR2(2 CHAR), Obrigatório).
        /// Possui validação para aceitar apenas 'M' (Mulher) ou 'H' (Homem).
        /// </summary>
        [Column("SEXO")]
        [Required(ErrorMessage = "O Sexo é obrigatório.")]
        [StringLength(2, ErrorMessage = "O Sexo deve ter no máximo 2 caracteres.")]
        public string Sexo
        {
            get => _sexo;
            set
            {
                if (value == "M" || value == "H") // 'M' para Masculino, 'H' para Feminino, ou similar. Verifique seu padrão real.
                    _sexo = value;
                else
                    throw new ArgumentException("Sexo inválido! Use 'M' para Masculino ou 'H' para Feminino.", nameof(Sexo));
            }
        }

        /// <summary>
        /// Obtém ou define o primeiro nome do cliente.
        /// Mapeia para a coluna "NOME" (VARCHAR2(100 BYTE), Obrigatório).
        /// </summary>
        [Column("NOME")]
        [Required(ErrorMessage = "O Nome é obrigatório.")]
        [StringLength(100, ErrorMessage = "O Nome deve ter no máximo 100 caracteres.")]
        public string Nome { get; set; }

        /// <summary>
        /// Obtém ou define o sobrenome do cliente.
        /// Mapeia para a coluna "SOBRENOME" (VARCHAR2(100 BYTE), Obrigatório).
        /// </summary>
        [Column("SOBRENOME")]
        [Required(ErrorMessage = "O Sobrenome é obrigatório.")]
        [StringLength(100, ErrorMessage = "O Sobrenome deve ter no máximo 100 caracteres.")]
        public string Sobrenome { get; set; }

        /// <summary>
        /// Obtém ou define a data de nascimento do cliente.
        /// Mapeia para a coluna "DATA_NASCIMENTO" (DATE, Obrigatório).
        /// Possui validação para datas a partir de '1900-01-01' via CHECK constraint no DB.
        /// </summary>
        [Column("DATA_NASCIMENTO")]
        [Required(ErrorMessage = "A Data de Nascimento é obrigatória.")]
        public DateTime DataNascimento { get; set; }

        private string _cpf; // Campo de apoio para a propriedade Cpf

        /// <summary>
        /// Obtém ou define o CPF (Cadastro de Pessoas Físicas) do cliente.
        /// Mapeia para a coluna "CPF" (VARCHAR2(11 CHAR), Obrigatório, Único).
        /// Possui validação para 11 dígitos numéricos.
        /// </summary>
        [Column("CPF")]
        [Required(ErrorMessage = "O CPF é obrigatório.")]
        [StringLength(11, MinimumLength = 11, ErrorMessage = "O CPF deve ter exatamente 11 dígitos.")]
        // O atributo [Index] foi removido daqui e será configurado via Fluent API no DbContext.
        public string Cpf
        {
            get => _cpf;
            set
            {
                if (!string.IsNullOrEmpty(value) && value.Length == 11 && value.All(char.IsDigit))
                    _cpf = value;
                else
                    throw new ArgumentException("CPF inválido! Deve conter 11 dígitos numéricos.", nameof(Cpf));
            }
        }

        /// <summary>
        /// Obtém ou define a profissão do cliente.
        /// Mapeia para a coluna "PROFISSAO" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("PROFISSAO")]
        [Required(ErrorMessage = "A Profissão é obrigatória.")]
        [StringLength(50, ErrorMessage = "A Profissão deve ter no máximo 50 caracteres.")]
        public string Profissao { get; set; }

        private EstadoCivil _estadoCivil; // Campo de apoio para a propriedade EstadoCivil

        /// <summary>
        /// Obtém ou define o estado civil do cliente.
        /// Mapeia para a coluna "ESTADO_CIVIL" (VARCHAR2(50 BYTE), Obrigatório).
        /// Usa o enum <see cref="EstadoCivil"/> para validação e tipagem.
        /// </summary>
        [Column("ESTADO_CIVIL")]
        [Required(ErrorMessage = "O Estado Civil é obrigatório.")]
        [StringLength(50)] // Mapeamento para string no banco
        [EnumDataType(typeof(EstadoCivil), ErrorMessage = "Estado civil inválido!")]
        public EstadoCivil EstadoCivil
        {
            get => _estadoCivil;
            set
            {
                if (!Enum.IsDefined(typeof(EstadoCivil), value))
                    throw new ArgumentException("Estado civil inválido!", nameof(EstadoCivil));
                _estadoCivil = value;
            }
        }

        /// <summary>
        /// Obtém ou define o status do cliente.
        /// OBS: Esta propriedade não está presente no DDL da tabela TB_CLIENTE original.
        /// Assumimos que é um campo de status lógico (Ativo/Inativo), onde `true` é Ativo e `false` é Inativo.
        /// </summary>
        [Column("STATUS")]
        [Required(ErrorMessage = "O Status do cliente é obrigatório.")]
        public bool Status { get; set; }

        /// <summary>
        /// Obtém ou define o ID da chave estrangeira para a entidade Endereco.
        /// Mapeia para a coluna "TB_ENDERECO_ID_ENDERECO" (NUMBER, Obrigatório).
        /// </summary>
        [Column("TB_ENDERECO_ID_ENDERECO")]
        [Required(ErrorMessage = "O ID do Endereço é obrigatório.")]
        public int TbEnderecoIdEndereco { get; set; }

        /// <summary>
        /// Obtém ou define o ID da chave estrangeira para a entidade Contato.
        /// Mapeia para a coluna "TB_CONTATO_ID_CONTATO" (NUMBER, Obrigatório).
        /// </summary>
        [Column("TB_CONTATO_ID_CONTATO")]
        [Required(ErrorMessage = "O ID do Contato é obrigatório.")]
        public int TbContatoIdContato { get; set; }

        // Propriedades de Navegação

        /// <summary>
        /// Propriedade de navegação para a entidade Endereco associada.
        /// </summary>
        [ForeignKey("TbEnderecoIdEndereco")]
        public Endereco? Endereco { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Contato associada.
        /// </summary>
        [ForeignKey("TbContatoIdContato")]
        public Contato? Contato { get; set; }

        /// <summary>
        /// Coleção de entidades ClienteVeiculo, representando o relacionamento muitos-para-muitos com Veículos.
        /// </summary>
        public ICollection<ClienteVeiculo>? ClienteVeiculos { get; set; }

        /// <summary>
        /// Construtor parametrizado da classe Cliente.
        /// </summary>
        /// <param name="idCliente">O identificador único do cliente.</param>
        /// <param name="nome">O primeiro nome do cliente.</param>
        /// <param name="sobrenome">O sobrenome do cliente.</param>
        /// <param name="sexo">O sexo do cliente ('M' ou 'H').</param>
        /// <param name="cpf">O CPF do cliente (11 dígitos numéricos).</param>
        /// <param name="profissao">A profissão do cliente.</param>
        /// <param name="estadoCivil">O estado civil do cliente, usando o enum EstadoCivil.</param>
        /// <param name="dataNascimento">A data de nascimento do cliente.</param>
        /// <param name="status">O status do cliente (true para Ativo, false para Inativo).</param>
        public Cliente(int idCliente, string nome, string sobrenome, string sexo, string cpf,
                       string profissao, EstadoCivil estadoCivil, DateTime dataNascimento, bool status)
        {
            IdCliente = idCliente;
            Nome = nome;
            Sobrenome = sobrenome;
            Profissao = profissao;
            EstadoCivil = estadoCivil;
            DataNascimento = dataNascimento;
            Status = status;

            DataCadastro = DateTime.Now;

            Sexo = sexo;
            Cpf = cpf;
        }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\ClienteVeiculo.cs   |   namespace ChallengeMuttuApi.Model   |   tipo ClienteVeiculo
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/ClienteVeiculo.cs - Este arquivo deve estar na pasta 'Model'
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_CLIENTEVEICULO" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Cliente e Veículo.
    /// A chave primária desta tabela é composta por uma combinação de IDs de Cliente, Endereço, Contato e Veículo.
    /// OBS: O design da PK composta (CLIENTEVEICULO_PK) é incomum e pode exigir configuração explícita no DbContext.
    /// </summary>
    [Table("TB_CLIENTEVEICULO")]
    public class ClienteVeiculo
    {
        /// <summary>
        /// Obtém ou define o ID do Cliente que faz parte da chave composta.
        /// Mapeia para a coluna "TB_CLIENTE_ID_CLIENTE" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_CLIENTE_ID_CLIENTE")]
        [Required]
        public int TbClienteIdCliente { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Endereço do Cliente que faz parte da chave composta.
        /// Mapeia para a coluna "TB_CLIENTE_TB_ENDERECO_ID_ENDERECO" (Parte da Chave Primária Composta).
        /// Este campo é uma anomalia no DDL, pois a PK de TB_CLIENTE é apenas ID_CLIENTE.
        /// Recomenda-se revisão do design do banco se esta complexidade não for intencional.
        /// </summary>
        [Column("TB_CLIENTE_TB_ENDERECO_ID_ENDERECO")]
        [Required]
        public int TbClienteTbEnderecoIdEndereco { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Contato do Cliente que faz parte da chave composta.
        /// Mapeia para a coluna "TB_CLIENTE_TB_CONTATO_ID_CONTATO" (Parte da Chave Primária Composta).
        /// Este campo é uma anomalia no DDL, similar ao Endereço.
        /// </summary>
        [Column("TB_CLIENTE_TB_CONTATO_ID_CONTATO")]
        [Required]
        public int TbClienteTbContatoIdContato { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Veículo que faz parte da chave composta.
        /// Mapeia para a coluna "TB_VEICULO_ID_VEICULO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_VEICULO_ID_VEICULO")]
        [Required]
        public int TbVeiculoIdVeiculo { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Cliente associada.
        /// </summary>
        [ForeignKey("TbClienteIdCliente")]
        public Cliente? Cliente { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Veiculo associada.
        /// </summary>
        [ForeignKey("TbVeiculoIdVeiculo")]
        public Veiculo? Veiculo { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Contato.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Contato
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/Contato.cs - Este arquivo deve estar na pasta 'Model'
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a entidade Contato no banco de dados, mapeando para a tabela "TB_CONTATO".
    /// Contém informações de contato como e-mail, telefones e observações.
    /// </summary>
    [Table("TB_CONTATO")]
    public class Contato
    {
        /// <summary>
        /// Construtor padrão da classe Contato.
        /// Inicializa propriedades de string não anuláveis para evitar warnings CS8618.
        /// </summary>
        public Contato()
        {
            Email = string.Empty;
            Telefone1 = string.Empty;
            Celular = string.Empty;
        }

        /// <summary>
        /// Obtém ou define o identificador único do Contato.
        /// Mapeia para a coluna "ID_CONTATO" (Chave Primária, gerada por identidade).
        /// </summary>
        [Key]
        [Column("ID_CONTATO")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int IdContato { get; set; }

        /// <summary>
        /// Obtém ou define o endereço de e-mail principal do contato.
        /// Mapeia para a coluna "EMAIL" (VARCHAR2(100 BYTE), Obrigatório).
        /// </summary>
        [Column("EMAIL")]
        [Required(ErrorMessage = "O e-mail é obrigatório.")]
        [StringLength(100, ErrorMessage = "O e-mail deve ter no máximo 100 caracteres.")]
        [EmailAddress(ErrorMessage = "Formato de e-mail inválido.")] // Atributo para validação de formato de e-mail
        public string Email { get; set; }

        /// <summary>
        /// Obtém ou define o DDD (Código de Discagem Direta a Distância) do telefone principal.
        /// Mapeia para a coluna "DDD" (NUMBER(4,0), Obrigatório).
        /// Possui validação de range entre 11 e 99.
        /// </summary>
        [Column("DDD")]
        [Required(ErrorMessage = "O DDD é obrigatório.")]
        [Range(11, 99, ErrorMessage = "O DDD deve ser entre 11 e 99.")] // Baseado na CHECK constraint do DDL
        public int Ddd { get; set; }

        /// <summary>
        /// Obtém ou define o DDI (Código de Discagem Direta Internacional) do telefone principal.
        /// Mapeia para a coluna "DDI" (NUMBER(4,0), Obrigatório).
        /// </summary>
        [Column("DDI")]
        [Required(ErrorMessage = "O DDI é obrigatório.")]
        [Range(0, 9999, ErrorMessage = "O DDI deve ter no máximo 4 dígitos.")] // Assumindo range razoável para DDI
        public int Ddi { get; set; }

        /// <summary>
        /// Obtém ou define o primeiro número de telefone do contato.
        /// Mapeia para a coluna "TELEFONE1" (VARCHAR2(20 BYTE), Obrigatório).
        /// </summary>
        [Column("TELEFONE1")]
        [Required(ErrorMessage = "O Telefone 1 é obrigatório.")]
        [StringLength(20, ErrorMessage = "O Telefone 1 deve ter no máximo 20 caracteres.")]
        public string Telefone1 { get; set; }

        /// <summary>
        /// Obtém ou define o segundo número de telefone do contato.
        /// Mapeia para a coluna "TELEFONE2" (VARCHAR2(20 BYTE), Opcional).
        /// </summary>
        [Column("TELEFONE2")]
        [StringLength(20, ErrorMessage = "O Telefone 2 deve ter no máximo 20 caracteres.")]
        public string? Telefone2 { get; set; }

        /// <summary>
        /// Obtém ou define o terceiro número de telefone do contato.
        /// Mapeia para a coluna "TELEFONE3" (VARCHAR2(20 BYTE), Opcional).
        /// </summary>
        [Column("TELEFONE3")]
        [StringLength(20, ErrorMessage = "O Telefone 3 deve ter no máximo 20 caracteres.")]
        public string? Telefone3 { get; set; }

        /// <summary>
        /// Obtém ou define o número de celular do contato.
        /// Mapeia para a coluna "CELULAR" (VARCHAR2(20 BYTE), Obrigatório).
        /// </summary>
        [Column("CELULAR")]
        [Required(ErrorMessage = "O Celular é obrigatório.")]
        [StringLength(20, ErrorMessage = "O Celular deve ter no máximo 20 caracteres.")]
        public string Celular { get; set; }

        /// <summary>
        /// Obtém ou define outras informações de contato.
        /// Mapeia para a coluna "OUTRO" (VARCHAR2(100 BYTE), Opcional).
        /// </summary>
        [Column("OUTRO")]
        [StringLength(100, ErrorMessage = "O campo Outro deve ter no máximo 100 caracteres.")]
        public string? Outro { get; set; }

        /// <summary>
        /// Obtém ou define observações adicionais sobre o contato.
        /// Mapeia para a coluna "OBSERVACAO" (VARCHAR2(200 BYTE), Opcional).
        /// </summary>
        [Column("OBSERVACAO")]
        [StringLength(200, ErrorMessage = "As observações devem ter no máximo 200 caracteres.")]
        public string? Observacao { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Coleção de entidades Cliente associadas a este Contato.
        /// Representa o relacionamento um-para-muitos onde um Contato pode ser associado a múltiplos Clientes.
        /// </summary>
        public ICollection<Cliente>? Clientes { get; set; }

        /// <summary>
        /// Coleção de entidades ContatoPatio, representando o relacionamento muitos-para-muitos com Pátios.
        /// </summary>
        public ICollection<ContatoPatio>? ContatoPatios { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\ContatoPatio.cs   |   namespace ChallengeMuttuApi.Model   |   tipo ContatoPatio
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/ContatoPatio.cs - Este arquivo deve estar na pasta 'Model'
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_CONTATOPATIO" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Contato e Pátio.
    /// A chave primária desta tabela é composta pelos IDs de Pátio e Contato.
    /// </summary>
    [Table("TB_CONTATOPATIO")]
    public class ContatoPatio
    {
        /// <summary>
        /// Obtém ou define o ID do Pátio que faz parte da chave composta.
        /// Mapeia para a coluna "TB_PATIO_ID_PATIO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_PATIO_ID_PATIO")]
        [Required]
        public int TbPatioIdPatio { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Contato que faz parte da chave composta.
        /// Mapeia para a coluna "TB_CONTATO_ID_CONTATO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_CONTATO_ID_CONTATO")]
        [Required]
        public int TbContatoIdContato { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Pátio associada.
        /// </summary>
        [ForeignKey("TbPatioIdPatio")]
        public Patio? Patio { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Contato associada.
        /// </summary>
        [ForeignKey("TbContatoIdContato")]
        public Contato? Contato { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Endereco.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Endereco
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/Endereco.cs - Este arquivo deve estar na pasta 'Model'
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a entidade Endereço no banco de dados, mapeando para a tabela "TB_ENDERECO".
    /// Contém detalhes de um endereço como CEP, logradouro, cidade, estado, etc.
    /// </summary>
    [Table("TB_ENDERECO")]
    public class Endereco
    {
        /// <summary>
        /// Construtor padrão da classe Endereco.
        /// Inicializa propriedades de string não anuláveis para evitar warnings CS8618.
        /// </summary>
        public Endereco()
        {
            Cep = string.Empty;
            Logradouro = string.Empty;
            Bairro = string.Empty;
            Cidade = string.Empty;
            Estado = string.Empty;
            Pais = string.Empty;
        }

        /// <summary>
        /// Obtém ou define o identificador único do Endereço.
        /// Mapeia para a coluna "ID_ENDERECO" (Chave Primária, gerada por identidade).
        /// </summary>
        [Key]
        [Column("ID_ENDERECO")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int IdEndereco { get; set; }

        /// <summary>
        /// Obtém ou define o CEP (Código de Endereçamento Postal) do endereço.
        /// Mapeia para a coluna "CEP" (VARCHAR2(9 CHAR), Obrigatório).
        /// </summary>
        [Column("CEP")]
        [Required(ErrorMessage = "O CEP é obrigatório.")]
        [StringLength(9, ErrorMessage = "O CEP deve ter no máximo 9 caracteres.")]
        public string Cep { get; set; }

        /// <summary>
        /// Obtém ou define o número do endereço.
        /// Mapeia para a coluna "NUMERO" (NUMBER(7,0), Obrigatório).
        /// </summary>
        [Column("NUMERO")]
        [Required(ErrorMessage = "O Número é obrigatório.")]
        public int Numero { get; set; }

        /// <summary>
        /// Obtém ou define o nome do logradouro (rua, avenida, etc.).
        /// Mapeia para a coluna "LOGRADOURO" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("LOGRADOURO")]
        [Required(ErrorMessage = "O Logradouro é obrigatório.")]
        [StringLength(50, ErrorMessage = "O Logradouro deve ter no máximo 50 caracteres.")]
        public string Logradouro { get; set; }

        /// <summary>
        /// Obtém ou define o nome do bairro.
        /// Mapeia para a coluna "BAIRRO" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("BAIRRO")]
        [Required(ErrorMessage = "O Bairro é obrigatório.")]
        [StringLength(50, ErrorMessage = "O Bairro deve ter no máximo 50 caracteres.")]
        public string Bairro { get; set; }

        /// <summary>
        /// Obtém ou define o nome da cidade.
        /// Mapeia para a coluna "CIDADE" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("CIDADE")]
        [Required(ErrorMessage = "A Cidade é obrigatória.")]
        [StringLength(50, ErrorMessage = "A Cidade deve ter no máximo 50 caracteres.")]
        public string Cidade { get; set; }

        /// <summary>
        /// Obtém ou define a sigla do estado (UF).
        /// Mapeia para a coluna "ESTADO" (VARCHAR2(2 CHAR), Obrigatório).
        /// </summary>
        [Column("ESTADO")]
        [Required(ErrorMessage = "O Estado é obrigatório.")]
        [StringLength(2, ErrorMessage = "O Estado deve ter 2 caracteres (sigla).")]
        public string Estado { get; set; }

        /// <summary>
        /// Obtém ou define o nome do país.
        /// Mapeia para a coluna "PAIS" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("PAIS")]
        [Required(ErrorMessage = "O País é obrigatório.")]
        [StringLength(50, ErrorMessage = "O País deve ter no máximo 50 caracteres.")]
        public string Pais { get; set; }

        /// <summary>
        /// Obtém ou define o complemento do endereço (ex: apartamento, bloco).
        /// Mapeia para a coluna "COMPLEMENTO" (VARCHAR2(60 BYTE), Opcional).
        /// </summary>
        [Column("COMPLEMENTO")]
        [StringLength(60, ErrorMessage = "O Complemento deve ter no máximo 60 caracteres.")]
        public string? Complemento { get; set; }

        /// <summary>
        /// Obtém ou define observações adicionais sobre o endereço.
        /// Mapeia para a coluna "OBSERVACAO" (VARCHAR2(200 BYTE), Opcional).
        /// </summary>
        [Column("OBSERVACAO")]
        [StringLength(200, ErrorMessage = "As observações devem ter no máximo 200 caracteres.")]
        public string? Observacao { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Coleção de entidades Cliente associadas a este Endereço.
        /// Representa o relacionamento um-para-muitos onde um Endereço pode ser associado a múltiplos Clientes.
        /// </summary>
        public ICollection<Cliente>? Clientes { get; set; }

        /// <summary>
        /// Coleção de entidades EnderecoPatio, representando o relacionamento muitos-para-muitos com Pátios.
        /// </summary>
        public ICollection<EnderecoPatio>? EnderecoPatios { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\EnderecoPatio.cs   |   namespace ChallengeMuttuApi.Model   |   tipo EnderecoPatio
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/EnderecoPatio.cs - Este arquivo deve estar na pasta 'Model'
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_ENDERECIOPATIO" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Endereço e Pátio.
    /// A chave primária desta tabela é composta pelos IDs de Endereço e Pátio.
    /// </summary>
    [Table("TB_ENDERECIOPATIO")]
    public class EnderecoPatio
    {
        /// <summary>
        /// Obtém ou define o ID do Endereço que faz parte da chave composta.
        /// Mapeia para a coluna "TB_ENDERECO_ID_ENDERECO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_ENDERECO_ID_ENDERECO")]
        [Required]
        public int TbEnderecoIdEndereco { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Pátio que faz parte da chave composta.
        /// Mapeia para a coluna "TB_PATIO_ID_PATIO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_PATIO_ID_PATIO")]
        [Required]
        public int TbPatioIdPatio { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Endereço associada.
        /// </summary>
        [ForeignKey("TbEnderecoIdEndereco")]
        public Endereco? Endereco { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Pátio associada.
        /// </summary>
        [ForeignKey("TbPatioIdPatio")]
        public Patio? Patio { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Filial.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Filial
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿using System.ComponentModel.DataAnnotations;

namespace ChallengeMuttuApi.Model
{
    public class Filial
    {
        public int FilialId { get; set; }

        [MaxLength(50)]
        [Required]
        public string Nome { get; set; }

        private string status;
        public bool Status { get; set; } // 🔹 Agora trabalha com `true` (Ativo) ou `false` (Inativo)

    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Patio.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Patio
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/Patio.cs - Este arquivo deve estar na pasta 'Model'
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a entidade Pátio no banco de dados, mapeando para a tabela "TB_PATIO".
    /// Armazena informações sobre locais de estacionamento ou armazenamento.
    /// </summary>
    [Table("TB_PATIO")]
    public class Patio
    {
        /// <summary>
        /// Construtor padrão da classe Patio.
        /// Inicializa propriedades de string não anuláveis para evitar warnings CS8618.
        /// </summary>
        public Patio()
        {
            NomePatio = string.Empty;
        }

        /// <summary>
        /// Obtém ou define o identificador único do Pátio.
        /// Mapeia para a coluna "ID_PATIO" (Chave Primária, gerada por identidade).
        /// </summary>
        [Key]
        [Column("ID_PATIO")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int IdPatio { get; set; }

        /// <summary>
        /// Obtém ou define o nome do Pátio.
        /// Mapeia para a coluna "NOME_PATIO" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("NOME_PATIO")]
        [Required(ErrorMessage = "O nome do Pátio é obrigatório.")]
        [StringLength(50, ErrorMessage = "O nome do Pátio deve ter no máximo 50 caracteres.")]
        public string NomePatio { get; set; }

        /// <summary>
        /// Obtém ou define a data de entrada no Pátio.
        /// Mapeia para a coluna "DATA_ENTRADA" (DATE, Obrigatório).
        /// </summary>
        [Column("DATA_ENTRADA")]
        [Required(ErrorMessage = "A data de entrada é obrigatória.")]
        public DateTime DataEntrada { get; set; }

        /// <summary>
        /// Obtém ou define a data de saída do Pátio.
        /// Mapeia para a coluna "DATA_SAIDA" (DATE, Obrigatório).
        /// </summary>
        [Column("DATA_SAIDA")]
        [Required(ErrorMessage = "A data de saída é obrigatória.")]
        public DateTime DataSaida { get; set; }

        /// <summary>
        /// Obtém ou define observações adicionais sobre o Pátio.
        /// Mapeia para a coluna "OBSERVACAO" (VARCHAR2(100 BYTE), Opcional).
        /// </summary>
        [Column("OBSERVACAO")]
        [StringLength(100, ErrorMessage = "As observações devem ter no máximo 100 caracteres.")]
        public string? Observacao { get; set; }

        // Propriedades de Navegação para tabelas de ligação

        /// <summary>
        /// Coleção de entidades ContatoPatio, representando o relacionamento muitos-para-muitos com Contatos.
        /// </summary>
        public ICollection<ContatoPatio>? ContatoPatios { get; set; }

        /// <summary>
        /// Coleção de entidades EnderecoPatio, representando o relacionamento muitos-para-muitos com Endereços.
        /// </summary>
        public ICollection<EnderecoPatio>? EnderecoPatios { get; set; }

        /// <summary>
        /// Coleção de entidades PatioBox, representando o relacionamento muitos-para-muitos com Boxes.
        /// </summary>
        public ICollection<PatioBox>? PatioBoxes { get; set; }

        /// <summary>
        /// Coleção de entidades VeiculoPatio, representando o relacionamento muitos-para-muitos com Veículos.
        /// </summary>
        public ICollection<VeiculoPatio>? VeiculoPatios { get; set; }

        /// <summary>
        /// Coleção de entidades ZonaPatio, representando o relacionamento muitos-para-muitos com Zonas.
        /// </summary>
        public ICollection<ZonaPatio>? ZonaPatios { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\PatioBox.cs   |   namespace ChallengeMuttuApi.Model   |   tipo PatioBox
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/PatioBox.cs - Este arquivo deve estar na pasta 'Model'
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_PATIOBOX" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Pátio e Box.
    /// A chave primária desta tabela é composta pelos IDs de Pátio e Box.
    /// </summary>
    [Table("TB_PATIOBOX")]
    public class PatioBox
    {
        /// <summary>
        /// Obtém ou define o ID do Pátio que faz parte da chave composta.
        /// Mapeia para a coluna "TB_PATIO_ID_PATIO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_PATIO_ID_PATIO")]
        [Required]
        public int TbPatioIdPatio { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Box que faz parte da chave composta.
        /// Mapeia para a coluna "TB_BOX_ID_BOX" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_BOX_ID_BOX")]
        [Required]
        public int TbBoxIdBox { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Pátio associada.
        /// </summary>
        [ForeignKey("TbPatioIdPatio")]
        public Patio? Patio { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Box associada.
        /// </summary>
        [ForeignKey("TbBoxIdBox")]
        public Box? Box { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Rastreamento.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Rastreamento
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/Rastreamento.cs - Este arquivo deve estar na pasta 'Model'
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a entidade Rastreamento no banco de dados, mapeando para a tabela "TB_RASTREAMENTO".
    /// Contém dados de posicionamento interno (IPS) e GPRS (Latitude, Longitude, Altitude).
    /// </summary>
    [Table("TB_RASTREAMENTO")]
    public class Rastreamento
    {
        /// <summary>
        /// Construtor padrão da classe Rastreamento.
        /// </summary>
        public Rastreamento() { }

        /// <summary>
        /// Obtém ou define o identificador único do Rastreamento.
        /// Mapeia para a coluna "ID_RASTREAMENTO" (Chave Primária, gerada por identidade).
        /// </summary>
        [Key]
        [Column("ID_RASTREAMENTO")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int IdRastreamento { get; set; }

        /// <summary>
        /// Obtém ou define a coordenada X do posicionamento interno (IPS).
        /// Mapeia para a coluna "IPS_X" (NUMBER(38,8), Obrigatório).
        /// Comentário no DDL: 'Coordenada X do posicionamento interno (IPS) com 4 inteiros e 3 decimais.'
        /// </summary>
        [Column("IPS_X", TypeName = "NUMBER(38,8)")] // Especifica o tipo para mapeamento decimal em Oracle
        [Required(ErrorMessage = "A coordenada IPS_X é obrigatória.")]
        public decimal IpsX { get; set; }

        /// <summary>
        /// Obtém ou define a coordenada Y do posicionamento interno (IPS).
        /// Mapeia para a coluna "IPS_Y" (NUMBER(38,8), Obrigatório).
        /// Comentário no DDL: 'Coordenada Y do posicionamento interno (IPS) com 4 inteiros e 3 decimais.'
        /// </summary>
        [Column("IPS_Y", TypeName = "NUMBER(38,8)")]
        [Required(ErrorMessage = "A coordenada IPS_Y é obrigatória.")]
        public decimal IpsY { get; set; }

        /// <summary>
        /// Obtém ou define a coordenada Z do posicionamento interno (IPS).
        /// Mapeia para a coluna "IPS_Z" (NUMBER(38,8), Obrigatório).
        /// Comentário no DDL: 'Coordenada Z do posicionamento interno (IPS) com 4 inteiros e 3 decimais.'
        /// </summary>
        [Column("IPS_Z", TypeName = "NUMBER(38,8)")]
        [Required(ErrorMessage = "A coordenada IPS_Z é obrigatória.")]
        public decimal IpsZ { get; set; }

        /// <summary>
        /// Obtém ou define a latitude do posicionamento GPRS.
        /// Mapeia para a coluna "GPRS_LATITUDE" (NUMBER(38,8), Obrigatório).
        /// Comentário no DDL: 'Latitude do posicionamento GPRS (ex: -90.000000 a +90.000000) com 6 decimais.'
        /// </summary>
        [Column("GPRS_LATITUDE", TypeName = "NUMBER(38,8)")]
        [Required(ErrorMessage = "A Latitude GPRS é obrigatória.")]
        public decimal GprsLatitude { get; set; }

        /// <summary>
        /// Obtém ou define a longitude do posicionamento GPRS.
        /// Mapeia para a coluna "GPRS_LONGITUDE" (NUMBER(38,8), Obrigatório).
        /// Comentário no DDL: 'Longitude do posicionamento GPRS (ex: -180.000000 a +180.000000) com 6 decimais.'
        /// </summary>
        [Column("GPRS_LONGITUDE", TypeName = "NUMBER(38,8)")]
        [Required(ErrorMessage = "A Longitude GPRS é obrigatória.")]
        public decimal GprsLongitude { get; set; }

        /// <summary>
        /// Obtém ou define a altitude do posicionamento GPRS.
        /// Mapeia para a coluna "GPRS_ALTITUDE" (NUMBER(38,8), Obrigatório).
        /// Comentário no DDL: 'Altitude do posicionamento GPRS (ex: 99999.99m) com 2 decimais.'
        /// </summary>
        [Column("GPRS_ALTITUDE", TypeName = "NUMBER(38,8)")]
        [Required(ErrorMessage = "A Altitude GPRS é obrigatória.")]
        public decimal GprsAltitude { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Coleção de entidades VeiculoRastreamento, representando o relacionamento muitos-para-muitos com Veículos.
        /// </summary>
        public ICollection<VeiculoRastreamento>? VeiculoRastreamentos { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Veiculo.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Veiculo
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/Veiculo.cs - Este arquivo deve estar na pasta 'Model'
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a entidade Veículo no banco de dados, mapeando para a tabela "TB_VEICULO".
    /// Contém informações detalhadas sobre um veículo, como placa, RENAVAM, chassi, fabricante, etc.
    /// </summary>
    [Table("TB_VEICULO")]
    public class Veiculo
    {
        /// <summary>
        /// Construtor padrão da classe Veiculo.
        /// Inicializa propriedades de string não anuláveis para evitar warnings CS8618.
        /// </summary>
        public Veiculo()
        {
            Placa = string.Empty;
            Renavam = string.Empty;
            Chassi = string.Empty;
            Fabricante = string.Empty;
            Modelo = string.Empty;
            Motor = null; // Pode ser nulo conforme DDL
            Combustivel = string.Empty;
        }

        /// <summary>
        /// Obtém ou define o identificador único do Veículo.
        /// Mapeia para a coluna "ID_VEICULO" (Chave Primária, gerada por identidade).
        /// </summary>
        [Key]
        [Column("ID_VEICULO")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int IdVeiculo { get; set; }

        /// <summary>
        /// Obtém ou define a placa do veículo.
        /// Mapeia para a coluna "PLACA" (VARCHAR2(10 BYTE), Obrigatório, Único).
        /// </summary>
        [Column("PLACA")]
        [Required(ErrorMessage = "A Placa é obrigatória.")]
        [StringLength(10, ErrorMessage = "A Placa deve ter no máximo 10 caracteres.")]
        // O atributo [Index] foi removido daqui e será configurado via Fluent API no DbContext.
        public string Placa { get; set; }

        /// <summary>
        /// Obtém ou define o número RENAVAM do veículo.
        /// Mapeia para a coluna "RENAVAM" (VARCHAR2(11 CHAR), Obrigatório, Único).
        /// </summary>
        [Column("RENAVAM")]
        [Required(ErrorMessage = "O RENAVAM é obrigatório.")]
        [StringLength(11, ErrorMessage = "O RENAVAM deve ter 11 caracteres.")]
        // O atributo [Index] foi removido daqui e será configurado via Fluent API no DbContext.
        public string Renavam { get; set; }

        /// <summary>
        /// Obtém ou define o número do Chassi do veículo.
        /// Mapeia para a coluna "CHASSI" (VARCHAR2(17 CHAR), Obrigatório, Único).
        /// </summary>
        [Column("CHASSI")]
        [Required(ErrorMessage = "O Chassi é obrigatório.")]
        [StringLength(17, ErrorMessage = "O Chassi deve ter 17 caracteres.")]
        // O atributo [Index] foi removido daqui e será configurado via Fluent API no DbContext.
        public string Chassi { get; set; }

        /// <summary>
        /// Obtém ou define o fabricante do veículo.
        /// Mapeia para a coluna "FABRICANTE" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("FABRICANTE")]
        [Required(ErrorMessage = "O Fabricante é obrigatório.")]
        [StringLength(50, ErrorMessage = "O Fabricante deve ter no máximo 50 caracteres.")]
        public string Fabricante { get; set; }

        /// <summary>
        /// Obtém ou define o modelo do veículo.
        /// Mapeia para a coluna "MODELO" (VARCHAR2(60 BYTE), Obrigatório).
        /// </summary>
        [Column("MODELO")]
        [Required(ErrorMessage = "O Modelo é obrigatório.")]
        [StringLength(60, ErrorMessage = "O Modelo deve ter no máximo 60 caracteres.")]
        public string Modelo { get; set; }

        /// <summary>
        /// Obtém ou define o tipo/especificação do motor do veículo.
        /// Mapeia para a coluna "MOTOR" (VARCHAR2(30 BYTE), Opcional).
        /// </summary>
        [Column("MOTOR")]
        [StringLength(30, ErrorMessage = "O Motor deve ter no máximo 30 caracteres.")]
        public string? Motor { get; set; } // Motor é nullable no DDL

        /// <summary>
        /// Obtém ou define o ano de fabricação do veículo.
        /// Mapeia para a coluna "ANO" (NUMBER, Obrigatório).
        /// </summary>
        [Column("ANO")]
        [Required(ErrorMessage = "O Ano é obrigatório.")]
        public int Ano { get; set; }

        /// <summary>
        /// Obtém ou define o tipo de combustível do veículo.
        /// Mapeia para a coluna "COMBUSTIVEL" (VARCHAR2(20 BYTE), Obrigatório).
        /// </summary>
        [Column("COMBUSTIVEL")]
        [Required(ErrorMessage = "O Combustível é obrigatório.")]
        [StringLength(20, ErrorMessage = "O Combustível deve ter no máximo 20 caracteres.")]
        public string Combustivel { get; set; }

        // Propriedades de Navegação para tabelas de ligação

        /// <summary>
        /// Coleção de entidades ClienteVeiculo, representando o relacionamento muitos-para-muitos com Clientes.
        /// </summary>
        public ICollection<ClienteVeiculo>? ClienteVeiculos { get; set; }

        /// <summary>
        /// Coleção de entidades VeiculoBox, representando o relacionamento muitos-para-muitos com Boxes.
        /// </summary>
        public ICollection<VeiculoBox>? VeiculoBoxes { get; set; }

        /// <summary>
        /// Coleção de entidades VeiculoPatio, representando o relacionamento muitos-para-muitos com Pátios.
        /// </summary>
        public ICollection<VeiculoPatio>? VeiculoPatios { get; set; }

        /// <summary>
        /// Coleção de entidades VeiculoRastreamento, representando o relacionamento muitos-para-muitos com Rastreamentos.
        /// </summary>
        public ICollection<VeiculoRastreamento>? VeiculoRastreamentos { get; set; }

        /// <summary>
        /// Coleção de entidades VeiculoZona, representando o relacionamento muitos-para-muitos com Zonas.
        /// </summary>
        public ICollection<VeiculoZona>? VeiculoZonas { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\VeiculoBox.cs   |   namespace ChallengeMuttuApi.Model   |   tipo VeiculoBox
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/VeiculoBox.cs - Este arquivo deve estar na pasta 'Model'
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_VEICULOBOX" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Veículo e Box.
    /// A chave primária desta tabela é composta pelos IDs de Veículo e Box.
    /// </summary>
    [Table("TB_VEICULOBOX")]
    public class VeiculoBox
    {
        /// <summary>
        /// Obtém ou define o ID do Veículo que faz parte da chave composta.
        /// Mapeia para a coluna "TB_VEICULO_ID_VEICULO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_VEICULO_ID_VEICULO")]
        [Required]
        public int TbVeiculoIdVeiculo { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Box que faz parte da chave composta.
        /// Mapeia para a coluna "TB_BOX_ID_BOX" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_BOX_ID_BOX")]
        [Required]
        public int TbBoxIdBox { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Veículo associada.
        /// </summary>
        [ForeignKey("TbVeiculoIdVeiculo")]
        public Veiculo? Veiculo { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Box associada.
        /// </summary>
        [ForeignKey("TbBoxIdBox")]
        public Box? Box { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\VeiculoPatio.cs   |   namespace ChallengeMuttuApi.Model   |   tipo VeiculoPatio
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/VeiculoPatio.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_VEICULOPATIO" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Veículo e Pátio.
    /// A chave primária desta tabela é composta pelos IDs de Veículo e Pátio.
    /// </summary>
    [Table("TB_VEICULOPATIO")]
    public class VeiculoPatio
    {
        /// <summary>
        /// Obtém ou define o ID do Veículo que faz parte da chave composta.
        /// Mapeia para a coluna "TB_VEICULO_ID_VEICULO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_VEICULO_ID_VEICULO")]
        [Required]
        public int TbVeiculoIdVeiculo { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Pátio que faz parte da chave composta.
        /// Mapeia para a coluna "TB_PATIO_ID_PATIO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_PATIO_ID_PATIO")]
        [Required]
        public int TbPatioIdPatio { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Veículo associada.
        /// </summary>
        [ForeignKey("TbVeiculoIdVeiculo")]
        public Veiculo? Veiculo { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Pátio associada.
        /// </summary>
        [ForeignKey("TbPatioIdPatio")]
        public Patio? Patio { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\VeiculoRastreamento.cs   |   namespace ChallengeMuttuApi.Model   |   tipo VeiculoRastreamento
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/VeiculoRastreamento.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_VEICULORASTREAMENTO" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Veículo e Rastreamento.
    /// A chave primária desta tabela é composta pelos IDs de Veículo e Rastreamento.
    /// </summary>
    [Table("TB_VEICULORASTREAMENTO")]
    public class VeiculoRastreamento
    {
        /// <summary>
        /// Obtém ou define o ID do Veículo que faz parte da chave composta.
        /// Mapeia para a coluna "TB_VEICULO_ID_VEICULO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_VEICULO_ID_VEICULO")]
        [Required]
        public int TbVeiculoIdVeiculo { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Rastreamento que faz parte da chave composta.
        /// Mapeia para a coluna "TB_RASTREAMENTO_ID_RASTREAMENTO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_RASTREAMENTO_ID_RASTREAMENTO")]
        [Required]
        public int TbRastreamentoIdRastreamento { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Veículo associada.
        /// </summary>
        [ForeignKey("TbVeiculoIdVeiculo")]
        public Veiculo? Veiculo { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Rastreamento associada.
        /// </summary>
        [ForeignKey("TbRastreamentoIdRastreamento")]
        public Rastreamento? Rastreamento { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\VeiculoZona.cs   |   namespace ChallengeMuttuApi.Model   |   tipo VeiculoZona
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/VeiculoZona.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_VEICULOZONA" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Veículo e Zona.
    /// A chave primária desta tabela é composta pelos IDs de Veículo e Zona.
    /// </summary>
    [Table("TB_VEICULOZONA")]
    public class VeiculoZona
    {
        /// <summary>
        /// Obtém ou define o ID do Veículo que faz parte da chave composta.
        /// Mapeia para a coluna "TB_VEICULO_ID_VEICULO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_VEICULO_ID_VEICULO")]
        [Required]
        public int TbVeiculoIdVeiculo { get; set; }

        /// <summary>
        /// Obtém ou define o ID da Zona que faz parte da chave composta.
        /// Mapeia para a coluna "TB_ZONA_ID_ZONA" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_ZONA_ID_ZONA")]
        [Required]
        public int TbZonaIdZona { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Veículo associada.
        /// </summary>
        [ForeignKey("TbVeiculoIdVeiculo")]
        public Veiculo? Veiculo { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Zona associada.
        /// </summary>
        [ForeignKey("TbZonaIdZona")]
        public Zona? Zona { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\Zona.cs   |   namespace ChallengeMuttuApi.Model   |   tipo Zona
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/Zona.cs - Este arquivo deve estar na pasta 'Model'
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a entidade Zona no banco de dados, mapeando para a tabela "TB_ZONA".
    /// Descreve uma área ou zona específica, com nome, datas de entrada/saída e observações.
    /// </summary>
    [Table("TB_ZONA")]
    public class Zona
    {
        /// <summary>
        /// Construtor padrão da classe Zona.
        /// Inicializa propriedades de string não anuláveis para evitar warnings CS8618.
        /// </summary>
        public Zona()
        {
            Nome = string.Empty;
        }

        /// <summary>
        /// Obtém ou define o identificador único da Zona.
        /// Mapeia para a coluna "ID_ZONA" (Chave Primária, gerada por identidade).
        /// </summary>
        [Key]
        [Column("ID_ZONA")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int IdZona { get; set; }

        /// <summary>
        /// Obtém ou define o nome da Zona.
        /// Mapeia para a coluna "NOME" (VARCHAR2(50 BYTE), Obrigatório).
        /// </summary>
        [Column("NOME")]
        [Required(ErrorMessage = "O nome da Zona é obrigatório.")]
        [StringLength(50, ErrorMessage = "O nome da Zona deve ter no máximo 50 caracteres.")]
        public string Nome { get; set; }

        /// <summary>
        /// Obtém ou define a data de entrada na Zona.
        /// Mapeia para a coluna "DATA_ENTRADA" (DATE, Obrigatório).
        /// </summary>
        [Column("DATA_ENTRADA")]
        [Required(ErrorMessage = "A data de entrada é obrigatória.")]
        public DateTime DataEntrada { get; set; }

        /// <summary>
        /// Obtém ou define a data de saída da Zona.
        /// Mapeia para a coluna "DATA_SAIDA" (DATE, Obrigatório).
        /// </summary>
        [Column("DATA_SAIDA")]
        [Required(ErrorMessage = "A data de saída é obrigatória.")]
        public DateTime DataSaida { get; set; }

        /// <summary>
        /// Obtém ou define observações adicionais sobre a Zona.
        /// Mapeia para a coluna "OBSERVACAO" (VARCHAR2(100 BYTE), Opcional).
        /// </summary>
        [Column("OBSERVACAO")]
        [StringLength(100, ErrorMessage = "As observações devem ter no máximo 100 caracteres.")]
        public string? Observacao { get; set; }

        // Propriedades de Navegação para tabelas de ligação

        /// <summary>
        /// Coleção de entidades VeiculoZona, representando o relacionamento muitos-para-muitos com Veículos.
        /// </summary>
        public ICollection<VeiculoZona>? VeiculoZonas { get; set; }

        /// <summary>
        /// Coleção de entidades ZonaBox, representando o relacionamento muitos-para-muitos com Boxes.
        /// </summary>
        public ICollection<ZonaBox>? ZonaBoxes { get; set; }

        /// <summary>
        /// Coleção de entidades ZonaPatio, representando o relacionamento muitos-para-muitos com Pátios.
        /// </summary>
        public ICollection<ZonaPatio>? ZonaPatios { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\ZonaBox.cs   |   namespace ChallengeMuttuApi.Model   |   tipo ZonaBox
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/ZonaBox.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_ZONABOX" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Zona e Box.
    /// A chave primária desta tabela é composta pelos IDs de Zona e Box.
    /// </summary>
    [Table("TB_ZONABOX")]
    public class ZonaBox
    {
        /// <summary>
        /// Obtém ou define o ID da Zona que faz parte da chave composta.
        /// Mapeia para a coluna "TB_ZONA_ID_ZONA" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_ZONA_ID_ZONA")]
        [Required]
        public int TbZonaIdZona { get; set; }

        /// <summary>
        /// Obtém ou define o ID do Box que faz parte da chave composta.
        /// Mapeia para a coluna "TB_BOX_ID_BOX" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_BOX_ID_BOX")]
        [Required]
        public int TbBoxIdBox { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Zona associada.
        /// </summary>
        [ForeignKey("TbZonaIdZona")]
        public Zona? Zona { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Box associada.
        /// </summary>
        [ForeignKey("TbBoxIdBox")]
        public Box? Box { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Model\ZonaPatio.cs   |   namespace ChallengeMuttuApi.Model   |   tipo ZonaPatio
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿// Path: ChallengeMuttuApi/Model/ZonaPatio.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ChallengeMuttuApi.Model
{
    /// <summary>
    /// Representa a tabela de ligação "TB_ZONAPATIO" no banco de dados.
    /// Estabelece o relacionamento muitos-para-muitos entre Pátio e Zona.
    /// A chave primária desta tabela é composta pelos IDs de Pátio e Zona.
    /// </summary>
    [Table("TB_ZONAPATIO")]
    public class ZonaPatio
    {
        /// <summary>
        /// Obtém ou define o ID do Pátio que faz parte da chave composta.
        /// Mapeia para a coluna "TB_PATIO_ID_PATIO" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_PATIO_ID_PATIO")]
        [Required]
        public int TbPatioIdPatio { get; set; }

        /// <summary>
        /// Obtém ou define o ID da Zona que faz parte da chave composta.
        /// Mapeia para a coluna "TB_ZONA_ID_ZONA" (Parte da Chave Primária Composta).
        /// </summary>
        [Column("TB_ZONA_ID_ZONA")]
        [Required]
        public int TbZonaIdZona { get; set; }

        // Propriedades de Navegação (para Entity Framework Core)

        /// <summary>
        /// Propriedade de navegação para a entidade Pátio associada.
        /// </summary>
        [ForeignKey("TbPatioIdPatio")]
        public Patio? Patio { get; set; }

        /// <summary>
        /// Propriedade de navegação para a entidade Zona associada.
        /// </summary>
        [ForeignKey("TbZonaIdZona")]
        public Zona? Zona { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// Program.cs   |   namespace (namespace padrão)   |   tipo do
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

﻿using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.EntityFrameworkCore;
using System;
using System.IO; // Necessário para Path.Combine
using System.Reflection; // Necessário para Assembly
using ChallengeMuttuApi.Data;
using Microsoft.OpenApi.Models; // Necessário para OpenApiInfo

var builder = WebApplication.CreateBuilder(args);

// 🔹 Carregar configuração do appsettings.json
var configuration = builder.Configuration;

// 🔹 Adicionar serviços ao container (Injeção de Dependência)

/// <summary>
/// Adiciona o serviço de controllers à coleção de serviços da aplicação.
/// </summary>
builder.Services.AddControllers();

/// <summary>
/// Configura o serviço de contexto de banco de dados (AppDbContext) para usar Oracle.
/// A string de conexão "OracleDb" deve estar configurada no appsettings.json.
/// </summary>
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseOracle(configuration.GetConnectionString("OracleDb")));

/// <summary>
/// Adiciona os exploradores de API para endpoints para habilitar o Swagger/OpenAPI.
/// </summary>
builder.Services.AddEndpointsApiExplorer();

/// <summary>
/// Configura o gerador do Swagger para incluir informações da API e documentação XML.
/// </summary>
builder.Services.AddSwaggerGen(c =>
{
    // Define informações básicas sobre sua API para o Swagger
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Challenge Muttu API",
        Version = "v1",
        Description = "API RESTful para o Challenge Muttu, contendo operações CRUD para gestão de clientes, veículos, endereços, contatos, pátios, rastreamentos e zonas.",
        Contact = new OpenApiContact
        {
            Name = "Seu Nome", // Opcional: seu nome
            Email = "seu.email@exemplo.com" // Opcional: seu e-mail
        },
        License = new OpenApiLicense
        {
            Name = "Licença de Exemplo", // Opcional: nome da licença
            Url = new Uri("https://exemplo.com/licenca") // Opcional: URL da licença
        }
    });

    // Configura o Swagger para incluir os comentários XML da documentação.
    // É necessário configurar o projeto (.csproj) para gerar este arquivo XML.
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    if (File.Exists(xmlPath)) // Verifica se o arquivo XML existe antes de incluir
    {
        c.IncludeXmlComments(xmlPath);
    }
    else
    {
        Console.WriteLine($"Atenção: Arquivo de documentação XML não encontrado em: {xmlPath}");
        Console.WriteLine("Certifique-se de que '<GenerateDocumentationFile>true</GenerateDocumentationFile>' está no seu .csproj.");
    }
});

var app = builder.Build();

// 🔹 Configurar pipeline de requisição HTTP

/// <summary>
/// Habilita o middleware do Swagger e Swagger UI apenas em ambiente de desenvolvimento.
/// </summary>
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        // Define o endpoint Swagger JSON
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Challenge Muttu API v1");
        // Opcional: Define a rota raiz para a interface do Swagger UI (ex: http://localhost:xxxx/)
        c.RoutePrefix = string.Empty;
    });
}

/// <summary>
/// Redireciona requisições HTTP para HTTPS.
/// </summary>
app.UseHttpsRedirection();

/// <summary>
/// Habilita o middleware de autorização.
/// </summary>
app.UseAuthorization();

/// <summary>
/// Mapeia os endpoints das controllers para o roteamento da aplicação.
/// </summary>
app.MapControllers();

try
{
    // 🔥 Executando aplicação
    app.Run();
}
catch (Exception ex)
{
    /// <summary>
    /// Captura e exibe erros críticos que ocorrem durante a inicialização da aplicação.
    /// </summary>
    Console.WriteLine($"❌ Erro crítico na inicialização da aplicação: {ex.Message}");
    // Em um ambiente de produção, você logaria isso em um sistema de log adequado
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// WeatherForecast.cs   |   namespace ChallengeMuttuApi   |   tipo WeatherForecast
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

namespace ChallengeMuttuApi
{
    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs   |   namespace (namespace padrão)   |   tipo .NETCoreApp,Version=v8.0.AssemblyAttributes
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// obj\Debug\net8.0\ChallengeMuttuApi.AssemblyInfo.cs   |   namespace (namespace padrão)   |   tipo ChallengeMuttuApi.AssemblyInfo
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute("ccf59488-b660-4adb-b66c-e64a646804e5")]
[assembly: System.Reflection.AssemblyCompanyAttribute("ChallengeMuttuApi")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+5cce94ff9427459b0bbb99a02b0c77a51deba3cf")]
[assembly: System.Reflection.AssemblyProductAttribute("ChallengeMuttuApi")]
[assembly: System.Reflection.AssemblyTitleAttribute("ChallengeMuttuApi")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// obj\Debug\net8.0\ChallengeMuttuApi.GlobalUsings.g.cs   |   namespace (namespace padrão)   |   tipo ChallengeMuttuApi.GlobalUsings.g
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// obj\Debug\net8.0\ChallengeMuttuApi.MvcApplicationPartsAssemblyInfo.cs   |   namespace (namespace padrão)   |   tipo ChallengeMuttuApi.MvcApplicationPartsAssemblyInfo
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Gerado pela classe WriteCodeFragment do MSBuild.

