// Script: converte-arquivos-tsx-em-txt-unico
// Data de criação do arquivo de saída: 2025-05-07 13:54:05

// Estrutura de diretórios do projeto:
src/
    app/
        agendamento/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
        clientes/
            alterar/
                [idCliente]/
                    [idEndereco]/
            buscar/
            cadastrar/
            deletar/
            listar/
        contato/
        inicio/
        oficinaOnline/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
            listar/
        orcamento/
            alterar/
                [id]/
            buscar/
            deletar/
                [id]/
            gerar/
            iniciar/
            listar/
        pagamento/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
        pecas/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
        relatorio/
            agendamentos-futuros/
            cliente-completo/
            contagem-mensal/
            financeiro-pagamentos/
            historico-cliente/
            listar/
            servicos-agendados/
        veiculo/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
    components/
        forms/
    types/

// Arquivos .tsx encontrados (caminho relativo):
// app\agendamento\alterar\[id]\page.tsx
// app\agendamento\buscar\page.tsx
// app\agendamento\cadastrar\page.tsx
// app\agendamento\deletar\[id]\page.tsx
// app\agendamento\listar\page.tsx
// app\agendamento\page.tsx
// app\clientes\alterar\[idCliente]\[idEndereco]\page.tsx
// app\clientes\buscar\page.tsx
// app\clientes\cadastrar\page.tsx
// app\clientes\deletar\page.tsx
// app\clientes\listar\page.tsx
// app\clientes\page.tsx
// app\contato\page.tsx
// app\inicio\page.tsx
// app\layout.tsx
// app\oficinaOnline\alterar\[id]\page.tsx
// app\oficinaOnline\buscar\page.tsx
// app\oficinaOnline\cadastrar\page.tsx
// app\oficinaOnline\deletar\page.tsx
// app\oficinaOnline\listar\page.tsx
// app\orcamento\alterar\[id]\page.tsx
// app\orcamento\buscar\page.tsx
// app\orcamento\deletar\[id]\page.tsx
// app\orcamento\gerar\page.tsx
// app\orcamento\iniciar\page.tsx
// app\orcamento\listar\page.tsx
// app\pagamento\alterar\[id]\page.tsx
// app\pagamento\buscar\page.tsx
// app\pagamento\cadastrar\page.tsx
// app\pagamento\deletar\[id]\page.tsx
// app\pagamento\listar\page.tsx
// app\pagamento\page.tsx
// app\page.tsx
// app\pecas\alterar\[id]\page.tsx
// app\pecas\buscar\page.tsx
// app\pecas\cadastrar\page.tsx
// app\pecas\deletar\[id]\page.tsx
// app\pecas\listar\page.tsx
// app\relatorio\agendamentos-futuros\page.tsx
// app\relatorio\cliente-completo\page.tsx
// app\relatorio\contagem-mensal\page.tsx
// app\relatorio\financeiro-pagamentos\page.tsx
// app\relatorio\historico-cliente\page.tsx
// app\relatorio\listar\page.tsx
// app\relatorio\page.tsx
// app\relatorio\servicos-agendados\page.tsx
// app\veiculo\alterar\[id]\page.tsx
// app\veiculo\buscar\page.tsx
// app\veiculo\cadastrar\page.tsx
// app\veiculo\deletar\[id]\page.tsx
// app\veiculo\listar\page.tsx
// components\LeafletMap.tsx
// components\forms\TabbedForm.tsx
// components\nav-bar.tsx

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\agendamento\alterar\[id]\page.tsx   |   componente AlterarAgendamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/agendamento/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
// Ícones adicionados:
import { MdEditCalendar, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';

interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string;
    observacao: string | null;
}

export default function AlterarAgendamentoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [dataAgendamento, setDataAgendamento] = useState("");
    const [observacao, setObservacao] = useState("");

    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (id) {
            setIsLoading(true); setError(null); setSuccess(null);
            const fetchAgendamentoData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/agenda/${id}`;
                    const response = await fetch(apiUrl);
                    if (response.status === 404) throw new Error("Agendamento não encontrado.");
                    if (!response.ok) throw new Error(`Erro ao buscar dados: ${response.statusText}`);
                    const data: AgendamentoApiResponseDto = await response.json();

                    setDataAgendamento(data.dataAgendamento ? data.dataAgendamento.split('T')[0] : '');
                    setObservacao(data.observacao || '');

                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados para edição.");
                } finally {
                    setIsLoading(false);
                }
            };
            fetchAgendamentoData();
        } else {
            setError("ID do agendamento inválido na URL.");
            setIsLoading(false);
        }
    }, [id]);

    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!id) { setError("ID inválido para salvar."); return; }
        setIsSaving(true); setError(null); setSuccess(null);

        const agendamentoData = { dataAgendamento, observacao };
        const apiUrl = `http://localhost:8080/rest/agenda/${id}`;

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(agendamentoData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Update Success:", result);
            setSuccess("Agendamento atualizado com sucesso!");
            setTimeout(() => { setSuccess(null); }, 5000);

        } catch (err: any) {
            setError(err.message || "Falha ao salvar alterações.");
        } finally {
            setIsSaving(false);
        }
    };

    if (isLoading) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados do agendamento...</p>
                </main>
            </>
        );
    }

    if (error && !isLoading) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                        <h2 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl mr-2" />
                            Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <Link href="/agendamento/listar">
                                <button className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                    <MdArrowBack />
                                    Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center">
                        <MdEditCalendar className="text-3xl" />
                        Alterar Agendamento (ID: {id})
                    </h2>

                    <form onSubmit={handleUpdate}>
                        {/* Mensagens */}
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <div className="flex items-center gap-2">
                                    <MdErrorOutline className="text-2xl" />
                                    <span>{error}</span>
                                </div>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                    <span className="text-2xl" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        )}
                        {success && (
                            <div className="flex items-center justify-center gap-2 text-green-400 mb-4">
                                <MdCheckCircle className="text-2xl" />
                                <span>{success}</span>
                            </div>
                        )}

                        {/* Campos */}
                        <div className="mb-4">
                            <label htmlFor="dataAgendamento" className="block mb-1">Data do Agendamento:</label>
                            <input
                                type="date"
                                id="dataAgendamento"
                                name="dataAgendamento"
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                                value={dataAgendamento}
                                onChange={(e) => setDataAgendamento(e.target.value)}
                            />
                        </div>

                        <div className="mb-6">
                            <label htmlFor="observacao" className="block mb-1">Observação:</label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={5}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                                value={observacao}
                                onChange={(e) => setObservacao(e.target.value)}
                                maxLength={400}
                            />
                        </div>

                        {/* Botões */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isSaving || isLoading}
                            >
                                {isSaving ? 'Salvando...' : (<><MdSave /> Salvar Alterações</>)}
                            </button>

                            <Link
                                href="/agendamento/listar"
                                className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            >
                                <MdArrowBack />
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\agendamento\buscar\page.tsx   |   componente BuscarAgendamentosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: app/agendamento/buscar/page.tsx (Refatorado SEM ID, COM Cards) ---
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
// Importando Ícones
import { Calendar, Hash, ClipboardList, Edit3, Trash2, Search as SearchIcon, Filter, ChevronLeft, ChevronRight } from 'lucide-react';
import { MdSearch, MdEdit, MdDelete, MdErrorOutline, MdFindInPage } from 'react-icons/md';

// --- Interfaces ---
interface AgendamentoParaLista {
    id: number;
    dataAgendamento: string;
    observacao: string;
}

interface PaginatedAgendaResponse {
    content: AgendamentoApiResponseDto[];
    totalPages: number;
    totalElements: number; // Não usado, mas pode ser útil
    number: number; // Página atual (base 0)
    size: number;
}

interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string; // Esperado format<x_bin_438>-MM-DD
    observacao: string | null;
}
// ------------------

// <<< Tipo de busca ATUALIZADO (SEM 'id') >>>
type TipoBuscaAgendamento = 'observacao' | 'dataInicio' | 'dataFim';

export default function BuscarAgendamentosPage() {
    const [resultadosBusca, setResultadosBusca] = useState<AgendamentoParaLista[]>([]);
    // <<< Default voltou para 'observacao' >>>
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaAgendamento>('observacao');
    const [termoBusca, setTermoBusca] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // Estados de Paginação
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize] = useState(12); // Ajustado para cards

    const router = useRouter();

    // Helper para formatar data
    const formatarData = (dataString: string | null | undefined): string => {
        if (!dataString) return '-';
        try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { console.error("Erro formatar data:", dataString, e); return 'Inválida'; }
    };

    // --- Função de Busca ATUALIZADA (sem lógica de ID) ---
    const handleSearch = async (event?: FormEvent<HTMLFormElement>, page = 0) => {
        if (event) event.preventDefault();
        setIsSearching(true);
        setBuscaRealizada(true);
        setError(null);
        if (page === 0) { setResultadosBusca([]); setCurrentPage(0); }
        else { setCurrentPage(page); }

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'dataAgendamento,desc' // <<< Voltando a ordenar por Data DESC (ou 'asc' se preferir) >>>
        });

        // Adiciona o parâmetro de filtro correto
        const termo = termoBusca.trim();
        if (termo) {
            if (tipoBusca === 'dataInicio' || tipoBusca === 'dataFim') {
                if (/^\d{4}-\d{2}-\d{2}$/.test(termo)) {
                    params.append(tipoBusca, termo);
                } else {
                    setError("Formato de data inválido. Use AAAA-MM-DD.");
                    setIsSearching(false); setBuscaRealizada(false); setResultadosBusca([]);
                    return;
                }
            } else if (tipoBusca === 'observacao') { // Agora trata observacao
                params.append('observacao', termo); // Envia parâmetro 'observacao'
            }
            // Lógica para 'id' removida
        } else if (tipoBusca !== 'observacao' && tipoBusca !== 'dataInicio' && tipoBusca !== 'dataFim') {
            // Adicionar validação se algum campo for obrigatório (nenhum é agora)
            // setError("Termo de busca é obrigatório para este tipo.");
            // setIsSearching(false); setBuscaRealizada(false); setResultadosBusca([]);
            // return;
        }

        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.log("Buscando agendamentos:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`;
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                throw new Error(errorMsg);
            }

            if (response.status === 204) {
                setResultadosBusca([]); setTotalPages(0); setCurrentPage(page); return;
            }

            const data: PaginatedAgendaResponse = await response.json();
            // Ordenação feita pela API agora (sort=dataAgendamento,desc)
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: formatarData(dto.dataAgendamento),
                observacao: dto.observacao || '',
            }));
            setResultadosBusca(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);

        } catch (err: any) {
            setError(err.message || "Falha ao buscar agendamentos.");
            setResultadosBusca([]); setTotalPages(0); setCurrentPage(0);
            console.error("Erro:", err);
        } finally {
            setIsSearching(false);
        }
    };

    // Funções de Paginação
    const handlePreviousPage = () => { if (currentPage > 0) handleSearch(undefined, currentPage - 1); };
    const handleNextPage = () => { if (currentPage < totalPages - 1) handleSearch(undefined, currentPage + 1); };

    // Placeholder dinâmico ATUALIZADO
    const getPlaceholder = () => {
        switch (tipoBusca) {
            // case 'id': return 'Digite o ID exato...'; // Removido
            case 'dataInicio': return 'Data Início (AAAA-MM-DD)...';
            case 'dataFim': return 'Data Fim (AAAA-MM-DD)...';
            case 'observacao': return 'Digite parte da observação...'; // Default agora é observação
            default: return '';
        }
    };

    // Navegação para delete (simulada)
    const navigateToDelete = (id: number) => {
        if (!id || isNaN(id)) { setError("ID inválido para exclusão."); return; }
        if (window.confirm(`Tem certeza que deseja excluir o Agendamento ID: ${id}?`)) {
            alert(`Exclusão do Agendamento ${id} não implementada.`);
        }
    };

    return (
        <>
            <NavBar active="agendamento" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center gap-2 text-3xl font-bold mb-6 text-center">
                    <MdFindInPage className="text-4xl text-sky-400" /> Buscar Agendamentos
                </h1>

                {/* Formulário de Busca ATUALIZADO */}
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-4xl mx-auto mb-8">
                    <form onSubmit={handleSearch}>
                        <div className="flex flex-wrap items-end gap-4">
                            {/* Select Tipo de Busca ATUALIZADO */}
                            <div className="flex-shrink-0 w-full sm:w-auto">
                                <label htmlFor="tipoBusca" className="flex items-center gap-1 block text-sm font-medium mb-1 text-slate-300"><Filter size={16}/>Buscar por:</label>
                                <select
                                    id="tipoBusca" name="tipoBusca"
                                    className="w-full sm:w-48 h-10 px-3 py-2 bg-slate-800 border border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
                                    value={tipoBusca}
                                    onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaAgendamento); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); setError(null); }}
                                >
                                    {/* <<< Opção ID Removida >>> */}
                                    <option value="observacao">Observação</option>
                                    <option value="dataInicio">Data Início</option>
                                    <option value="dataFim">Data Fim</option> {/* Mantido Data Fim */}
                                </select>
                            </div>
                            {/* Input Termo de Busca */}
                            <div className="flex-grow min-w-[200px]">
                                <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo:</label>
                                <input
                                    // Muda tipo dinamicamente
                                    type={tipoBusca.includes('data') ? 'date' : 'text'}
                                    id="termoBusca" name="termoBusca"
                                    className="w-full h-10 px-3 py-2 bg-slate-800 border border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
                                    value={termoBusca} onChange={(e) => setTermoBusca(e.target.value)}
                                    placeholder={getPlaceholder()}
                                    required // Agora todos os campos podem ser required
                                />
                            </div>
                            {/* Botão Buscar */}
                            <div className="flex-shrink-0">
                                <button type="submit" disabled={isSearching} className={`h-10 px-5 py-2 font-semibold rounded-md shadow flex items-center justify-center ${isSearching ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}>
                                    <SearchIcon size={18} className="mr-2"/> {isSearching ? 'Buscando...' : 'Buscar'}
                                </button>
                            </div>
                        </div>
                        {error && ( <p className="mt-3 text-sm text-red-400 flex items-center gap-1"><MdErrorOutline/>{error}</p> )}
                    </form>
                </div>

                {/* Mensagem Loading Inicial (removida pois busca é ativa) */}

                {/* <<< Área de Resultados com Cards >>> */}
                {buscaRealizada && ( // Mostra resultados apenas após busca
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold mb-4 text-center text-sky-300">Resultados da Busca</h2>
                        {isSearching ? (
                            <p className="text-center text-sky-300 py-10">Buscando...</p>
                        ) : resultadosBusca.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum agendamento encontrado para os critérios informados.</p>
                        ) : (
                            // Grid Layout para os Cards
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {resultadosBusca.map((agendamento) => (
                                    <div key={agendamento.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                        {/* Header */}
                                        <div className="bg-slate-700 p-3 flex justify-between items-center text-sm"> <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {agendamento.id} </span> <span className="flex items-center gap-1 text-slate-400"> <Calendar size={16} /> {agendamento.dataAgendamento} </span> </div>
                                        {/* Corpo */}
                                        <div className="p-4 space-y-3 flex-grow"> <div> <h3 className="flex items-center text-base font-semibold mb-1 text-slate-200 gap-1"> <ClipboardList size={18} className="text-amber-400"/> Observação </h3> <p className="text-sm text-slate-300 break-words max-h-28 overflow-y-auto pr-1"> {agendamento.observacao || '-'} </p> </div> </div>
                                        {/* Footer */}
                                        <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2"> <Link href={`/agendamento/alterar/${agendamento.id}`}> <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1"> <Edit3 size={14} /> Editar </button> </Link> <button onClick={() => navigateToDelete(agendamento.id)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1"> <Trash2 size={14} /> Deletar </button> </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< Fim da Área de Resultados >>> */}

                {/* Paginação */}
                {buscaRealizada && !isSearching && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-8 gap-3">
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1"> <ChevronLeft size={18}/> Anterior </button>
                        <span className="text-slate-300 text-sm"> Página {currentPage + 1} de {totalPages} </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1"> Próxima <ChevronRight size={18}/> </button>
                    </div>
                )}

                {/* Botão Voltar */}
                <div className="mt-8 text-center"> <Link href="/agendamento/listar"> <button className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow"> Voltar para Lista Completa </button> </Link> </div>

            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\agendamento\cadastrar\page.tsx   |   componente CadastrarAgendamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: app/agendamento/cadastrar/page.tsx (Refatorado) ---
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
// Importando Ícones (Md e Lucide)
import { MdEventAvailable, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Calendar, ClipboardList } from 'lucide-react'; // Ícones para labels

export default function CadastrarAgendamentoPage() {
    const today = new Date().toISOString().split('T')[0]; // Formato YYYY-MM-DD
    const initialState = {
        dataAgendamento: today, // Inicia com hoje
        observacao: ""
    };

    // Estados do Formulário
    const [dataAgendamento, setDataAgendamento] = useState(initialState.dataAgendamento);
    const [observacao, setObservacao] = useState(initialState.observacao);

    // Estados de Controle
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Função para Limpar o Formulário
    const resetForm = () => {
        setDataAgendamento(initialState.dataAgendamento); // Volta para hoje
        setObservacao(initialState.observacao);
        setError(null);
        // Mantém a msg de sucesso visível por um tempo
    };

    // Função para Submeter o Formulário
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true); setError(null); setSuccess(null);

        const agendamentoData = { dataAgendamento, observacao };

        console.log('Salvando agendamento:', JSON.stringify(agendamentoData, null, 2));
        const apiUrl = "http://localhost:8080/rest/agenda";

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(agendamentoData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Save Success:", result);
            setSuccess("Agendamento criado com sucesso!"); // Define a mensagem de sucesso no estado
            resetForm(); // Limpa o formulário
            // A mensagem de sucesso some automaticamente se você tiver um setTimeout no JSX ou aqui
            setTimeout(() => { setSuccess(null); }, 5000); // Limpa a msg de sucesso após 5s

        } catch (err: any) {
            setError(err.message || "Falha ao criar agendamento.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="agendamento" />
            {/* Ajustado padding e alinhamento do main */}
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto"> {/* Centraliza o card */}
                    {/* Título com ícone */}
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center"> {/* Aumentado mb */}
                        <MdEventAvailable className="text-3xl text-sky-400" /> {/* Ícone um pouco maior */}
                        Novo Agendamento
                    </h2>

                    <form onSubmit={handleSubmit} className="space-y-5"> {/* Adicionado space-y */}
                        {/* Mensagens */}
                        {error && (
                            <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl"/> <span>{error}</span> </div>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                            </div>
                        )}
                        {success && (
                            <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700">
                                <MdCheckCircle className="text-xl" /> <span>{success}</span>
                            </div>
                        )}

                        {/* Campos do Formulário */}
                        <div> {/* Removido mb-4, usando space-y do form */}
                            <label htmlFor="dataAgendamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> {/* Ícone adicionado */}
                                Data do Agendamento:
                            </label>
                            <input
                                type="date"
                                id="dataAgendamento"
                                name="dataAgendamento"
                                required
                                min={today} // <<< Adicionado min={today} para não permitir data passada
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                                value={dataAgendamento}
                                onChange={(e) => setDataAgendamento(e.target.value)}
                            />
                        </div>

                        <div> {/* Removido mb-6 */}
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <ClipboardList size={16} /> {/* Ícone adicionado */}
                                Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={5}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                                value={observacao}
                                onChange={(e) => setObservacao(e.target.value)}
                                maxLength={400}
                                placeholder="Detalhes do serviço, solicitação do cliente, etc." // Adicionado placeholder
                            />
                        </div>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4"> {/* Adicionado pt-4 */}
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                {isLoading ? 'Salvando...' : (<><MdSave /> Salvar Agendamento</>)}
                            </button>

                            <Link
                                href="/agendamento/listar"
                                className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            >
                                <MdArrowBack /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; } /* Melhorado cursor */
                /* Cor transparente para placeholder em data inválida/não preenchida */
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\agendamento\deletar\[id]\page.tsx   |   componente DeletarAgendamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
// Ícones que adicionamos:
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber } from 'react-icons/md';

interface AgendamentoInfo {
    id: number;
    dataAgendamento: string;
    observacao: string | null;
}

export default function DeletarAgendamentoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [agendamentoInfo, setAgendamentoInfo] = useState<AgendamentoInfo | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (id) {
            setIsLoadingInfo(true);
            setError(null);
            const fetchAgendamentoData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/agenda/${id}`;
                    const response = await fetch(apiUrl);
                    if (response.status === 404) throw new Error("Agendamento não encontrado para confirmar exclusão.");
                    if (!response.ok) throw new Error(`Erro ao buscar dados: ${response.statusText}`);
                    const data: AgendamentoInfo = await response.json();
                    setAgendamentoInfo(data);
                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados do agendamento para exclusão.");
                    setAgendamentoInfo(null);
                } finally {
                    setIsLoadingInfo(false);
                }
            };
            fetchAgendamentoData();
        } else {
            setError("ID do agendamento inválido na URL.");
            setIsLoadingInfo(false);
        }
    }, [id]);

    const handleConfirmDelete = async () => {
        if (!id) {
            setError("Não é possível excluir: ID inválido.");
            return;
        }
        setIsDeleting(true);
        setError(null);

        try {
            const apiUrl = `http://localhost:8080/rest/agenda/${id}`;
            const response = await fetch(apiUrl, { method: 'DELETE' });

            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao excluir agendamento: ${errorText || response.statusText}`);
            }
            console.log(`Agendamento ID ${id} excluído com sucesso.`);
            router.push('/agendamento/listar');
        } catch (err: any) {
            setError(err.message || "Falha ao excluir agendamento.");
            setIsDeleting(false);
        }
    };

    const handleCancel = () => {
        router.push('/agendamento/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados para confirmação...</p>
                </main>
            </>
        );
    }

    if (error || !id) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" />
                            Erro
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error || "ID não fornecido."}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdCancel /> Voltar
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    if (!agendamentoInfo) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-yellow-400">
                            <MdWarningAmber className="text-3xl" />
                            Agendamento Não Encontrado
                        </h2>
                        <p className="text-center text-yellow-400 bg-yellow-900/50 p-3 rounded border border-yellow-500 mb-6">
                            O agendamento ID {id} não foi encontrado ou pode já ter sido excluído.
                        </p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdCancel /> Voltar
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <MdDeleteForever className="text-3xl" />
                        Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6">Tem certeza que deseja excluir o seguinte agendamento?</p>

                    <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                        <p><strong>ID:</strong> {agendamentoInfo.id}</p>
                        <p><strong>Data:</strong> {new Date(agendamentoInfo.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' })}</p>
                        <p><strong>Observação:</strong> {agendamentoInfo.observacao || '-'}</p>
                    </div>

                    {error && (
                        <p className="text-center text-red-400 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever /> Sim, Excluir</>)}
                        </button>

                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\agendamento\listar\page.tsx   |   componente ListarAgendamentosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: src/app/agendamento/listar/page.tsx (Refatorado com Cards e Ordenação por ID) ---
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
// Importando Ícones (Lucide e Material Design)
import { Calendar, Hash, ClipboardList, Edit3, Trash2, CirclePlus, ChevronLeft, ChevronRight } from 'lucide-react';
import { MdEventNote, MdAdd, MdErrorOutline } from 'react-icons/md';

// --- Interfaces ---
interface AgendamentoParaLista {
    id: number;
    dataAgendamento: string; // Já vem formatada ou '-'
    observacao: string;
    // Poderíamos adicionar cliente/veículo aqui se a API retornasse
}

interface PaginatedAgendaResponse {
    content: AgendamentoApiResponseDto[];
    totalPages: number;
    totalElements: number; // Não usado atualmente, mas pode ser útil
    number: number; // Número da página atual (base 0)
    size: number;   // Tamanho da página
}

interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string; // Esperado formato YYYY-MM-DD
    observacao: string | null;
    // Adicionar aqui os DTOs de cliente/veículo se o backend os retornar
}
// ------------------

export default function ListarAgendamentosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize] = useState(12); // Aumentado para preencher melhor o grid (3 colunas x 4 linhas)

    const router = useRouter();

    // Helper para formatar data
    const formatarData = (dataString: string | null | undefined): string => {
        if (!dataString) return '-';
        try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { console.error("Erro formatar data Ag:", dataString, e); return 'Inválida'; }
    };

    // --- Fetch Agendamentos com Paginação e Ordenação por ID ---
    const fetchAgendamentos = async (page = 0) => {
        setIsLoading(true);
        setError(null);

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'id,asc' // <<< ORDENAÇÃO ALTERADA PARA ID ASCENDENTE >>>
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.log("Buscando agendamentos:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`;
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                throw new Error(errorMsg);
            }

            if (response.status === 204) { // No Content
                setAgendamentos([]); setTotalPages(0); setCurrentPage(0);
                return;
            }

            const data: PaginatedAgendaResponse = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: formatarData(dto.dataAgendamento), // Formata aqui
                observacao: dto.observacao || '',
                // Mapear cliente/veículo aqui se vierem da API
            }));

            setAgendamentos(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);

        } catch (err: any) {
            setError(err.message || "Falha ao carregar agendamentos.");
            setAgendamentos([]); setTotalPages(0); setCurrentPage(0); // Reseta em caso de erro
            console.error("Erro:", err);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchAgendamentos(currentPage);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [currentPage, pageSize]); // Roda quando a página ou tamanho mudar

    // Funções de Paginação
    const handlePreviousPage = () => { if (currentPage > 0) { setCurrentPage(prev => prev - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { setCurrentPage(prev => prev + 1); } };

    // Função Delete (apenas navega, precisa da página /deletar ou modal)
    const navigateToDelete = (id: number) => {
        if (!id || isNaN(id)) { setError("ID inválido para exclusão."); return; }
        if (window.confirm(`Tem certeza que deseja excluir o Agendamento ID: ${id}?`)) {
            alert(`Exclusão do Agendamento ${id} não implementada neste exemplo.`);
            // Exemplo: router.push(`/agendamento/deletar/${id}`);
            // Ou chamar API de delete e refetch:
            // deleteAgendamento(id).then(() => fetchAgendamentos(currentPage));
        }
    };

    return (
        <>
            <NavBar active="agendamento" /> {/* Ajuste 'active' conforme nome na NavBar */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left">
                        <MdEventNote className="text-4xl text-sky-400" /> Agendamentos Registrados
                    </h1>
                    <Link href="/agendamento/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap"> <MdAdd /> Novo Agendamento </button>
                    </Link>
                </div>

                {/* Mensagens */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando agendamentos...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 max-w-3xl mx-auto flex items-center gap-2"> <MdErrorOutline/> <span>{error}</span> <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button> </div> )}


                {/* <<< Lista de Cards >>> */}
                {!isLoading && !error && (
                    <div>
                        {agendamentos.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum agendamento encontrado.</p>
                        ) : (
                            // Grid Layout para os Cards
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {agendamentos.map((agendamento) => (
                                    // Card Individual
                                    <div key={agendamento.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                        {/* Header do Card */}
                                        <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                            <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {agendamento.id} </span>
                                            <span className="flex items-center gap-1 text-slate-400"> <Calendar size={16} /> {agendamento.dataAgendamento} </span>
                                        </div>
                                        {/* Corpo do Card */}
                                        <div className="p-4 space-y-3 flex-grow">
                                            <div>
                                                <h3 className="flex items-center text-base font-semibold mb-1 text-slate-200 gap-1"> <ClipboardList size={18} className="text-amber-400"/> Observação </h3>
                                                {/* Scroll se observação for muito longa */}
                                                <p className="text-sm text-slate-300 break-words max-h-28 overflow-y-auto pr-1">
                                                    {agendamento.observacao || '-'}
                                                </p>
                                                {/* Adicionar Cliente/Veículo aqui se disponível */}
                                                {/* Ex: <p><strong><User size={14}/> Cliente:</strong> {agendamento.nomeCliente || 'N/I'}</p> */}
                                                {/* Ex: <p><strong><Car size={14}/> Veículo:</strong> {agendamento.placaVeiculo || 'N/I'}</p> */}
                                            </div>
                                        </div>
                                        {/* Footer do Card (Ações) */}
                                        <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                            <Link href={`/agendamento/alterar/${agendamento.id}`}>
                                                <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1"> <Edit3 size={14} /> Editar </button>
                                            </Link>
                                            <button onClick={() => navigateToDelete(agendamento.id)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1"> <Trash2 size={14} /> Deletar </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< Fim da Lista de Cards >>> */}


                {/* Controles de Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-8 gap-3"> {/* Aumentado margem superior */}
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                            <ChevronLeft size={18}/> Anterior
                        </button>
                        <span className="text-slate-300 text-sm"> Página {currentPage + 1} de {totalPages} </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                            Próxima <ChevronRight size={18}/>
                        </button>
                    </div>
                )}
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\agendamento\page.tsx   |   componente AgendamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

import NavBar from "@/components/nav-bar";

export default function AgendamentoPage(){
    return(
        <>
            <NavBar active="agendamento"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Agendamento</h2>
                </div>
            </main>
        </>

    )
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\alterar\[idCliente]\[idEndereco]\page.tsx   |   componente AlterarClientePage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import {
    MdEdit,
    MdPerson,
    MdBadge,
    MdCalendarToday,
    MdWork,
    MdPhone,
    MdEmail,
    MdLocationOn,
    MdHome
} from 'react-icons/md';

// Função auxiliar para limpar máscaras
const cleanMaskedValue = (value: string): string =>
    value.replace(/\D/g, '');

// Interface para a resposta da API
interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    sexo: string;
    dataNascimento: string;
    atividadeProfissional: string;
    endereco: {
        codigo: number;
        numero: number;
        cep: string;
        logradouro: string;
        cidade: string;
        bairro: string;
        estado: string;
        complemento: string | null;
    } | null;
    contato: {
        codigo: number;
        celular: string;
        email: string;
        contato: string;
    } | null;
}

export default function AlterarClientePage() {
    const params = useParams();
    const router = useRouter();

    const idCliente = typeof params?.idCliente === 'string'
        ? parseInt(params.idCliente, 10)
        : null;
    const idEndereco = typeof params?.idEndereco === 'string'
        ? parseInt(params.idEndereco, 10)
        : null;

    // Estados do Formulário
    const [tipoCliente, setTipoCliente] = useState("PF");
    const [nome, setNome] = useState("");
    const [sobrenome, setSobrenome] = useState("");
    const [sexo, setSexo] = useState("M");
    const [tipoDocumento, setTipoDocumento] = useState("CPF");
    const [numeroDocumento, setNumeroDocumento] = useState("");
    const [dataNascimento, setDataNascimento] = useState("");
    const [atividadeProfissional, setAtividadeProfissional] = useState("");
    const [celular, setCelular] = useState("");
    const [email, setEmail] = useState("");
    const [contato, setContato] = useState("");
    const [numeroCasa, setNumeroCasa] = useState("");
    const [cep, setCep] = useState("");
    const [logradouro, setLogradouro] = useState("");
    const [bairro, setBairro] = useState("");
    const [cidade, setCidade] = useState("");
    const [estado, setEstado] = useState("");
    const [complemento, setComplemento] = useState("");

    // Controle de UI
    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Busca inicial dos dados
    useEffect(() => {
        if (idCliente && idEndereco) {
            setIsLoading(true);
            setError(null);
            const fetchData = async () => {
                try {
                    const resp = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`);
                    if (resp.status === 404) throw new Error("Cliente não encontrado.");
                    if (!resp.ok) throw new Error(`Erro: ${resp.statusText}`);
                    const data: ClienteApiResponseDto = await resp.json();

                    setTipoCliente(data.tipoCliente || "PF");
                    setNome(data.nome || "");
                    setSobrenome(data.sobrenome || "");
                    setSexo(data.sexo || "M");
                    setTipoDocumento(data.tipoDocumento || "CPF");
                    setNumeroDocumento(data.numeroDocumento || "");
                    setDataNascimento(data.dataNascimento.split('T')[0] || "");
                    setAtividadeProfissional(data.atividadeProfissional || "");
                    setCelular(data.contato?.celular || "");
                    setEmail(data.contato?.email || "");
                    setContato(data.contato?.contato || "");
                    setNumeroCasa(data.endereco?.numero.toString() || "");
                    setCep(data.endereco?.cep || "");
                    setLogradouro(data.endereco?.logradouro || "");
                    setBairro(data.endereco?.bairro || "");
                    setCidade(data.endereco?.cidade || "");
                    setEstado(data.endereco?.estado || "");
                    setComplemento(data.endereco?.complemento || "");
                } catch (err: any) {
                    setError(err.message);
                } finally {
                    setIsLoading(false);
                }
            };
            fetchData();
        } else {
            setError("IDs inválidos na URL.");
            setIsLoading(false);
        }
    }, [idCliente, idEndereco]);

    // Submissão do formulário atualizado
    const handleUpdate = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!idCliente || !idEndereco) {
            setError("IDs inválidos.");
            return;
        }

        setIsSaving(true);
        setError(null);
        setSuccess(null);

        const cleanedDoc = cleanMaskedValue(numeroDocumento);
        const cleanedCel = cleanMaskedValue(celular);
        const cleanedCep = cleanMaskedValue(cep);

        const payload = {
            tipoCliente,
            nome,
            sobrenome,
            sexo,
            tipoDocumento,
            numeroDocumento: cleanedDoc,
            dataNascimento,
            atividadeProfissional,
            endereco: {
                numero: parseInt(numeroCasa, 10),
                cep: cleanedCep,
                logradouro,
                bairro,
                localidade: cidade,
                uf: estado,
                complemento
            },
            contato: { celular: cleanedCel, email, contato }
        };

        try {
            const resp = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (!resp.ok) {
                const errJson = await resp.json().catch(() => ({}));
                throw new Error(errJson.message || resp.statusText);
            }
            setSuccess("✅ Cliente atualizado com sucesso!");
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(`❌ ${err.message}`);
        } finally {
            setIsSaving(false);
        }
    };

    // Busca de CEP
    const handleCepChange = async (value: string) => {
        const mask = cleanMaskedValue(value);
        setCep(value);
        setLogradouro("");
        setBairro("");
        setCidade("");
        setEstado("");

        if (mask.length === 8) {
            setIsSaving(true);
            setError(null);
            try {
                const resp = await fetch(`https://viacep.com.br/ws/${mask}/json/`);
                if (!resp.ok) throw new Error("CEP não encontrado.");
                const data = await resp.json();
                if (data.erro) throw new Error("CEP inválido.");
                setLogradouro(data.logradouro || "");
                setBairro(data.bairro || "");
                setCidade(data.localidade || "");
                setEstado(data.uf || "");
            } catch (e: any) {
                setError(`Erro CEP: ${e.message}`);
            } finally {
                setIsSaving(false);
            }
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    if (isLoading) {
        return (
            <>
                <NavBar active="clientes" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados do cliente...</p>
                </main>
            </>
        );
    }

    if (error && !nome) {
        return (
            <>
                <NavBar active="clientes" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl max-w-2xl mx-auto">
                        <h2 className="flex items-center justify-center text-2xl font-bold mb-4 text-red-400">
                            <MdEdit className="mr-2 text-3xl" />
                            Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">
                            {error}
                        </p>
                        <div className="text-center">
                            <Link href="/clientes/listar">
                                <button className="px-6 py-3 bg-slate-600 text-white rounded-md shadow hover:bg-slate-700">
                                    Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="clientes" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-6">
                        <MdEdit className="mr-2 text-3xl" />
                        Alterar Cliente (ID: {idCliente})
                    </h2>

                    {error && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500" role="alert">
                            <span className="block sm:inline">{error}</span>
                            <button
                                type="button"
                                className="absolute top-0 right-0 px-4 py-3 text-red-400 hover:text-red-200"
                                onClick={() => setError(null)}
                                aria-label="Fechar"
                            >
                                <span className="text-2xl">&times;</span>
                            </button>
                        </div>
                    )}

                    <form onSubmit={handleUpdate}>

                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Tipo de Cliente */}
                                <div>
                                    <label htmlFor="tipo_cliente" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Tipo de Cliente:
                                    </label>
                                    <select
                                        id="tipo_cliente"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={tipoCliente}
                                        onChange={e => setTipoCliente(e.target.value)}
                                    >
                                        <option value="PF">Pessoa Física</option>
                                        <option value="PJ">Pessoa Jurídica</option>
                                    </select>
                                </div>
                                {/* Nome */}
                                <div>
                                    <label htmlFor="nome" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Nome:
                                    </label>
                                    <input
                                        id="nome"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={nome}
                                        onChange={e => setNome(e.target.value)}
                                    />
                                </div>
                                {/* Sobrenome */}
                                <div>
                                    <label htmlFor="sobrenome" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Sobrenome:
                                    </label>
                                    <input
                                        id="sobrenome"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={sobrenome}
                                        onChange={e => setSobrenome(e.target.value)}
                                    />
                                </div>
                                {/* Sexo */}
                                <div>
                                    <label htmlFor="sexo" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Sexo:
                                    </label>
                                    <select
                                        id="sexo"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={sexo}
                                        onChange={e => setSexo(e.target.value)}
                                    >
                                        <option value="M">Masculino</option>
                                        <option value="F">Feminino</option>
                                        <option value="O">Outro</option>
                                    </select>
                                </div>
                                {/* Documento */}
                                <div>
                                    <label htmlFor="tipo_documento" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Documento:
                                    </label>
                                    <select
                                        id="tipo_documento"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={tipoDocumento}
                                        onChange={e => { setTipoDocumento(e.target.value); setNumeroDocumento(''); }}
                                    >
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>
                                {/* Nº Documento */}
                                <div>
                                    <label htmlFor="numero_documento" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Número:
                                    </label>
                                    <IMaskInput
                                        id="numero_documento"
                                        mask={tipoDocumento === 'CPF' ? cpfMask : cnpjMask}
                                        unmask={false}
                                        value={numeroDocumento}
                                        onAccept={v => setNumeroDocumento(v)}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                                {/* Nascimento */}
                                <div>
                                    <label htmlFor="data_nascimento" className="block mb-1 flex items-center">
                                        <MdCalendarToday className="mr-2" /> Nascimento:
                                    </label>
                                    <input
                                        id="data_nascimento"
                                        type="date"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 date-input-fix"
                                        value={dataNascimento}
                                        onChange={e => setDataNascimento(e.target.value)}
                                    />
                                </div>
                                {/* Profissão */}
                                <div>
                                    <label htmlFor="atividade_profissional" className="block mb-1 flex items-center">
                                        <MdWork className="mr-2" /> Profissão:
                                    </label>
                                    <input
                                        id="atividade_profissional"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={atividadeProfissional}
                                        onChange={e => setAtividadeProfissional(e.target.value)}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Celular */}
                                <div>
                                    <label htmlFor="celular" className="block mb-1 flex items-center">
                                        <MdPhone className="mr-2" /> Celular:
                                    </label>
                                    <IMaskInput
                                        id="celular"
                                        mask="(00) 00000-0000"
                                        unmask={false}
                                        value={celular}
                                        onAccept={v => setCelular(v)}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                                {/* E-mail */}
                                <div>
                                    <label htmlFor="email" className="block mb-1 flex items-center">
                                        <MdEmail className="mr-2" /> E-mail:
                                    </label>
                                    <input
                                        id="email"
                                        type="email"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}
                                    />
                                </div>
                                {/* Contato */}
                                <div className="md:col-span-2">
                                    <label htmlFor="contato" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Contato:
                                    </label>
                                    <input
                                        id="contato"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={contato}
                                        onChange={e => setContato(e.target.value)}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                {/* CEP */}
                                <div>
                                    <label htmlFor="cep" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> CEP:
                                    </label>
                                    <IMaskInput
                                        id="cep"
                                        mask="00000-000"
                                        unmask={false}
                                        value={cep}
                                        onAccept={handleCepChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                                {/* Logradouro */}
                                <div className="md:col-span-2">
                                    <label htmlFor="logradouro" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Logradouro:
                                    </label>
                                    <input
                                        id="logradouro"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={logradouro}
                                    />
                                </div>
                                {/* Número */}
                                <div>
                                    <label htmlFor="numeroCasa" className="block mb-1 flex items-center">
                                        <MdHome className="mr-2" /> Número:
                                    </label>
                                    <input
                                        id="numeroCasa"
                                        type="text"
                                        maxLength={8}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={numeroCasa}
                                        onChange={e => setNumeroCasa(e.target.value)}
                                    />
                                </div>
                                {/* Complemento */}
                                <div>
                                    <label htmlFor="complemento" className="block mb-1 flex items-center">
                                        <MdHome className="mr-2" /> Complemento:
                                    </label>
                                    <input
                                        id="complemento"
                                        type="text"
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={complemento}
                                        onChange={e => setComplemento(e.target.value)}
                                    />
                                </div>
                                {/* Bairro */}
                                <div>
                                    <label htmlFor="bairro" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Bairro:
                                    </label>
                                    <input
                                        id="bairro"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={bairro}
                                    />
                                </div>
                                {/* Cidade */}
                                <div>
                                    <label htmlFor="cidade" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Cidade:
                                    </label>
                                    <input
                                        id="cidade"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={cidade}
                                    />
                                </div>
                                {/* Estado */}
                                <div>
                                    <label htmlFor="estado" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Estado:
                                    </label>
                                    <input
                                        id="estado"
                                        type="text"
                                        maxLength={2}
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={estado}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botões */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                disabled={isSaving}
                                className={`px-6 py-3 bg-green-600 text-white rounded-md shadow hover:bg-green-700 focus:ring-2 focus:ring-green-500 transition ${
                                    isSaving ? "opacity-50 cursor-not-allowed" : ""
                                }`}
                            >
                                {isSaving ? (
                                    'Salvando...'
                                ) : (
                                    <span className="flex items-center">
                    <MdEdit className="mr-2" />
                    Salvar Alterações
                  </span>
                                )}
                            </button>
                            <Link
                                href="/clientes/listar"
                                className="px-6 py-3 bg-slate-600 text-white rounded-md shadow hover:bg-slate-700 text-center focus:ring-2 focus:ring-slate-500"
                            >
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* CSS global */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\buscar\page.tsx   |   componente BuscarClientesPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: src/app/clientes/buscar/page.tsx (Refatorado com Cards e Ordenação por ID) ---
"use client";

import { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
// Importando Ícones
import { User, Mail, MapPin, Edit3, Trash2, Hash, Search as SearchIcon, Filter } from 'lucide-react'; // Usando mais Lucide
import { MdSearch, MdFilterList, MdPerson, MdBadge, MdLocationOn, MdEdit, MdDelete, MdErrorOutline } from 'react-icons/md'; // Mantendo alguns Md

// --- Interfaces ---
interface ClienteParaLista {
    idCli: number;
    idEndereco: number;
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}

interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: { codigo: number; cidade: string; estado: string } | null;
    contato: { celular: string; email: string } | null;
}
// ------------------

// Tipos de busca
type TipoBusca = 'nome' | 'id' | 'doc';

export default function BuscarClientesPage() {
    const [todosClientes, setTodosClientes] = useState<ClienteParaLista[]>([]);
    const [resultadosBusca, setResultadosBusca] = useState<ClienteParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBusca>('nome');
    const [termoBusca, setTermoBusca] = useState('');
    const [isLoading, setIsLoading] = useState(false); // Loading inicial
    const [isSearching, setIsSearching] = useState(false); // Loading da busca
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // Carrega todos os clientes uma única vez
    useEffect(() => {
        const fetchTodosClientes = async () => {
            // Evita refetch desnecessário se já carregou e não está em loading
            if (todosClientes.length > 0 && !isLoading) return;
            setIsLoading(true); setError(null);
            try {
                const resp = await fetch("http://localhost:8080/rest/clientes/all");
                if (!resp.ok) { let errorMsg = `Erro HTTP ${resp.status}: ${resp.statusText}`; try { const errorData = await resp.json(); errorMsg = errorData.message || errorMsg; } catch (e) {} throw new Error(errorMsg); }
                if (resp.status === 204) { setTodosClientes([]); return; } // Trata No Content
                const data: ClienteApiResponseDto[] = await resp.json();
                const formatados = (data || []).map(dto => ({
                    idCli: dto.idCli,
                    idEndereco: dto.endereco?.codigo || 0,
                    nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                    documento: dto.numeroDocumento || 'N/A',
                    email: dto.contato?.email || 'N/A',
                    cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} / ${dto.endereco.estado || 'N/A'}` : 'N/A',
                }));
                setTodosClientes(formatados);
                console.log(`Carregados ${formatados.length} clientes para busca local.`);
            } catch (err: any) { setError(err.message || "Falha ao carregar dados base de clientes."); console.error("Erro:", err); setTodosClientes([]);
            } finally { setIsLoading(false); }
        };
        fetchTodosClientes();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // Dependência vazia para rodar só na montagem

    // Placeholder dinâmico
    const getPlaceholder = () => {
        switch (tipoBusca) {
            case 'nome': return 'Digite parte do nome...';
            case 'id':   return 'Digite o Código ID exato...';
            case 'doc':  return 'Digite parte do CPF/CNPJ...';
            default:     return '';
        }
    };

    // Executa a busca client-side com ordenação
    const handleSearch = (e?: FormEvent) => {
        if (e) e.preventDefault();
        setIsSearching(true);
        setBuscaRealizada(true);
        setError(null);

        // Garante que temos dados base antes de filtrar
        if (todosClientes.length === 0 && !isLoading) {
            setError("Dados base não carregados. Tente recarregar.");
            setResultadosBusca([]);
            setIsSearching(false);
            return;
        }

        const q = termoBusca.trim().toLowerCase();
        if (!q) {
            setResultadosBusca([]); setIsSearching(false); return;
        }

        let resultados: ClienteParaLista[] = [];
        try {
            switch (tipoBusca) {
                case 'nome':
                    resultados = todosClientes.filter(c => c.nomeCompleto.toLowerCase().includes(q));
                    break;
                case 'id':
                    const idNum = parseInt(q.replace(/\D/g, ''), 10); // Pega só números
                    resultados = isNaN(idNum) ? [] : todosClientes.filter(c => c.idCli === idNum);
                    break;
                case 'doc':
                    const docQ = q.replace(/\D/g, ''); // Pega só números do termo
                    resultados = todosClientes.filter(c => c.documento?.replace(/\D/g, '').includes(docQ)); // Compara só números
                    break;
                default:
                    resultados = [];
            }

            // <<< ORDENAÇÃO POR ID_CLI DOS RESULTADOS >>>
            resultados.sort((a, b) => a.idCli - b.idCli);

        } catch(err) {
            console.error("Erro durante o filtro:", err);
            setError("Ocorreu um erro ao filtrar os dados.");
        } finally {
            setResultadosBusca(resultados);
            setIsSearching(false);
        }
    };

    // Exclui cliente (sem alterações na lógica, mas adiciona feedback)
    const handleDelete = async (idCli: number, idEnd: number) => {
        if (!idCli || isNaN(idCli) || !idEnd || isNaN(idEnd) || idEnd === 0) {
            setError("ID inválido ou endereço não associado corretamente para exclusão.");
            return;
        }
        if (!window.confirm(`Excluir cliente ID ${idCli} (End. ID ${idEnd})?`)) return;

        // Idealmente, teria um estado de loading específico para este item
        setError(null);
        try {
            const resp = await fetch(`http://localhost:8080/rest/clientes/${idCli}/${idEnd}`, { method: 'DELETE' });
            if (!resp.ok) { const errorText = await resp.text().catch(() => `Erro ${resp.status}`); throw new Error(`Falha: ${errorText}`); }
            // Remove das duas listas para consistência imediata
            setTodosClientes(prev => prev.filter(c => !(c.idCli === idCli && c.idEndereco === idEnd)));
            setResultadosBusca(prev => prev.filter(c => !(c.idCli === idCli && c.idEndereco === idEnd)));
            alert('Cliente excluído com sucesso!'); // Trocar por um Toast/Snackbar seria melhor
        } catch (err: any) { setError(err.message); }
    };

    return (
        <>
            <NavBar active="clientes" /> {/* Ou "cliente-buscar" se tiver link direto */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center flex items-center justify-center gap-2">
                    <SearchIcon className="inline-block text-4xl text-sky-400" /> Buscar Clientes
                </h1>

                {/* Formulário de Busca */}
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-4xl mx-auto mb-8">
                    <form onSubmit={handleSearch}>
                        <div className="flex flex-wrap items-end gap-4">
                            {/* Select Tipo de Busca */}
                            <div className="flex-shrink-0 w-full sm:w-auto">
                                <label htmlFor="tipoBusca" className="flex items-center gap-1 block text-sm font-medium mb-1 text-slate-300"><Filter size={16}/>Buscar por:</label>
                                <select
                                    id="tipoBusca" name="tipoBusca" value={tipoBusca}
                                    onChange={e => { setTipoBusca(e.target.value as TipoBusca); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); }}
                                    className="w-full sm:w-48 h-10 px-3 py-2 bg-slate-800 border border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
                                >
                                    <option value="nome">Nome</option>
                                    <option value="id">Código</option>
                                    <option value="doc">Documento</option>
                                </select>
                            </div>
                            {/* Input Termo de Busca */}
                            <div className="flex-grow min-w-[200px]">
                                <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo:</label>
                                <input
                                    type={tipoBusca === 'id' ? 'number' : 'text'}
                                    id="termoBusca" name="termoBusca"
                                    value={termoBusca} onChange={e => setTermoBusca(e.target.value)}
                                    placeholder={getPlaceholder()} required
                                    className="w-full h-10 px-3 py-2 bg-slate-800 border border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
                                />
                            </div>
                            {/* Botão Buscar */}
                            <div className="flex-shrink-0">
                                <button type="submit" disabled={isLoading || isSearching} className={`h-10 px-5 py-2 font-semibold rounded-md shadow flex items-center justify-center ${isLoading || isSearching ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}>
                                    <SearchIcon size={18} className="mr-2"/> {isSearching ? 'Buscando...' : 'Buscar'}
                                </button>
                            </div>
                        </div>
                        {error && ( <p className="mt-3 text-sm text-red-400 flex items-center gap-1"><MdErrorOutline/>{error}</p> )}
                    </form>
                </div>

                {/* Loading Inicial */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando dados base...</p>}


                {/* <<< Área de Resultados com Cards >>> */}
                {!isLoading && buscaRealizada && !error && (
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold mb-4 text-center text-sky-300">Resultados da Busca</h2>
                        {isSearching ? (
                            <p className="text-center text-sky-300 py-10">Filtrando...</p>
                        ) : resultadosBusca.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum cliente encontrado para os critérios informados.</p>
                        ) : (
                            // Grid Layout para os Cards (Multi-coluna)
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {resultadosBusca.map((cliente) => { // Mapeia sobre resultadosBusca ORDENADOS
                                    const cardKey = `${cliente.idCli}-${cliente.idEndereco}`;
                                    const isIdValid = cliente.idCli !== null && cliente.idCli !== undefined && cliente.idEndereco !== 0;
                                    return (
                                        // Card Individual
                                        <div key={cardKey} className={`bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300 ${!isIdValid ? 'opacity-50' : ''}`}>
                                            {/* Header do Card */}
                                            <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                                <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {isIdValid ? cliente.idCli : 'Inválido'} </span>
                                                {/* <span className="flex items-center gap-1 text-slate-400"> {cliente.tipoCliente || '-'} </span> */}
                                            </div>
                                            {/* Corpo do Card */}
                                            <div className="p-4 space-y-2 flex-grow text-sm">
                                                <p title={cliente.nomeCompleto}><strong><User size={16} className="inline -mt-1 mr-1"/> Nome:</strong> {cliente.nomeCompleto || '-'}</p>
                                                <p><strong><MdBadge className="inline -mt-1 mr-1"/> Documento:</strong> {cliente.documento || '-'}</p>
                                                <p title={cliente.email}><strong><Mail size={16} className="inline -mt-1 mr-1"/> Email:</strong> {cliente.email || '-'}</p>
                                                <p><strong><MapPin size={16} className="inline -mt-1 mr-1"/> Local:</strong> {cliente.cidadeEstado || '-'}</p>
                                            </div>
                                            {/* Footer do Card (Ações) */}
                                            <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                                {isIdValid ? (
                                                    <>
                                                        <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}>
                                                            <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1"> <Edit3 size={14} /> Alterar </button>
                                                        </Link>
                                                        <button onClick={() => handleDelete(cliente.idCli, cliente.idEndereco)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1"> <MdDelete size={16} /> Deletar </button>
                                                    </>
                                                ) : ( <span className="text-xs text-red-400 italic">IDs Inválidos</span> )}
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< Fim da Área de Resultados >>> */}

                {/* Botão Voltar (Opcional) */}
                <div className="mt-8 text-center">
                    <Link href="/clientes/listar"> <button className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow"> Voltar para Lista Completa </button> </Link>
                </div>

            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\cadastrar\page.tsx   |   componente CadastrarPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import NavBar from "@/components/nav-bar";
import { useState, FormEvent } from "react";
import { IMaskInput } from "react-imask";
import {
    MdPersonAddAlt1,
    MdPerson,
    MdBadge,
    MdCalendarToday,
    MdWork,
    MdPhone,
    MdEmail,
    MdLocationOn,
    MdHome
} from "react-icons/md";

// Função auxiliar para limpar máscaras (remover não-dígitos)
const cleanMaskedValue = (value: string): string => value.replace(/\D/g, '');

export default function CadastrarPage() {
    // --- Estados Iniciais ---
    const initialState = {
        tipoCliente: "PF", nome: "", sobrenome: "", sexo: "M", tipoDocumento: "CPF",
        numeroDocumento: "", dataNascimento: "", atividadeProfissional: "",
        celular: "", email: "", contato: "", numeroCasa: "", cep: "",
        logradouro: "", bairro: "", cidade: "", estado: "", complemento: ""
    };

    // --- Variáveis de Estado ---
    const [tipoCliente, setTipoCliente] = useState(initialState.tipoCliente);
    const [nome, setNome] = useState(initialState.nome);
    const [sobrenome, setSobrenome] = useState(initialState.sobrenome);
    const [sexo, setSexo] = useState(initialState.sexo);
    const [tipoDocumento, setTipoDocumento] = useState(initialState.tipoDocumento);
    const [numeroDocumento, setNumeroDocumento] = useState(initialState.numeroDocumento);
    const [dataNascimento, setDataNascimento] = useState(initialState.dataNascimento);
    const [atividadeProfissional, setAtividadeProfissional] = useState(initialState.atividadeProfissional);
    const [celular, setCelular] = useState(initialState.celular);
    const [email, setEmail] = useState(initialState.email);
    const [contato, setContato] = useState(initialState.contato);
    const [numeroCasa, setNumeroCasa] = useState(initialState.numeroCasa);
    const [cep, setCep] = useState(initialState.cep);
    const [logradouro, setLogradouro] = useState(initialState.logradouro);
    const [bairro, setBairro] = useState(initialState.bairro);
    const [cidade, setCidade] = useState(initialState.cidade);
    const [estado, setEstado] = useState(initialState.estado);
    const [complemento, setComplemento] = useState(initialState.complemento);

    // --- Feedback da API ---
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // --- Limpa o formulário ---
    const resetForm = () => {
        setTipoCliente(initialState.tipoCliente);
        setNome(initialState.nome);
        setSobrenome(initialState.sobrenome);
        setSexo(initialState.sexo);
        setTipoDocumento(initialState.tipoDocumento);
        setNumeroDocumento(initialState.numeroDocumento);
        setDataNascimento(initialState.dataNascimento);
        setAtividadeProfissional(initialState.atividadeProfissional);
        setCelular(initialState.celular);
        setEmail(initialState.email);
        setContato(initialState.contato);
        setNumeroCasa(initialState.numeroCasa);
        setCep(initialState.cep);
        setLogradouro(initialState.logradouro);
        setBairro(initialState.bairro);
        setCidade(initialState.cidade);
        setEstado(initialState.estado);
        setComplemento(initialState.complemento);
        setError(null);
    };

    // --- Envia para API ---
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        const cleanedNumeroDocumento = cleanMaskedValue(numeroDocumento);
        const cleanedCelular = cleanMaskedValue(celular);
        const cleanedCep = cleanMaskedValue(cep);

        const clienteData = {
            tipoCliente, nome, sobrenome, sexo, tipoDocumento,
            numeroDocumento: cleanedNumeroDocumento, dataNascimento, atividadeProfissional,
            endereco: {
                numero: parseInt(numeroCasa, 10), cep: cleanedCep, logradouro, bairro,
                localidade: cidade, uf: estado, complemento,
            },
            contato: { celular: cleanedCelular, email, contato }
        };

        try {
            const response = await fetch("http://localhost:8080/rest/clientes", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(clienteData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({
                    message: `Erro ${response.status}: ${response.statusText}.`
                }));
                throw new Error(errorData.message);
            }

            await response.json();
            setSuccess("✅ Cliente cadastrado com sucesso!");
            resetForm();

            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(`❌ ${err.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    // --- Busca CEP via viacep ---
    const handleCepChange = async (value: string) => {
        const maskedCep = value;
        const newCep = cleanMaskedValue(maskedCep);
        setCep(maskedCep);
        setLogradouro(''); setBairro(''); setCidade(''); setEstado('');

        if (newCep.length === 8) {
            setIsLoading(true);
            setError(null);
            try {
                const resp = await fetch(`https://viacep.com.br/ws/${newCep}/json/`);
                if (!resp.ok) throw new Error('CEP não encontrado');
                const data = await resp.json();
                if (data.erro) throw new Error('CEP inválido');
                setLogradouro(data.logradouro || '');
                setBairro(data.bairro || '');
                setCidade(data.localidade || '');
                setEstado(data.uf || '');
            } catch (e: any) {
                setError(`❌ Erro ao buscar CEP: ${e.message}`);
            } finally {
                setIsLoading(false);
            }
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    return (
        <>
            <NavBar active="cadastrar" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center flex items-center justify-center">
                        <MdPersonAddAlt1 className="inline-block mr-2 text-3xl" />
                        Cadastrar Cliente
                    </h2>

                    {error && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500" role="alert">
                            <span className="block sm:inline">{error}</span>
                            <button
                                type="button"
                                className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200"
                                onClick={() => setError(null)}
                                aria-label="Fechar"
                            >
                                <span className="text-2xl">&times;</span>
                            </button>
                        </div>
                    )}

                    <form onSubmit={handleSubmit}>

                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                                {/* Tipo de Cliente */}
                                <div>
                                    <label htmlFor="tipo_cliente" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Tipo de Cliente:
                                    </label>
                                    <select
                                        id="tipo_cliente"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={tipoCliente}
                                        onChange={e => setTipoCliente(e.target.value)}
                                    >
                                        <option value="PF">Pessoa Física</option>
                                        <option value="PJ">Pessoa Jurídica</option>
                                    </select>
                                </div>

                                {/* Nome */}
                                <div>
                                    <label htmlFor="nome" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Nome:
                                    </label>
                                    <input
                                        id="nome"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={nome}
                                        onChange={e => setNome(e.target.value)}
                                    />
                                </div>

                                {/* Sobrenome */}
                                <div>
                                    <label htmlFor="sobrenome" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Sobrenome:
                                    </label>
                                    <input
                                        id="sobrenome"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={sobrenome}
                                        onChange={e => setSobrenome(e.target.value)}
                                    />
                                </div>

                                {/* Sexo */}
                                <div>
                                    <label htmlFor="sexo" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Sexo:
                                    </label>
                                    <select
                                        id="sexo"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={sexo}
                                        onChange={e => setSexo(e.target.value)}
                                    >
                                        <option value="M">Masculino</option>
                                        <option value="F">Feminino</option>
                                        <option value="O">Outro</option>
                                    </select>
                                </div>

                                {/* Tipo de Documento */}
                                <div>
                                    <label htmlFor="tipo_documento" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Documento:
                                    </label>
                                    <select
                                        id="tipo_documento"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={tipoDocumento}
                                        onChange={e => { setTipoDocumento(e.target.value); setNumeroDocumento(''); }}
                                    >
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>

                                {/* Número do Documento */}
                                <div>
                                    <label htmlFor="numero_documento" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Número:
                                    </label>
                                    <IMaskInput
                                        id="numero_documento"
                                        mask={tipoDocumento === 'CPF' ? cpfMask : cnpjMask}
                                        unmask={false}
                                        value={numeroDocumento}
                                        onAccept={value => setNumeroDocumento(value)}
                                        required
                                        placeholder={tipoDocumento === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>

                                {/* Data de Nascimento */}
                                <div>
                                    <label htmlFor="data_nascimento" className="block mb-1 flex items-center">
                                        <MdCalendarToday className="mr-2" /> Nascimento:
                                    </label>
                                    <input
                                        id="data_nascimento"
                                        type="date"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 date-input-fix"
                                        value={dataNascimento}
                                        onChange={e => setDataNascimento(e.target.value)}
                                    />
                                </div>

                                {/* Atividade Profissional */}
                                <div>
                                    <label htmlFor="atividade_profissional" className="block mb-1 flex items-center">
                                        <MdWork className="mr-2" /> Profissão:
                                    </label>
                                    <input
                                        id="atividade_profissional"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={atividadeProfissional}
                                        onChange={e => setAtividadeProfissional(e.target.value)}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                                {/* Celular */}
                                <div>
                                    <label htmlFor="celular" className="block mb-1 flex items-center">
                                        <MdPhone className="mr-2" /> Celular:
                                    </label>
                                    <IMaskInput
                                        id="celular"
                                        mask="(00) 00000-0000"
                                        unmask={false}
                                        value={celular}
                                        onAccept={value => setCelular(value)}
                                        required
                                        placeholder="(99) 99999-9999"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>

                                {/* E-mail */}
                                <div>
                                    <label htmlFor="email" className="block mb-1 flex items-center">
                                        <MdEmail className="mr-2" /> E-mail:
                                    </label>
                                    <input
                                        id="email"
                                        type="email"
                                        required
                                        placeholder="exemplo@dominio.com"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}
                                    />
                                </div>

                                {/* Contato Principal */}
                                <div className="md:col-span-2">
                                    <label htmlFor="contato" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Contato Principal:
                                    </label>
                                    <input
                                        id="contato"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={contato}
                                        onChange={e => setContato(e.target.value)}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">

                                {/* CEP */}
                                <div>
                                    <label htmlFor="cep" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> CEP:
                                    </label>
                                    <IMaskInput
                                        id="cep"
                                        mask="00000-000"
                                        unmask={false}
                                        value={cep}
                                        onAccept={handleCepChange}
                                        required
                                        placeholder="00000-000"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>

                                {/* Logradouro */}
                                <div className="md:col-span-2">
                                    <label htmlFor="logradouro" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Logradouro:
                                    </label>
                                    <input
                                        id="logradouro"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={logradouro}
                                    />
                                </div>

                                {/* Número */}
                                <div>
                                    <label htmlFor="numeroCasa" className="block mb-1 flex items-center">
                                        <MdHome className="mr-2" /> Número:
                                    </label>
                                    <input
                                        id="numeroCasa"
                                        type="text"
                                        maxLength={8}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={numeroCasa}
                                        onChange={e => setNumeroCasa(e.target.value)}
                                    />
                                </div>

                                {/* Complemento */}
                                <div>
                                    <label htmlFor="complemento" className="block mb-1 flex items-center">
                                        <MdHome className="mr-2" /> Complemento:
                                    </label>
                                    <input
                                        id="complemento"
                                        type="text"
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={complemento}
                                        onChange={e => setComplemento(e.target.value)}
                                    />
                                </div>

                                {/* Bairro */}
                                <div>
                                    <label htmlFor="bairro" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Bairro:
                                    </label>
                                    <input
                                        id="bairro"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={bairro}
                                    />
                                </div>

                                {/* Cidade */}
                                <div>
                                    <label htmlFor="cidade" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Cidade:
                                    </label>
                                    <input
                                        id="cidade"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={cidade}
                                    />
                                </div>

                                {/* Estado */}
                                <div>
                                    <label htmlFor="estado" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Estado:
                                    </label>
                                    <input
                                        id="estado"
                                        type="text"
                                        maxLength={2}
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={estado}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botão de Envio */}
                        <div className="flex justify-center mt-6">
                            <button
                                type="submit"
                                disabled={isLoading}
                                className={`px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:ring-2 focus:ring-sky-500 transition ${
                                    isLoading ? "opacity-50 cursor-not-allowed" : ""
                                }`}
                            >
                                {isLoading ? (
                                    "Cadastrando..."
                                ) : (
                                    <span className="flex items-center">
                    <MdPersonAddAlt1 className="inline-block mr-2" />
                    Cadastrar Cliente
                  </span>
                                )}
                            </button>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\deletar\page.tsx   |   componente ListarClientesPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/clientes/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdList,
    MdPerson,
    MdBadge,
    MdEmail,
    MdLocationOn,
    MdEdit,
    MdDelete,
    MdPersonAdd
} from 'react-icons/md';

// Interfaces
interface ClienteParaLista {
    idCli: number;
    idEndereco: number;
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}
interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: { codigo: number; cidade: string; estado: string } | null;
    contato: { celular: string; email: string } | null;
}

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Modal de delete
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [clienteParaDeletar, setClienteParaDeletar] = useState<ClienteParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);

    // Busca clientes
    const fetchClientes = async () => {
        setIsLoading(true);
        setError(null);
        setSuccess(null);
        try {
            const resp = await fetch("http://localhost:8080/rest/clientes/all");
            if (!resp.ok) throw new Error(`Erro HTTP ${resp.status}: ${resp.statusText}`);
            const data: ClienteApiResponseDto[] = await resp.json();
            const formatados = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0,
                nomeCompleto: `${dto.nome} ${dto.sobrenome}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A',
                cidadeEstado: dto.endereco
                    ? `${dto.endereco.cidade} - ${dto.endereco.estado}`
                    : 'N/A'
            }));
            setClientes(formatados);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchClientes();
    }, []);

    // Abre modal
    const handleDeleteClick = (cliente: ClienteParaLista) => {
        setClienteParaDeletar(cliente);
        setShowDeleteModal(true);
        setError(null);
        setSuccess(null);
    };

    // Cancela modal
    const cancelDelete = () => {
        setShowDeleteModal(false);
        setClienteParaDeletar(null);
    };

    // Confirma deleção
    const confirmDelete = async () => {
        if (!clienteParaDeletar) return;
        setIsDeleting(true);
        setError(null);
        setSuccess(null);
        const { idCli, idEndereco } = clienteParaDeletar;
        try {
            const resp = await fetch(
                `http://localhost:8080/rest/clientes/${idCli}/${idEndereco}`,
                { method: 'DELETE' }
            );
            if (!resp.ok) {
                const txt = await resp.text().catch(() => resp.statusText);
                throw new Error(txt);
            }
            setSuccess("Cliente excluído com sucesso!");
            setClientes(prev => prev.filter(c => !(c.idCli === idCli && c.idEndereco === idEndereco)));
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsDeleting(false);
            setShowDeleteModal(false);
            setClienteParaDeletar(null);
        }
    };

    return (
        <>
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold flex items-center">
                        <MdList className="mr-2 text-4xl" />
                        Lista de Clientes
                    </h1>
                    <Link href="/clientes/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow flex items-center">
                            <MdPersonAdd className="mr-2" />
                            Cadastrar Novo Cliente
                        </button>
                    </Link>
                </div>

                {/* Feedback */}
                {isLoading && (
                    <p className="text-center text-sky-300 py-4">Carregando...</p>
                )}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500">
                        <span>{error}</span>
                        <button
                            className="absolute top-0 right-0 px-4 py-3 text-red-400 hover:text-red-200"
                            onClick={() => setError(null)}
                        >
                            &times;
                        </button>
                    </div>
                )}
                {success && (
                    <div className="relative mb-4 text-green-400 bg-green-900/50 p-4 rounded border border-green-500">
                        <span>{success}</span>
                        <button
                            className="absolute top-0 right-0 px-4 py-3 text-green-400 hover:text-green-200"
                            onClick={() => setSuccess(null)}
                        >
                            &times;
                        </button>
                    </div>
                )}

                {/* Tabela */}
                {!isLoading && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center">
                                    <MdPerson className="mr-1" /> Nome Completo
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center">
                                    <MdBadge className="mr-1" /> Documento
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center">
                                    <MdEmail className="mr-1" /> Email
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center">
                                    <MdLocationOn className="mr-1" /> Cidade/UF
                                </th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    Ações
                                </th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.length === 0 ? (
                                <tr>
                                    <td colSpan={5} className="px-6 py-4 text-center text-slate-400">
                                        Nenhum cliente cadastrado.
                                    </td>
                                </tr>
                            ) : (
                                clientes.map(c => (
                                    <tr key={`${c.idCli}-${c.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{c.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            <Link href={`/clientes/alterar/${c.idCli}/${c.idEndereco}`}>
                                                <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center">
                                                    <MdEdit className="mr-1" />
                                                    Editar
                                                </button>
                                            </Link>
                                            <button
                                                onClick={() => handleDeleteClick(c)}
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center"
                                            >
                                                <MdDelete className="mr-1" />
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* Modal de confirmação */}
            {showDeleteModal && clienteParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center">
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full border border-red-500">
                        <h3 className="text-xl font-semibold text-red-400 mb-4 flex items-center">
                            <MdDelete className="mr-2 text-2xl" />
                            Confirmar Exclusão
                        </h3>
                        <p className="text-white mb-3">
                            Tem certeza que deseja excluir o cliente abaixo?
                        </p>
                        <div className="text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3">
                            <p><strong>ID:</strong> {clienteParaDeletar.idCli} / Endereço ID: {clienteParaDeletar.idEndereco}</p>
                            <p><strong>Nome:</strong> {clienteParaDeletar.nomeCompleto}</p>
                            <p><strong>Documento:</strong> {clienteParaDeletar.documento}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button
                                onClick={cancelDelete}
                                className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-md focus:outline-none"
                                disabled={isDeleting}
                            >
                                Cancelar
                            </button>
                            <button
                                onClick={confirmDelete}
                                className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md focus:outline-none ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isDeleting}
                            >
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\listar\page.tsx   |   componente ListarClientesPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: src/app/clientes/listar/page.tsx (VERSÃO COM CARDS E ORDENAÇÃO POR ID) ---
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Importar se precisar de navegação programática no futuro
import NavBar from '@/components/nav-bar';
// Importando Ícones
import { User, Mail, MapPin, Edit3, Trash2, Hash } from 'lucide-react';
import { MdPersonAdd, MdEdit, MdDelete, MdPeopleAlt, MdBadge, MdErrorOutline } from 'react-icons/md'; // Usar MdBadge para documento

// --- Interfaces ---
interface ClienteParaLista {
    idCli: number;
    idEndereco: number; // Necessário para as ações (editar/deletar)
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
    // Adicionar tipoCliente se quiser mostrar PF/PJ no card
    // tipoCliente: string;
}

interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: {
        codigo: number;
        cidade: string;
        estado: string;
    } | null;
    contato: {
        celular: string; // Celular não está na ClienteParaLista atual, adicionar se necessário
        email: string;
    } | null;
}
// ------------------

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    // const router = useRouter(); // Descomentar se usar router.push

    const fetchClientes = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch("http://localhost:8080/rest/clientes/all");
            if (!response.ok) {
                let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`;
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                throw new Error(errorMsg);
            }
            if (response.status === 204) { // Sem conteúdo
                setClientes([]);
                return;
            }

            const data: ClienteApiResponseDto[] = await response.json();

            // <<< ORDENAÇÃO POR ID_CLI ANTES DE MAPEAR >>>
            const sortedData = (data || []).sort((a, b) => a.idCli - b.idCli);

            const clientesFormatados: ClienteParaLista[] = sortedData.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0, // Pega idEndereco para a chave composta
                nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A',
                cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} / ${dto.endereco.estado || 'N/A'}` : 'N/A', // Ajustado separador
                // tipoCliente: dto.tipoCliente // Descomentar se quiser usar no card
            }));
            setClientes(clientesFormatados);
        } catch (err: any) {
            console.error("Erro ao buscar clientes:", err);
            setError(err.message || "Falha ao carregar dados dos clientes.");
            setClientes([]); // Garante que está vazio em caso de erro
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchClientes();
    }, []);

    // --- Função de Delete (sem alterações na lógica interna) ---
    const handleDelete = async (idCliente: number, idEndereco: number) => {
        // Validação simples de ID (pode melhorar)
        if (!idCliente || isNaN(idCliente) || !idEndereco || isNaN(idEndereco) || idEndereco === 0) {
            setError("ID inválido ou endereço não associado corretamente para exclusão.");
            return;
        }
        if (!window.confirm(`Tem certeza que deseja excluir o cliente ID ${idCliente} (Endereço ID ${idEndereco})?`)) {
            return;
        }

        // Aqui poderia setar um estado de loading específico para o botão clicado
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`, {
                method: 'DELETE',
            });

            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar cliente: ${errorText}`);
            }

            alert("Cliente excluído com sucesso!"); // Usar um modal/toast seria melhor UX
            // Remove o cliente da lista local
            setClientes(prev => prev.filter(c => !(c.idCli === idCliente && c.idEndereco === idEndereco)));

        } catch (err: any) {
            console.error("Erro ao deletar cliente:", err);
            setError(err.message || "Falha ao excluir cliente.");
        } finally {
            // Resetar loading específico do botão se implementado
        }
    };

    return (
        <>
            <NavBar active="clientes" /> {/* Ajuste 'active' se o link na NavBar for diferente */}

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho e Botões */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left">
                        <MdPeopleAlt className="text-4xl text-sky-400" /> Lista de Clientes
                    </h1>
                    <div className="flex gap-2 flex-wrap justify-center">
                        <Link href="/clientes/cadastrar">
                            <button className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md shadow whitespace-nowrap"> <MdPersonAdd /> Cadastrar Cliente </button>
                        </Link>
                        {/* Adicionar botão de busca se existir a página /clientes/buscar */}
                        {/*
                         <Link href="/clientes/buscar">
                             <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md shadow whitespace-nowrap"> <Search size={18} /> Buscar Cliente </button>
                         </Link>
                          */}
                    </div>
                </div>

                {/* Mensagens */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando clientes...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 max-w-3xl mx-auto" role="alert"><MdErrorOutline className="inline mr-1"/>{error}<button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button></div> )}


                {/* <<< Lista de Cards >>> */}
                {!isLoading && !error && (
                    <div>
                        {clientes.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum cliente cadastrado.</p>
                        ) : (
                            // Grid Layout para os Cards
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {/* Mapeia sobre os clientes JÁ ORDENADOS */}
                                {clientes.map((cliente) => {
                                    // Chave composta para o card e para as ações
                                    const cardKey = `${cliente.idCli}-${cliente.idEndereco}`;
                                    const isIdValid = cliente.idCli !== null && cliente.idCli !== undefined && cliente.idEndereco !== 0; // Valida se temos ambos IDs

                                    return (
                                        // Card Individual
                                        <div key={cardKey} className={`bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300 ${!isIdValid ? 'opacity-50' : ''}`}>
                                            {/* Header do Card */}
                                            <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                                <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID Cliente: {isIdValid ? cliente.idCli : 'Inválido'} </span>
                                                {/* Poderia adicionar o Tipo Cliente aqui se o trouxesse no DTO */}
                                            </div>

                                            {/* Corpo do Card */}
                                            <div className="p-4 space-y-2 flex-grow text-sm">
                                                <p title={cliente.nomeCompleto}><strong><User size={16} className="inline -mt-1 mr-1"/> Nome:</strong> {cliente.nomeCompleto || '-'}</p>
                                                <p><strong><MdBadge className="inline -mt-1 mr-1"/> Documento:</strong> {cliente.documento || '-'}</p>
                                                <p title={cliente.email}><strong><Mail size={16} className="inline -mt-1 mr-1"/> Email:</strong> {cliente.email || '-'}</p>
                                                <p><strong><MapPin size={16} className="inline -mt-1 mr-1"/> Local:</strong> {cliente.cidadeEstado || '-'}</p>
                                            </div>

                                            {/* Footer do Card (Ações) */}
                                            <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                                {isIdValid ? (
                                                    <>
                                                        <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}>
                                                            <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1"> <Edit3 size={14} /> Alterar </button>
                                                        </Link>
                                                        <button onClick={() => handleDelete(cliente.idCli, cliente.idEndereco)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1" disabled={isLoading}> <MdDelete size={16} /> Deletar </button>
                                                    </>
                                                ) : ( <span className="text-xs text-red-400 italic">IDs Inválidos</span> )}
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< Fim da Lista de Cards >>> */}
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\page.tsx   |   componente ClientesMenuPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/clientes/page.tsx
"use client";

import Link from 'next/link';
import NavBar from '@/components/nav-bar';

export default function ClientesMenuPage() {

    return (
        <>
            {/* Passa a prop 'active' correta para a NavBar */}
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-8 text-center">Gerenciar Clientes</h1>

                <div className="flex flex-col items-center gap-6 mt-10 md:flex-row md:justify-center">
                    {/* Botão/Link para Listar */}
                    <Link href="/clientes/listar">
                        <button className="w-60 px-6 py-3 text-lg font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-colors">
                            Listar Clientes
                        </button>
                    </Link>

                    {/* Botão/Link para Cadastrar */}
                    <Link href="/clientes/cadastrar">
                        <button className="w-60 px-6 py-3 text-lg font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-colors">
                            Cadastrar Novo Cliente
                        </button>
                    </Link>

                    {/* Você pode adicionar mais botões aqui para outras ações se desejar */}

                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\contato\page.tsx   |   componente ContatoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/contato/page.tsx
'use client';

import React, { useState } from 'react';
import dynamic from 'next/dynamic';
import { FaGithub } from 'react-icons/fa';
import NavBar from '@/components/nav-bar'; // Certifique-se que o caminho está correto
import {
    Phone, // Mantido para o título principal
    Mail,
    MapPin,
    Clock,
    User,
    AtSign,
    FileText,
    MessageCircle,
    MessagesSquare, // <<< ÍCONE ADICIONADO PARA WHATSAPP
    Send
} from 'lucide-react';

// Carregamento Dinâmico do Componente do Mapa
const DynamicLeafletMap = dynamic(() => import('@/components/LeafletMap'), {
    ssr: false,
    loading: () => (
        <div style={{ height: '100%', width: '100%' }} className="flex items-center justify-center bg-slate-800">
            <p className="text-center text-slate-400 py-4">Carregando mapa...</p>
        </div>
    )
});

export default function ContatoPage() {
    // --- Dados de Contato ---
    const contatoTelefoneDisplay = "(11) 97669-2633"; // Número para exibir
    const contatoTelefoneWhatsappNumero = "5511976692633"; // Número formatado para link wa.me
    const linkWhatsapp = `https://wa.me/${contatoTelefoneWhatsappNumero}`; // Link WhatsApp
    const enderecoLinha1 = "Rua Laura, 127";
    const enderecoLinha2 = "Vila Leda, Guarulhos - SP";
    const enderecoLinha3 = "CEP 07062-031";
    const horarioAtendimento1 = "Segunda a Sexta: 10h às 19h";
    const horarioAtendimento2 = "Sábado: 08h às 14h";
    const horarioAtendimento3 = "Domingo: Fechado";
    const mapPosition: [number, number] = [-23.4606621, -46.5490878]; // Suas coordenadas
    const emailDestino: string = "rm557881@fiap.com.br"; // Seu e-mail de destino

    // Estados para os campos do formulário
    const [nomeCompleto, setNomeCompleto] = useState('');
    const [emailRemetente, setEmailRemetente] = useState('');
    const [assunto, setAssunto] = useState('');
    const [mensagem, setMensagem] = useState('');

    // Função para lidar com o envio do formulário (via Gmail)
    const handleSubmitEmail = (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        console.log("Formulário submetido para abrir webmail (Gmail).");

        if (!nomeCompleto || !emailRemetente || !assunto || !mensagem) {
            alert("Por favor, preencha todos os campos obrigatórios.");
            return;
        }
        // A verificação do emailDestino é mantida como segurança
        if (!emailDestino || emailDestino === "seu_email_de_atendimento@example.com") {
            alert("Erro de configuração: O e-mail de destino não foi definido.");
            return;
        }
        const corpoEmailFormatado = `Nome: ${nomeCompleto}\nE-mail do Remetente (para resposta): ${emailRemetente}\n\nMensagem:\n${mensagem}`;
        const encodedSubject = encodeURIComponent(assunto);
        const encodedBody = encodeURIComponent(corpoEmailFormatado);
        const encodedTo = encodeURIComponent(emailDestino);
        const gmailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${encodedTo}&su=${encodedSubject}&body=${encodedBody}`;
        console.log("Abrindo Gmail com URL:", gmailUrl);
        window.open(gmailUrl, '_blank');
    };

    // Retorno do JSX
    return (
        <>
            <NavBar active="contato" />
            <main className="pt-24 pb-16 min-h-screen bg-[#012A46] text-slate-300">
                <div className="container mx-auto px-4">
                    {/* Título Principal */}
                    <h1 className="text-3xl font-bold text-white mb-8 text-center flex items-center justify-center">
                        <Phone className="mr-2 text-4xl text-sky-400" /> {/* Ícone de telefone mantido no título */}
                        Entre em Contato
                    </h1>

                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        {/* Coluna de Informações de Contato */}
                        <div className="lg:col-span-1">
                            <div className="bg-slate-900 rounded-lg shadow-lg p-6">
                                <h2 className="text-xl font-semibold text-sky-300 mb-6 flex items-center">
                                    <Mail className="mr-2" />
                                    Informações de Contato
                                </h2>
                                <div className="space-y-6">
                                    {/* --- SEÇÃO DO WHATSAPP/TELEFONE ALTERADA --- */}
                                    <div className="flex items-start">
                                        {/* Novo ícone */}
                                        <MessagesSquare className="h-5 w-5 text-sky-400 mt-0.5 mr-3 flex-shrink-0" />
                                        <div>
                                            {/* Título alterado */}
                                            <h3 className="font-medium text-white">WhatsApp / Telefone</h3>
                                            {/* Número vira um link para WhatsApp */}
                                            <a
                                                href={linkWhatsapp}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="mt-1 text-slate-400 hover:text-sky-400 transition-colors underline"
                                            >
                                                {contatoTelefoneDisplay} {/* Exibe o número formatado */}
                                            </a>
                                        </div>
                                    </div>
                                    {/* --- FIM DA SEÇÃO ALTERADA --- */}

                                    {/* Email */}
                                    <div className="flex items-start">
                                        <Mail className="h-5 w-5 text-sky-400 mt-0.5 mr-3 flex-shrink-0" />
                                        <div>
                                            <h3 className="font-medium text-white">Email de Atendimento</h3>
                                            <p className="mt-1 text-slate-400 break-all">{emailDestino}</p>
                                        </div>
                                    </div>
                                    {/* Endereço */}
                                    <div className="flex items-start">
                                        <MapPin className="h-5 w-5 text-sky-400 mt-0.5 mr-3 flex-shrink-0" />
                                        <div>
                                            <h3 className="font-medium text-white">Endereço</h3>
                                            <p className="mt-1 text-slate-400">
                                                {enderecoLinha1}<br />
                                                {enderecoLinha2}<br />
                                                {enderecoLinha3}
                                            </p>
                                        </div>
                                    </div>
                                    {/* Horário */}
                                    <div className="flex items-start">
                                        <Clock className="h-5 w-5 text-sky-400 mt-0.5 mr-3 flex-shrink-0" />
                                        <div>
                                            <h3 className="font-medium text-white">Horário</h3>
                                            <p className="mt-1 text-slate-400">{horarioAtendimento1}</p>
                                            <p className="text-slate-400">{horarioAtendimento2}</p>
                                            <p className="text-slate-400">{horarioAtendimento3}</p>
                                        </div>
                                    </div>
                                </div>
                                {/* Desenvolvido Por */}
                                <div className="mt-8 pt-6 border-t border-slate-700">
                                    <h3 className="font-medium text-white mb-4">Desenvolvido por:</h3>
                                    <div className="space-y-3">
                                        <a
                                            href="https://github.com/carmipa"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="flex items-center text-sky-400 hover:text-sky-300 transition-colors"
                                        >
                                            {/* Substituído aqui */}
                                            <FaGithub className="h-4 w-4 mr-2" />
                                            Paulo André Carminati
                                        </a>
                                        <a
                                            href="https://github.com/gabimaced0"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="flex items-center text-sky-400 hover:text-sky-300 transition-colors"
                                        >
                                            {/* Substituído aqui */}
                                            <FaGithub className="h-4 w-4 mr-2" />
                                            Gabrielly Macedo
                                        </a>
                                        <a
                                            href="https://github.com/carmipa/Java_Advanced_CP_1SEM/tree/main/projeto-semestral" // Verifique se este link ainda é relevante
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="flex items-center text-sky-400 hover:text-sky-300 transition-colors mt-2"
                                        >
                                            {/* Substituído aqui */}
                                            <FaGithub className="h-4 w-4 mr-2" />
                                            Repositório do Projeto
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Coluna do Formulário e Mapa */}
                        <div className="lg:col-span-2 space-y-8">
                            {/* Formulário de Contato */}
                            <div className="bg-slate-900 rounded-lg shadow-lg p-6">
                                <h2 className="text-xl font-semibold text-sky-300 mb-6 flex items-center">
                                    <Mail className="mr-2" />
                                    Envie uma Mensagem (via Webmail)
                                </h2>
                                <form className="space-y-6" onSubmit={handleSubmitEmail}>
                                    {/* Nome Completo */}
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div>
                                            <label htmlFor="nomeCompleto" className="block text-sm font-medium text-slate-300 mb-1 flex items-center">
                                                <User className="mr-2 text-slate-400 h-4 w-4" /> Nome Completo
                                            </label>
                                            <input id="nomeCompleto" name="nomeCompleto" type="text" required placeholder="Seu nome completo" className="w-full px-4 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 text-white placeholder-slate-500" value={nomeCompleto} onChange={(e) => setNomeCompleto(e.target.value)} />
                                        </div>
                                        {/* Seu Email */}
                                        <div>
                                            <label htmlFor="emailRemetente" className="block text-sm font-medium text-slate-300 mb-1 flex items-center">
                                                <AtSign className="mr-2 text-slate-400 h-4 w-4" /> Seu Email (para resposta)
                                            </label>
                                            <input id="emailRemetente" name="emailRemetente" type="email" required placeholder="seu@email.com" className="w-full px-4 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 text-white placeholder-slate-500" value={emailRemetente} onChange={(e) => setEmailRemetente(e.target.value)} />
                                        </div>
                                    </div>
                                    {/* Assunto */}
                                    <div>
                                        <label htmlFor="assunto" className="block text-sm font-medium text-slate-300 mb-1 flex items-center">
                                            <FileText className="mr-2 text-slate-400 h-4 w-4" /> Assunto
                                        </label>
                                        <input id="assunto" name="assunto" type="text" required placeholder="Assunto da mensagem" className="w-full px-4 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 text-white placeholder-slate-500" value={assunto} onChange={(e) => setAssunto(e.target.value)} />
                                    </div>
                                    {/* Mensagem */}
                                    <div>
                                        <label htmlFor="mensagem" className="block text-sm font-medium text-slate-300 mb-1 flex items-center">
                                            <MessageCircle className="mr-2 text-slate-400 h-4 w-4" /> Mensagem
                                        </label>
                                        <textarea id="mensagem" name="mensagem" rows={6} required placeholder="Digite sua mensagem aqui..." className="w-full px-4 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 text-white placeholder-slate-500" value={mensagem} onChange={(e) => setMensagem(e.target.value)} />
                                    </div>
                                    {/* Botão Enviar */}
                                    <div className="text-right">
                                        <button type="submit" className="inline-flex items-center px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 transition-colors disabled:opacity-50">
                                            <Send className="mr-2 h-4 w-4" /> Enviar Mensagem
                                        </button>
                                    </div>
                                </form>
                            </div>

                            {/* Mapa com Leaflet */}
                            <div className="bg-slate-900 rounded-lg shadow-lg p-6">
                                <h2 className="text-xl font-semibold text-sky-300 mb-4 flex items-center">
                                    <MapPin className="mr-2" />
                                    Minha Localização
                                </h2>
                                <div className="w-full h-[400px] rounded-md overflow-hidden bg-slate-800">
                                    <DynamicLeafletMap
                                        position={mapPosition}
                                        markerText={`${enderecoLinha1}, ${enderecoLinha2}`}
                                        className="h-full w-full"
                                    />
                                </div>
                                <p className="text-xs text-slate-500 mt-2 text-center">
                                    {enderecoLinha1}, {enderecoLinha2}
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\inicio\page.tsx   |   componente InicioPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

import NavBar from "@/components/nav-bar";

export default function InicioPage() {
    return (
        <>
            <NavBar active="inicio" />

            {/* --- Modificações aqui --- */}
            <main
                className="flex items-center justify-center min-h-screen text-white bg-cover bg-center bg-no-repeat"
                // Define a imagem de fundo usando valor arbitrário do Tailwind
                // e define uma cor de fundo sólida como fallback caso a imagem não carregue
                style={{
                    backgroundImage: `url('/admin-ajax.png')`, // Caminho para a imagem na pasta public
                    backgroundColor: '#012A46', // Cor de fundo de fallback
                }}
            >
                {/* O conteúdo da seção agora fica sobre a imagem de fundo */}
                <section className="bg-black/50 backdrop-blur-sm max-w-2xl p-8 m-4 rounded-xl text-center"> {/* Ajustei o fundo da seção para melhor contraste */}
                    <h1 className="mb-4 text-4xl font-bold">Bem-vindo à Oficina Virtual</h1>
                    <p className="mb-8 text-lg">
                        Descubra uma nova forma de cuidar do seu veículo com praticidade e eficiência. Experimente nossa plataforma e agende seu serviço online.
                    </p>
                    {/* Você precisa adicionar o texto ou ícone do botão aqui */}
                    <button className="px-6 py-3 font-semibold text-white transition bg-[#075985] rounded-md shadow hover:bg-[#075985]/90">
                        Agendar Serviço {/* Exemplo de texto para o botão */}
                    </button>
                </section>
            </main>
            {/* --- Fim das Modificações --- */}
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\layout.tsx   |   componente RootLayout
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\oficinaOnline\alterar\[id]\page.tsx   |   componente AlterarOficinaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/oficinaOnline/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import { Calendar, AlertCircle, CheckCircle, Box, Clock, Save, ArrowLeft, FileText } from 'lucide-react';

// Função auxiliar para limpar máscaras (se usar alguma)
const cleanMaskedValue = (value: string): string => value.replace(/\D/g, '');

interface OficinaApiResponseDto {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadas: string;
}

export default function AlterarOficinaPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [dataOficina, setDataOficina] = useState('');
    const [descricaoProblema, setDescricaoProblema] = useState('');
    const [diagnostico, setDiagnostico] = useState('');
    const [partesAfetadas, setPartesAfetadas] = useState('');
    const [horasTrabalhadas, setHorasTrabalhadas] = useState('');

    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError('ID inválido na URL.');
            setIsLoading(false);
            return;
        }
        (async () => {
            setIsLoading(true);
            setError(null);
            try {
                const res = await fetch(`http://localhost:8080/rest/oficina/${id}`);
                if (res.status === 404) throw new Error('Registro não encontrado.');
                if (!res.ok) throw new Error(`Erro ${res.status}: ${res.statusText}`);
                const data: OficinaApiResponseDto = await res.json();
                setDataOficina(data.dataOficina.split('T')[0]);
                setDescricaoProblema(data.descricaoProblema || '');
                setDiagnostico(data.diagnostico || '');
                setPartesAfetadas(data.partesAfetadas || '');
                setHorasTrabalhadas(data.horasTrabalhadas || '');
            } catch (e: any) {
                setError(e.message);
            } finally {
                setIsLoading(false);
            }
        })();
    }, [id]);

    const handleUpdate = async (e: FormEvent) => {
        e.preventDefault();
        if (!id) return;
        setIsSaving(true);
        setError(null);
        setSuccess(null);
        const payload = { dataOficina, descricaoProblema, diagnostico, partesAfetadas, horasTrabalhadas };
        try {
            const res = await fetch(`http://localhost:8080/rest/oficina/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });
            if (!res.ok) {
                const err = await res.json().catch(() => ({ message: res.statusText }));
                throw new Error(err.message);
            }
            setSuccess('Atualizado com sucesso!');
            setTimeout(() => setSuccess(null), 5000);
        } catch (e: any) {
            setError(e.message);
        } finally {
            setIsSaving(false);
        }
    };

    if (isLoading) return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="container mx-auto p-8 bg-[#012A46] min-h-screen text-white">
                <p className="text-center text-sky-300">Carregando dados...</p>
            </main>
        </>
    );

    if (error && !descricaoProblema) return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="container mx-auto p-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 rounded-lg mx-auto max-w-md">
                    <h2 className="flex items-center text-2xl text-red-400 mb-4">
                        <AlertCircle className="mr-2" /> Erro
                    </h2>
                    <p className="mb-4">{error}</p>
                    <Link href="/oficinaOnline">
                        <button className="flex items-center px-4 py-2 bg-slate-600 text-white rounded-md">
                            <ArrowLeft className="mr-2" /> Voltar
                        </button>
                    </Link>
                </div>
            </main>
        </>
    );

    return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="flex items-center justify-center p-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 rounded-lg max-w-2xl w-full">
                    <h2 className="flex items-center text-3xl mb-6">
                        <FileText className="mr-2 text-sky-400" /> Alterar Registro (ID: {id})
                    </h2>
                    <form onSubmit={handleUpdate}>
                        {error && (
                            <div className="mb-4 text-red-400 bg-red-900/50 p-4 rounded relative">
                                {error}
                                <button onClick={() => setError(null)} className="absolute top-2 right-2">&times;</button>
                            </div>
                        )}
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <Calendar className="mr-2 text-sky-400" /> Data
                            </label>
                            <input
                                type="date"
                                value={dataOficina}
                                onChange={e => setDataOficina(e.target.value)}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <AlertCircle className="mr-2 text-sky-400" /> Descrição
                            </label>
                            <textarea
                                value={descricaoProblema}
                                onChange={e => setDescricaoProblema(e.target.value)}
                                rows={4}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <Box className="mr-2 text-sky-400" /> Partes Afetadas
                            </label>
                            <input
                                type="text"
                                value={partesAfetadas}
                                onChange={e => setPartesAfetadas(e.target.value)}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <CheckCircle className="mr-2 text-sky-400" /> Diagnóstico
                            </label>
                            <textarea
                                value={diagnostico}
                                onChange={e => setDiagnostico(e.target.value)}
                                rows={4}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <Clock className="mr-2 text-sky-400" /> Horas Trabalhadas
                            </label>
                            <input
                                type="text"
                                value={horasTrabalhadas}
                                onChange={e => setHorasTrabalhadas(e.target.value)}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                placeholder="Ex: 2.5"
                                required
                            />
                        </div>
                        {success && <p className="text-green-400 mb-4">{success}</p>}
                        <div className="flex justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                disabled={isSaving}
                                className="inline-flex items-center px-6 py-3 bg-green-600 rounded-md shadow hover:bg-green-700"
                            >
                                <Save className="mr-2" /> {isSaving ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/oficinaOnline">
                                <button className="inline-flex items-center px-6 py-3 bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                    <ArrowLeft className="mr-2" /> Voltar
                                </button>
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\oficinaOnline\buscar\page.tsx   |   componente BuscarOficinaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: app/oficinaOnline/buscar/page.tsx (VERSÃO COM CARDS NOS RESULTADOS) ---
"use client";

import { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
import { // Ícones necessários para o formulário e cards
    MdSearch, MdFilterList, MdEdit, MdDelete, MdErrorOutline, MdFindInPage,
    MdCalendarToday, MdOutlineEditNote, MdOutlineReportProblem
} from 'react-icons/md';
import {
    Hash, Calendar, FileText, CheckCircle, Edit3, Trash2, ClipboardList, Stethoscope
} from 'lucide-react'; // Usando Lucide consistentemente

// --- Interfaces (sem alterações) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string;
}
interface OficinaApiResponseDto {
    id: number; dataOficina: string; descricaoProblema: string | null; diagnostico: string | null; partesAfetadas: string | null; horasTrabalhadas: string | null;
}
// ---------------------------------

type TipoBuscaOficina = 'id' | 'descricao' | 'diagnostico';

export default function BuscarOficinaPage() {
    const [todasOficinas, setTodasOficinas] = useState<OficinaParaLista[]>([]);
    const [resultadosBusca, setResultadosBusca] = useState<OficinaParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaOficina>('descricao');
    const [termoBusca, setTermoBusca] = useState('');
    const [isLoading, setIsLoading] = useState(false); // Loading inicial
    const [isSearching, setIsSearching] = useState(false); // Loading da busca/filtro
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // Estados e Funções do Modal (sem alterações)
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);

    const router = useRouter();

    // Fetch inicial de todos os dados (sem alterações)
    const fetchTodasOficinas = async () => {
        if (todasOficinas.length > 0 && !isLoading) return; // Evita refetch desnecessário
        setIsLoading(true); setError(null); setSuccess(null);
        try {
            const response = await fetch("http://localhost:8080/rest/oficina/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            if (response.status === 204) {
                setTodasOficinas([]);
                return;
            }
            const data: OficinaApiResponseDto[] = await response.json();
            if (!Array.isArray(data)) {
                throw new Error("Formato de resposta inválido.");
            }
            const oficinasFormatadas: OficinaParaLista[] = data.map(dto => ({
                id: dto.id,
                dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00Z').toLocaleDateString('pt-BR', {timeZone: 'UTC'}) : 'N/A',
                descricaoProblema: dto.descricaoProblema || 'N/A',
                diagnostico: dto.diagnostico || 'Pendente',
                horasTrabalhadas: dto.horasTrabalhadas || 'N/A',
            }));
            setTodasOficinas(oficinasFormatadas);
        } catch (err: any) {
            setError(err.message || "Falha ao carregar dados base da oficina.");
            setTodasOficinas([]); // Garante que a lista base está vazia em caso de erro
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchTodasOficinas(); }, []); // Executa apenas na montagem inicial

    // Handle da busca client-side (sem alterações na lógica)
    const handleSearch = (event?: FormEvent<HTMLFormElement>) => {
        if (event) event.preventDefault();
        setIsSearching(true); setBuscaRealizada(true); setSuccess(null); setError(null);
        const query = termoBusca.trim().toLowerCase();

        // Garante que temos dados base antes de filtrar
        if (isLoading || todasOficinas.length === 0) {
            setResultadosBusca([]);
            setIsSearching(false);
            if (!isLoading) setError("Dados base não carregados. Tente recarregar a página."); // Informa se a base falhou
            return;
        }

        if (!query && tipoBusca !== 'id') { // Permite busca vazia exceto por ID
            setResultadosBusca([]);
            setIsSearching(false);
            return;
        }

        let resultados: OficinaParaLista[] = [];
        switch (tipoBusca) {
            case 'id':
                const idNum = parseInt(query.replace(/\D/g, ''), 10);
                resultados = isNaN(idNum) ? [] : todasOficinas.filter(o => o.id === idNum);
                break;
            case 'descricao':
                resultados = todasOficinas.filter(o => o.descricaoProblema.toLowerCase().includes(query));
                break;
            case 'diagnostico':
                resultados = todasOficinas.filter(o => o.diagnostico.toLowerCase().includes(query));
                break;
            default:
                resultados = [];
        }
        setResultadosBusca(resultados);
        setIsSearching(false);
    };

    // Funções de Deleção (sem alterações)
    const handleDeleteClick = (oficina: OficinaParaLista) => { setOficinaParaDeletar(oficina); setShowDeleteModal(true); setError(null); setSuccess(null); };
    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        setIsDeleting(true); setError(null); setSuccess(null);
        const { id } = oficinaParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/oficina/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`); }
            setShowDeleteModal(false); setShowDeleteSuccessModal(true);
            setTodasOficinas(prev => prev.filter(o => o.id !== id));
            setResultadosBusca(prev => prev.filter(o => o.id !== id));
        } catch (err: any) { setError(err.message || "Falha ao excluir registro."); setShowDeleteModal(false);
        } finally { setIsDeleting(false); }
    };
    const cancelDelete = () => { setShowDeleteModal(false); setOficinaParaDeletar(null); };
    const closeSuccessModal = () => { setShowDeleteSuccessModal(false); setOficinaParaDeletar(null); };
    // ----------------------------------------

    // Placeholder dinâmico (sem alterações)
    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'id': return 'Digite o ID exato...';
            case 'descricao': return 'Digite parte da descrição...';
            case 'diagnostico': return 'Digite parte do diagnóstico...';
            default: return 'Digite o termo...';
        }
    }

    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título */}
                <h1 className="flex items-center justify-center text-3xl font-bold mb-6 gap-2">
                    <MdFindInPage className="text-4xl text-sky-400"/> Buscar Registros da Oficina
                </h1>

                {/* Formulário de Busca (sem alterações na estrutura) */}
                <div className="bg-slate-800 p-4 md:p-6 rounded-lg shadow-lg max-w-3xl mx-auto mb-8">
                    <form onSubmit={handleSearch} className="flex flex-col md:flex-row gap-4 items-end">
                        <div className="w-full md:w-auto">
                            <label htmlFor="tipoBusca" className="flex items-center gap-1 block text-sm font-medium mb-1 text-slate-300"><MdFilterList/>Buscar por:</label>
                            <select
                                id="tipoBusca"
                                name="tipoBusca"
                                className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                                value={tipoBusca}
                                onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaOficina); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); }}
                            >
                                <option value="descricao">Descrição Problema</option>
                                <option value="id">ID Registro</option>
                                <option value="diagnostico">Diagnóstico</option>
                            </select>
                        </div>
                        <div className="flex-grow w-full">
                            <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo:</label>
                            <input
                                type={tipoBusca === 'id' ? 'number' : 'text'}
                                id="termoBusca"
                                className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                                value={termoBusca}
                                onChange={(e) => setTermoBusca(e.target.value)}
                                placeholder={getPlaceholder()}
                                required={tipoBusca === 'id'} // Só ID é obrigatório
                            />
                        </div>
                        <button type="submit" className="flex-shrink-0 w-full md:w-auto h-10 px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 flex items-center justify-center whitespace-nowrap" disabled={isLoading || isSearching}>
                            <MdSearch className="mr-2" />
                            {isSearching ? 'Buscando...' : 'Buscar'}
                        </button>
                    </form>
                </div>

                {/* Loading Inicial e Erros */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando dados base...</p>}
                {error && ( <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><MdErrorOutline className="inline mr-2"/>{error}<button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button></div> )}

                {/* <<< ÁREA DE RESULTADOS: AGORA COM CARDS >>> */}
                {!isLoading && buscaRealizada && !error && (
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold mb-4 text-center text-sky-300">Resultados da Busca</h2>
                        {isSearching ? (
                            <p className="text-center text-sky-300 py-10">Filtrando registros...</p>
                        ) : resultadosBusca.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum registro encontrado para os critérios informados.</p>
                        ) : (
                            // Grid Layout para os Cards (Multi-coluna como na listagem)
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {resultadosBusca.map((oficina) => (
                                    // Card Individual (Estrutura idêntica à da ListarOficinaPage)
                                    <div key={oficina.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                        {/* Header do Card */}
                                        <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                            <span className="flex items-center gap-1 font-semibold text-sky-300">
                                                <Hash size={16} /> ID: {oficina.id}
                                            </span>
                                            <span className="flex items-center gap-1 text-slate-400">
                                                <Calendar size={16} /> {oficina.dataOficina}
                                            </span>
                                        </div>

                                        {/* Corpo do Card */}
                                        <div className="p-4 space-y-3 flex-grow">
                                            {/* Descrição do Problema */}
                                            <div>
                                                <h3 className="flex items-center text-base font-semibold mb-1 text-slate-200 gap-1">
                                                    <ClipboardList size={18} className="text-amber-400"/> Problema Descrito
                                                </h3>
                                                <p className="text-sm text-slate-300 break-words max-h-24 overflow-y-auto pr-1">
                                                    {oficina.descricaoProblema || '-'}
                                                </p>
                                            </div>

                                            {/* Diagnóstico */}
                                            <div>
                                                <h3 className="flex items-center text-base font-semibold mb-1 text-slate-200 gap-1">
                                                    <Stethoscope size={18} className="text-teal-400"/> Diagnóstico
                                                </h3>
                                                <p className="text-sm text-slate-300 break-words max-h-32 overflow-y-auto pr-1">
                                                    {oficina.diagnostico}
                                                </p>
                                            </div>
                                        </div>

                                        {/* Footer do Card (Ações) */}
                                        <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                            <Link href={`/oficinaOnline/alterar/${oficina.id}`}>
                                                <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1" disabled={isDeleting}>
                                                    <Edit3 size={14} /> Editar
                                                </button>
                                            </Link>
                                            <button
                                                onClick={() => handleDeleteClick(oficina)}
                                                className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1"
                                                disabled={isDeleting || !oficina.id} // Desabilita se ID for inválido
                                            >
                                                <Trash2 size={14} /> Deletar
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< FIM DA ÁREA DE RESULTADOS >>> */}

            </main>

            {/* Modais (sem alterações) */}
            {showDeleteModal && oficinaParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={e => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir este registro?</p>
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                            <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                            <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                            <p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p> {/* Adicionado problema ao modal */}
                        </div>
                        <div className="flex justify-end gap-4">
                            <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>
                                Não, cancelar
                            </button>
                            <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {showDeleteSuccessModal && (
                <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                        <p className="text-white mb-6 text-center">Registro de oficina excluído.</p>
                        <div className="flex justify-center">
                            <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\oficinaOnline\cadastrar\page.tsx   |   componente CadastrarOficinaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/oficinaOnline/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import {
    Calendar,
    AlertCircle,
    Cpu,
    CheckCircle,
    Box,
    Clock,
    Save,
    Wrench
} from 'lucide-react';

// Auxiliar para limpar máscaras
const cleanMaskedValue = (value: string): string =>
    value.replace(/\D/g, '');

export default function CadastrarOficinaPage() {
    const today = new Date().toISOString().split('T')[0];
    const initialState = {
        dataOficina: today,
        descricaoProblema: "",
        diagnostico: "",
        partesAfetadas: "",
        horasTrabalhadas: ""
    };

    const [dataOficina, setDataOficina] = useState(initialState.dataOficina);
    const [descricaoProblema, setDescricaoProblema] = useState(initialState.descricaoProblema);
    const [diagnostico, setDiagnostico] = useState(initialState.diagnostico);
    const [partesAfetadas, setPartesAfetadas] = useState(initialState.partesAfetadas);
    const [horasTrabalhadas, setHorasTrabalhadas] = useState(initialState.horasTrabalhadas);

    const [isSaving, setIsSaving] = useState(false);
    const [isIaLoading, setIsIaLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [diagnosticoIa, setDiagnosticoIa] = useState<string | null>(null);

    const resetForm = () => {
        setDataOficina(initialState.dataOficina);
        setDescricaoProblema(initialState.descricaoProblema);
        setDiagnostico(initialState.diagnostico);
        setPartesAfetadas(initialState.partesAfetadas);
        setHorasTrabalhadas(initialState.horasTrabalhadas);
        setError(null);
        setDiagnosticoIa(null);
    };

    const handleBuscaIa = async () => {
        if (!descricaoProblema.trim()) {
            setError("Descreva o problema antes de buscar na IA.");
            return;
        }
        setIsIaLoading(true);
        setError(null);
        setDiagnosticoIa(null);
        setSuccess(null);

        try {
            const apiUrl = `http://localhost:8080/rest/ia/diagnostico?descricao=${encodeURIComponent(descricaoProblema)}`;
            const response = await fetch(apiUrl);
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`IA: ${errorText}`);
            }
            const diag = await response.text();
            setDiagnosticoIa(diag);
            setDiagnostico(diag);
        } catch (err: any) {
            setError(err.message);
            setDiagnosticoIa("Falha ao obter diagnóstico.");
        } finally {
            setIsIaLoading(false);
        }
    };

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsSaving(true);
        setError(null);
        setSuccess(null);

        const oficinaData = { dataOficina, descricaoProblema, diagnostico, partesAfetadas, horasTrabalhadas };
        const apiUrl = "http://localhost:8080/rest/oficina";

        try {
            const resp = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(oficinaData),
            });
            if (!resp.ok) {
                const errJson = await resp.json().catch(() => ({ message: resp.statusText }));
                throw new Error(errJson.message);
            }
            setSuccess("Registro salvo com sucesso!");
            resetForm();
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsSaving(false);
        }
    };

    const formattedDate = new Date(dataOficina + 'T00:00:00')
        .toLocaleDateString('pt-BR');

    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-2xl">
                    <h2 className="flex items-center text-3xl font-bold mb-6 justify-center">
                        <Wrench className="mr-2 text-4xl text-sky-400" />
                        Diaganóstico do veículo!
                    </h2>
                    <form onSubmit={handleSubmit}>
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500">
                                <span>{error}</span>
                                <button
                                    type="button"
                                    className="absolute top-0 right-0 px-4 py-3"
                                    onClick={() => setError(null)}
                                    aria-label="Fechar"
                                >
                                    &times;
                                </button>
                            </div>
                        )}

                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <Calendar className="mr-2 text-sky-400" />
                                Data do Registro:
                            </label>
                            <p className="w-full p-2 rounded bg-slate-700 border border-slate-600">
                                {formattedDate}
                            </p>
                        </div>

                        <div className="mb-4">
                            <label htmlFor="descricaoProblema" className="flex items-center mb-1">
                                <AlertCircle className="mr-2 text-sky-400" />
                                Descrição do Problema:
                            </label>
                            <textarea
                                id="descricaoProblema"
                                rows={4}
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                value={descricaoProblema}
                                onChange={e => setDescricaoProblema(e.target.value)}
                            />
                        </div>

                        <div className="mb-6 text-center">
                            <button
                                type="button"
                                onClick={handleBuscaIa}
                                disabled={isIaLoading}
                                className={`inline-flex items-center px-5 py-2 bg-indigo-600 rounded-md shadow hover:bg-indigo-700 transition ${
                                    isIaLoading ? 'opacity-50' : ''
                                }`}
                            >
                                <Cpu className="mr-2" />
                                {isIaLoading ? 'Buscando na IA...' : 'Buscar Diagnóstico IA'}
                            </button>
                        </div>

                        {diagnosticoIa && (
                            <div className="mb-4 p-4 bg-slate-800 border border-slate-700 rounded">
                                <label className="flex items-center mb-2 text-sky-300 font-semibold">
                                    <Cpu className="mr-2" />
                                    Resultado IA:
                                </label>
                                <pre className="whitespace-pre-wrap">{diagnosticoIa}</pre>
                            </div>
                        )}

                        <div className="mb-4">
                            <label htmlFor="diagnostico" className="flex items-center mb-1">
                                <CheckCircle className="mr-2 text-sky-400" />
                                Diagnóstico Final:
                            </label>
                            <textarea
                                id="diagnostico"
                                rows={4}
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                value={diagnostico}
                                onChange={e => setDiagnostico(e.target.value)}
                            />
                        </div>

                        <div className="mb-4">
                            <label htmlFor="partesAfetadas" className="flex items-center mb-1">
                                <Box className="mr-2 text-sky-400" />
                                Partes Afetadas:
                            </label>
                            <input
                                id="partesAfetadas"
                                type="text"
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                value={partesAfetadas}
                                onChange={e => setPartesAfetadas(e.target.value)}
                            />
                        </div>

                        <div className="mb-4">
                            <label htmlFor="horasTrabalhadas" className="flex items-center mb-1">
                                <Clock className="mr-2 text-sky-400" />
                                Tempo (h):
                            </label>
                            <input
                                id="horasTrabalhadas"
                                type="text"
                                required
                                placeholder="Ex: 2.5"
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                value={horasTrabalhadas}
                                onChange={e => setHorasTrabalhadas(e.target.value)}
                            />
                        </div>

                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        <div className="flex justify-center">
                            <button
                                type="submit"
                                disabled={isSaving}
                                className={`inline-flex items-center px-6 py-3 bg-sky-600 rounded-md shadow hover:bg-sky-700 transition ${
                                    isSaving ? 'opacity-50' : ''
                                }`}
                            >
                                <Save className="mr-2" />
                                {isSaving ? 'Salvando...' : 'Salvar Registro'}
                            </button>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\oficinaOnline\deletar\page.tsx   |   componente ListarOficinaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/oficinaOnline/page.tsx OU app/oficinaOnline/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Para navegação programática se necessário
import NavBar from '@/components/nav-bar'; // Importa sua NavBar

// --- Interfaces para Tipagem (Ajuste conforme sua API) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string;
}
interface OficinaApiResponseDto {
    id: number; dataOficina: string; descricaoProblema: string;
    diagnostico: string; partesAfetadas: string; horasTrabalhadas: string;
}
// ---------------------------------------------------------

export default function ListarOficinaPage() {
    const [oficinas, setOficinas] = useState<OficinaParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // --- Estados para o Modal de Deleção --- // <<< INÍCIO LÓGICA DELETE
    const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    // ----------------------------------------- // <<< FIM LÓGICA DELETE

    const router = useRouter();

    // --- Função para buscar e formatar os registros de oficina ---
    const fetchOficinas = async () => {
        setIsLoading(true); setError(null);
        // Limpa modais ao recarregar
        setShowDeleteConfirmModal(false); setShowDeleteSuccessModal(false); setOficinaParaDeletar(null);
        try {
            const response = await fetch("http://localhost:8080/rest/oficina/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: OficinaApiResponseDto[] = await response.json();
            const oficinasFormatadas: OficinaParaLista[] = data.map(dto => ({
                id: dto.id,
                dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A',
                descricaoProblema: dto.descricaoProblema || 'N/A',
                diagnostico: dto.diagnostico || 'Pendente',
                horasTrabalhadas: dto.horasTrabalhadas || 'N/A',
            }));
            setOficinas(oficinasFormatadas);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados da oficina.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchOficinas(); }, []);

    // --- Funções para o fluxo de deleção com modal --- // <<< INÍCIO LÓGICA DELETE
    const handleDeleteClick = (oficina: OficinaParaLista) => {
        setOficinaParaDeletar(oficina);
        setShowDeleteConfirmModal(true);
        setError(null);
    };

    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        setIsDeleting(true); setError(null);
        const { id } = oficinaParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/oficina/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`);
            }
            setShowDeleteConfirmModal(false);
            setShowDeleteSuccessModal(true); // Mostra modal de sucesso
            setOficinas(prev => prev.filter(o => o.id !== id)); // Remove da lista local
        } catch (err: any) {
            setError(err.message || "Falha ao excluir registro.");
            setShowDeleteConfirmModal(false);
        } finally {
            setIsDeleting(false);
            // Não limpa oficinaParaDeletar aqui para usar no modal de sucesso se precisar
        }
    };

    const cancelDelete = () => {
        setShowDeleteConfirmModal(false);
        setOficinaParaDeletar(null);
    };

    const closeSuccessModal = () => {
        setShowDeleteSuccessModal(false);
        setOficinaParaDeletar(null);
        // Poderia adicionar navegação aqui se quisesse: router.push('/algum-lugar');
    };
    // ---------------------------------------------------- // <<< FIM LÓGICA DELETE

    return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título e botão Cadastrar */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Registros da Oficina Online</h1>
                    <Link href="/oficinaOnline/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Novo Diagnóstico
                        </button>
                    </Link>
                </div>

                {/* Mensagens */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                {/* A mensagem de sucesso agora é o modal */}

                {/* Tabela de Registros */}
                {!isLoading && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Descrição Problema</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Diagnóstico</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {oficinas.length === 0 && !isLoading ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum registro encontrado.</td></tr>
                            ) : (
                                oficinas.map((oficina) => (
                                    <tr key={oficina.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>{oficina.descricaoProblema}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>{oficina.diagnostico}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição */}
                                            {(oficina.id) ? ( <Link href={`/oficinaOnline/alterar/${oficina.id}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}

                                            {/* Botão Deletar */} // <<< INÍCIO LÓGICA DELETE
                                            <button
                                            onClick={() => handleDeleteClick(oficina)} // Chama função para abrir modal
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            disabled={isDeleting || !oficina.id}
                                            >
                                            Deletar
                                        </button>
                                        {/* <<< FIM LÓGICA DELETE */}
                                    </td>
                                </tr>
                                ))
                                )}
                            </tbody>
                        </table>
                    </div>
                    )}
            </main>

            {/* --- Modal de Confirmação de Deleção --- */} // <<< INÍCIO LÓGICA DELETE
            {showDeleteConfirmModal && oficinaParaDeletar && (
            <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}>
                    <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                    <p className="text-white mb-3">Tem certeza que deseja excluir este registro?</p>
                    <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                        <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                        <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                        <p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p>
                    </div>
                    <div className="flex justify-end gap-4">
                        <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>
                            Não, cancelar
                        </button>
                        <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                            {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                        </button>
                    </div>
                </div>
            </div>
            )}

            {/* --- Modal de Sucesso da Deleção --- */}
            {showDeleteSuccessModal && (
            <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                    <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                    <p className="text-white mb-6 text-center">Registro de oficina excluído.</p>
                    <div className="flex justify-center">
                        <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>
                            OK
                        </button>
                    </div>
                </div>
            </div>
            )}
            {/* <<< FIM LÓGICA DELETE */}
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\oficinaOnline\listar\page.tsx   |   componente ListarOficinaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: app/oficinaOnline/listar/page.tsx (COM ORDENAÇÃO POR ID ASCENDENTE) ---
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
// import { useRouter } from 'next/navigation'; // Removido se não usar
import NavBar from '@/components/nav-bar';
import { // Ícones
    Hash, Calendar, FileText, CheckCircle, Edit3, Trash2, ClipboardList, Stethoscope
} from 'lucide-react';
import { MdErrorOutline } from 'react-icons/md'; // Para erro

// --- Interfaces (sem alterações) ---
interface OficinaParaLista { id: number; dataOficina: string; descricaoProblema: string; diagnostico: string; horasTrabalhadas: string; }
interface OficinaApiResponseDto { id: number; dataOficina: string; descricaoProblema: string | null; diagnostico: string | null; partesAfetadas: string | null; horasTrabalhadas: string | null; }
// ------------------------------------

export default function ListarOficinaPage() {
    console.log("[Render] ListarOficinaPage - Iniciando renderização.");

    const [oficinas, setOficinas] = useState<OficinaParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // Estados e Funções do Modal (sem alterações)
    const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);

    // const router = useRouter();

    const fetchOficinas = async () => {
        console.log("[Fetch] Iniciando fetchOficinas...");
        setIsLoading(true); setError(null);
        setShowDeleteConfirmModal(false); setShowDeleteSuccessModal(false); setOficinaParaDeletar(null);

        const apiUrl = "http://localhost:8080/rest/oficina/all";
        console.log(`[Fetch] Buscando dados de: ${apiUrl}`);

        try {
            const response = await fetch(apiUrl);
            console.log(`[Fetch] Status: ${response.status}`);
            if (!response.ok) { let errorBody = ''; try { errorBody = await response.text(); } catch {} throw new Error(`Erro HTTP ${response.status}: ${response.statusText}. ${errorBody}`); }

            if (response.status === 204) {
                setOficinas([]);
            } else {
                const data = await response.json() as OficinaApiResponseDto[];
                if (!Array.isArray(data)) { throw new Error("Formato de resposta inválido."); }

                // <<< ORDENAÇÃO ALTERADA PARA ASCENDENTE (a.id - b.id) >>>
                data.sort((a, b) => a.id - b.id);

                const formatted = data.map(dto => ({
                    id: dto.id,
                    dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                    descricaoProblema: dto.descricaoProblema || '',
                    diagnostico: dto.diagnostico || 'Pendente',
                    horasTrabalhadas: dto.horasTrabalhadas || '',
                }));
                setOficinas(formatted);
            }
        } catch (err: any) { console.error("[Fetch] Erro:", err); setError(err.message || "Falha ao carregar registros."); setOficinas([]); // Garante vazio no erro
        } finally { setIsLoading(false); }
    };

    useEffect(() => {
        fetchOficinas();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // Roda só na montagem

    // Funções do Modal (sem alterações)
    const handleDeleteClick = (oficina: OficinaParaLista) => { setOficinaParaDeletar(oficina); setShowDeleteConfirmModal(true); setError(null); };
    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        const { id } = oficinaParaDeletar;
        setIsDeleting(true); setError(null);
        try {
            const deleteUrl = `http://localhost:8080/rest/oficina/${id}`;
            const response = await fetch(deleteUrl, { method: 'DELETE' });
            if (!response.ok) { const errText = await response.text().catch(() => response.statusText); throw new Error(`Erro ao deletar: ${errText}`); }
            setShowDeleteConfirmModal(false); setShowDeleteSuccessModal(true);
            setOficinas(prev => prev.filter(o => o.id !== id)); // Remove da lista local
        } catch (err: any) { console.error("[Delete] Erro:", err); setError(err.message || "Falha ao excluir registro."); setShowDeleteConfirmModal(false);
        } finally { setIsDeleting(false); }
    };
    const cancelDelete = () => { setShowDeleteConfirmModal(false); setOficinaParaDeletar(null); };
    const closeSuccessModal = () => { setShowDeleteSuccessModal(false); setOficinaParaDeletar(null); };
    // ------------------------------------------

    // Helper para formatar data
    const formatarData = (dataString: string | null | undefined): string => {
        if (!dataString || dataString === 'N/A') return '-'; // Ajuste para tratar 'N/A' também
        try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { console.error("Erro formatar data:", dataString, e); return 'Inválida'; }
    };


    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-[calc(100vh-80px)] text-white">
                {/* Cabeçalho */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center text-2xl md:text-3xl font-bold text-center sm:text-left gap-2"> <FileText className="text-3xl text-sky-400" /> Registros da Oficina </h1>
                    <Link href="/oficinaOnline/cadastrar"> <button className="flex items-center px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow whitespace-nowrap gap-2"> <CheckCircle /> Novo Diagnóstico </button> </Link>
                </div>

                {/* Mensagens de Loading e Erro */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando registros...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded-md border border-red-500 max-w-3xl mx-auto flex items-center gap-2"> <MdErrorOutline/> <span>{error}</span> <button type="button" className="absolute top-1 right-1 p-2 leading-none" onClick={() => setError(null)}>&times;</button> </div> )}

                {/* <<< AREA PRINCIPAL COM CARDS >>> */}
                {!isLoading && !error && (
                    <div>
                        {oficinas.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum registro encontrado.</p>
                        ) : (
                            // Grid Layout para os Cards
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {/* Mapeia os registros JÁ ORDENADOS */}
                                {oficinas.map((oficina) => (
                                    <div key={oficina.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                        {/* Header do Card */}
                                        <div className="bg-slate-700 p-3 flex justify-between items-center text-sm"> <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {oficina.id} </span> <span className="flex items-center gap-1 text-slate-400"> <Calendar size={16} /> {formatarData(oficina.dataOficina)} </span> </div>
                                        {/* Corpo do Card */}
                                        <div className="p-4 space-y-3 flex-grow">
                                            <div> <h3 className="flex items-center text-base font-semibold mb-1 text-slate-200 gap-1"> <ClipboardList size={18} className="text-amber-400"/> Problema Descrito </h3> <p className="text-sm text-slate-300 break-words max-h-24 overflow-y-auto pr-1"> {oficina.descricaoProblema || '-'} </p> </div>
                                            <div> <h3 className="flex items-center text-base font-semibold mb-1 text-slate-200 gap-1"> <Stethoscope size={18} className="text-teal-400"/> Diagnóstico </h3> <p className="text-sm text-slate-300 break-words max-h-32 overflow-y-auto pr-1"> {oficina.diagnostico} </p> </div>
                                        </div>
                                        {/* Footer do Card (Ações) */}
                                        <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                            <Link href={`/oficinaOnline/alterar/${oficina.id}`}> <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1" disabled={isDeleting}> <Edit3 size={14} /> Editar </button> </Link>
                                            <button onClick={() => handleDeleteClick(oficina)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1" disabled={isDeleting}> <Trash2 size={14} /> Deletar </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< FIM DA AREA PRINCIPAL >>> */}
            </main>

            {/* Modais */}
            {showDeleteConfirmModal && oficinaParaDeletar && ( /* ... código do modal de confirmação ... */ <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}> <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={e => e.stopPropagation()}> <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3> <p className="text-white mb-3">Tem certeza que deseja excluir o registro?</p> <div className="text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3"> <p><strong>ID:</strong> {oficinaParaDeletar.id}</p> <p><strong>Data:</strong> {formatarData(oficinaParaDeletar.dataOficina)}</p> </div> <div className="flex justify-end gap-4"> <button onClick={cancelDelete} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-md" disabled={isDeleting}>Não</button> <button onClick={confirmDelete} className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isDeleting}> {isDeleting ? 'Excluindo...' : 'Sim, excluir'} </button> </div> </div> </div> )}
            {showDeleteSuccessModal && ( /* ... código do modal de sucesso ... */ <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}> <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={e => e.stopPropagation()}> <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3> <p className="text-white mb-6 text-center">Registro excluído.</p> <div className="flex justify-center"> <button onClick={closeSuccessModal} className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md"> OK </button> </div> </div> </div> )}
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\orcamento\alterar\[id]\page.tsx   |   componente AlterarOrcamentoComServicoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/orcamento/alterar/[id]/page.tsx
"use client";

import React, { useState, useEffect, FormEvent, useMemo } from 'react';
import Link from 'next/link';
import { useParams, useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
import {
    MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle,
    MdCalendarToday, MdAddCircleOutline, MdDelete
} from 'react-icons/md';
import { FileText, Settings, PackagePlus, Trash2, DollarSign, Clock, HardHat, Tag, Info, Wrench, MessageSquare, ScanSearch, UserCircle, Loader2, AlertCircle } from 'lucide-react';

// --- Interfaces ---
interface ItemPecaForm {
    idOficinaPeca?: number; // ID da OficinaPeca, útil para atualizações/deleções no backend
    pecaId: string;
    descricaoPeca?: string;
    quantidade: number;
    precoUnitario?: number; // Preço no momento do orçamento, vindo do GET
    subtotal?: number;
}

interface PecaDisponivel {
    id: number;
    descricao: string;
    preco: number;
    fabricante?: string;
}

interface OrcamentoFormData {
    // Oficina
    oficinaId?: number; // ID da Oficina associada
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadasOficina: string;
    pecasUtilizadas: ItemPecaForm[];

    // Orçamento
    dataOrcamento: string;
    valorMaoDeObraAdicional: string;
    valorHoraOrcamento: string;
    quantidadeHorasOrcamento: number;

    // Associações
    clienteId: string;
    clienteEnderecoId: string;
    veiculoId: string;
}

// DTO para a resposta do GET /rest/orcamentos/completo/{id}
interface ItemPecaResponse {
    idOficinaPeca?: number; // ID da entidade de junção OficinaPeca
    pecaId: number;
    descricaoPeca: string;
    fabricantePeca?: string;
    quantidade: number;
    precoUnitarioNaEpoca: number;
    subtotal: number;
}
interface OficinaParaOrcamentoResponseDto {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadasOficina: string;
    pecasUtilizadas: ItemPecaResponse[];
    veiculoId?: number | null;
}
interface OrcamentoComServicoResponseDto {
    id: number; // ID do Orcamento
    dataOrcamento: string;
    valorMaoDeObraAdicional: number;
    valorHoraOrcamento: number;
    quantidadeHorasOrcamento: number;
    valorTotal: number; // Valor total calculado do orçamento
    oficina: OficinaParaOrcamentoResponseDto;
    clienteId?: number | null;
    clienteEnderecoId?: number | null;
}


export default function AlterarOrcamentoComServicoPage() {
    const router = useRouter();
    const params = useParams();
    const orcamentoId = params.id as string;

    const today = new Date().toISOString().split('T')[0];
    const initialState: OrcamentoFormData = {
        dataOficina: today, descricaoProblema: "", diagnostico: "", partesAfetadas: "",
        horasTrabalhadasOficina: "0.0", pecasUtilizadas: [], dataOrcamento: today,
        valorMaoDeObraAdicional: "0.00", valorHoraOrcamento: "0.00", quantidadeHorasOrcamento: 0,
        clienteId: "", clienteEnderecoId: "", veiculoId: ""
    };

    const [formData, setFormData] = useState<OrcamentoFormData>(initialState);
    const [pecasDisponiveis, setPecasDisponiveis] = useState<PecaDisponivel[]>([]);
    const [isFetchingData, setIsFetchingData] = useState(true);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [isPecasLoading, setIsPecasLoading] = useState(true);

    const parseInputCurrencyToNumber = (inputValue: string): number => parseFloat(inputValue.replace(/\./g, '').replace(',', '.')) || 0;
    const formatNumberToCurrencyString = (value: number | undefined | null): string => (value === null || value === undefined || isNaN(value)) ? '0,00' : value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    const formatDateForInput = (dateString: string | undefined | null): string => {
        if (!dateString) return '';
        // Tenta converter formatos comuns de data que podem vir do backend
        try { return new Date(dateString).toISOString().split('T')[0]; }
        catch { return ''; }
    };

    useEffect(() => {
        if (!orcamentoId) {
            setError("ID do Orçamento não fornecido na URL.");
            setIsFetchingData(false);
            return;
        }

        const fetchOrcamentoData = async () => {
            setIsFetchingData(true);
            setError(null);
            try {
                const response = await fetch(`http://localhost:8080/rest/orcamentos/completo/${orcamentoId}`);
                if (!response.ok) {
                    const errData = await response.json().catch(() => ({message: `Erro ${response.status} ao buscar orçamento.`}));
                    throw new Error(errData.message || `Falha ao buscar dados do orçamento (ID: ${orcamentoId})`);
                }
                const data: OrcamentoComServicoResponseDto = await response.json();

                setFormData({
                    oficinaId: data.oficina.id,
                    dataOficina: formatDateForInput(data.oficina.dataOficina),
                    descricaoProblema: data.oficina.descricaoProblema,
                    diagnostico: data.oficina.diagnostico || "",
                    partesAfetadas: data.oficina.partesAfetadas,
                    horasTrabalhadasOficina: data.oficina.horasTrabalhadasOficina,
                    pecasUtilizadas: data.oficina.pecasUtilizadas.map(p => ({
                        idOficinaPeca: p.idOficinaPeca, // ID da OficinaPeca para identificar no update
                        pecaId: p.pecaId.toString(),
                        descricaoPeca: p.descricaoPeca,
                        quantidade: p.quantidade,
                        precoUnitario: p.precoUnitarioNaEpoca,
                        subtotal: (p.precoUnitarioNaEpoca || 0) * p.quantidade
                    })),
                    dataOrcamento: formatDateForInput(data.dataOrcamento),
                    valorMaoDeObraAdicional: formatNumberToCurrencyString(data.valorMaoDeObraAdicional),
                    valorHoraOrcamento: formatNumberToCurrencyString(data.valorHoraOrcamento),
                    quantidadeHorasOrcamento: data.quantidadeHorasOrcamento,
                    clienteId: data.clienteId?.toString() || "",
                    clienteEnderecoId: data.clienteEnderecoId?.toString() || "",
                    veiculoId: data.oficina.veiculoId?.toString() || ""
                });
            } catch (err: any) {
                setError(`Erro ao carregar dados do orçamento: ${err.message}`);
                console.error("Erro fetchOrcamentoData:", err);
            } finally {
                setIsFetchingData(false);
            }
        };

        const fetchPecas = async () => {
            setIsPecasLoading(true);
            try {
                const response = await fetch('http://localhost:8080/rest/pecas/all');
                if (!response.ok) throw new Error('Falha ao buscar peças para seleção');
                const dataPecas: PecaDisponivel[] = await response.json();
                setPecasDisponiveis(dataPecas);
            } catch (err: any) {
                console.error("Erro ao buscar peças:", err);
            } finally {
                setIsPecasLoading(false);
            }
        };

        fetchPecas();
        fetchOrcamentoData();
    }, [orcamentoId]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleAddPeca = () => {
        setFormData(prev => ({ ...prev, pecasUtilizadas: [...prev.pecasUtilizadas, { pecaId: "", quantidade: 1, descricaoPeca: "Selecione...", precoUnitario: 0, subtotal: 0 }]}));
    };

    const handlePecaItemChange = (index: number, field: keyof ItemPecaForm, value: string) => {
        const novasPecas = [...formData.pecasUtilizadas];
        const itemAtual = { ...novasPecas[index] };
        if (field === 'pecaId') {
            const pecaSelecionada = pecasDisponiveis.find(p => p.id.toString() === value);
            itemAtual.pecaId = value;
            itemAtual.descricaoPeca = pecaSelecionada?.descricao || "Peça inválida";
            itemAtual.precoUnitario = pecaSelecionada?.preco || 0; // Usa o preço atual da peça para novas adições ou alterações
        } else if (field === 'quantidade') {
            itemAtual.quantidade = Math.max(1, parseInt(value, 10) || 1);
        }
        itemAtual.subtotal = (itemAtual.precoUnitario || 0) * itemAtual.quantidade;
        novasPecas[index] = itemAtual;
        setFormData(prev => ({ ...prev, pecasUtilizadas: novasPecas }));
    };
    const handleRemovePeca = (index: number) => {
        setFormData(prev => ({...prev, pecasUtilizadas: prev.pecasUtilizadas.filter((_, i) => i !== index)}));
    };

    const { totalCustoPecas, totalMaoDeObraOrcamento, valorTotalOrcamento } = useMemo(() => {
        const custoPecas = formData.pecasUtilizadas.reduce((sum, item) => sum + (item.subtotal || 0), 0);
        const maoDeObraAdicional = parseInputCurrencyToNumber(formData.valorMaoDeObraAdicional);
        const valorHora = parseInputCurrencyToNumber(formData.valorHoraOrcamento);
        const qtdHoras = Number(formData.quantidadeHorasOrcamento) || 0;
        const custoMaoDeObraHoras = valorHora * qtdHoras;
        const totalMaoObra = maoDeObraAdicional + custoMaoDeObraHoras;
        return { totalCustoPecas: custoPecas, totalMaoDeObraOrcamento: totalMaoObra, valorTotalOrcamento: custoPecas + totalMaoObra };
    }, [formData.pecasUtilizadas, formData.valorMaoDeObraAdicional, formData.valorHoraOrcamento, formData.quantidadeHorasOrcamento]);

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true); setError(null); setSuccess(null);

        const pecasParaEnvio = formData.pecasUtilizadas
            .filter(p => p.pecaId && !isNaN(parseInt(p.pecaId, 10)))
            .map(p => ({
                idOficinaPeca: p.idOficinaPeca, // Enviar o ID da OficinaPeca para o backend saber se é para atualizar ou criar novo
                pecaId: parseInt(p.pecaId, 10),
                quantidade: p.quantidade
            }));

        const payload = {
            // Dados da Oficina
            dataOficina: formData.dataOficina,
            descricaoProblema: formData.descricaoProblema,
            diagnostico: formData.diagnostico,
            partesAfetadas: formData.partesAfetadas,
            horasTrabalhadasOficina: formData.horasTrabalhadasOficina,
            pecasUtilizadas: pecasParaEnvio,

            // Dados do Orçamento
            dataOrcamento: formData.dataOrcamento,
            valorMaoDeObraAdicional: parseInputCurrencyToNumber(formData.valorMaoDeObraAdicional),
            valorHoraOrcamento: parseInputCurrencyToNumber(formData.valorHoraOrcamento),
            quantidadeHorasOrcamento: Number(formData.quantidadeHorasOrcamento),

            // Associações
            clienteId: formData.clienteId ? parseInt(formData.clienteId, 10) : null,
            clienteEnderecoId: formData.clienteEnderecoId ? parseInt(formData.clienteEnderecoId, 10) : null,
            veiculoId: formData.veiculoId ? parseInt(formData.veiculoId, 10) : null,

            // Para o PUT, o oficinaExistenteId é o ID da oficina que estamos editando
            oficinaExistenteId: formData.oficinaId
        };

        if (payload.clienteId === null || isNaN(payload.clienteId)) delete (payload as any).clienteId;
        if (payload.clienteEnderecoId === null || isNaN(payload.clienteEnderecoId)) delete (payload as any).clienteEnderecoId;
        if (payload.veiculoId === null || isNaN(payload.veiculoId)) delete (payload as any).veiculoId;

        console.log("Enviando payload para ATUALIZAR Orçamento:", JSON.stringify(payload, null, 2));

        try {
            const response = await fetch(`http://localhost:8080/rest/orcamentos/completo/${orcamentoId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            setSuccess(`Orçamento ID ${orcamentoId} atualizado com sucesso!`);
            // Opcional: Recarregar os dados após o sucesso para refletir quaisquer mudanças feitas pelo backend (ex: IDs de novas OficinaPeca)
            // fetchOrcamentoData(); // Se o backend retornar o objeto atualizado, pode apenas atualizar o estado com ele.
            setTimeout(() => setSuccess(null), 5000);

        } catch (err: any) {
            setError(err.message || "Falha ao atualizar orçamento e serviço.");
            console.error("Erro no fetch PUT:", err);
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetchingData) {
        return ( /* ... JSX de Loading ... */
            <>
                <NavBar active="orcamento-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados do orçamento...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !formData.oficinaId && !isFetchingData) { // Erro grave ao carregar dados iniciais
        return ( /* ... JSX de Erro Grave ... */
            <>
                <NavBar active="orcamento-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl text-center w-full max-w-lg">
                        <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4"/>
                        <h2 className="text-xl font-semibold text-red-400 mb-3">Erro ao Carregar Dados</h2>
                        <p className="text-slate-300 mb-6">{error}</p>
                        <Link href="/orcamento/listar">
                            <button className="px-6 py-2 bg-sky-600 hover:bg-sky-700 rounded-md text-white font-semibold">Voltar para Lista</button>
                        </Link>
                    </div>
                </main>
            </>
        );
    }

    // Formulário JSX (idêntico ao de cadastro, apenas com títulos e botões diferentes)
    return (
        <>
            <NavBar active="orcamento-alterar" />
            <main className="container mx-auto px-4 py-10 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <FileText size={30} className="text-sky-400" />
                        Alterar Orçamento e Serviço (Orçam. ID: {orcamentoId})
                    </h1>

                    {error && !isFetchingData && (
                        <div className="relative mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 mb-6 rounded bg-green-900/30 border border-green-700">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-8">
                        {/* Seção Detalhes do Serviço (Oficina) */}
                        <fieldset className="border border-slate-700 p-4 md:p-6 rounded-lg">
                            <legend className="text-xl font-semibold px-2 text-sky-300 flex items-center gap-2"><Wrench size={22}/> Detalhes do Serviço (Oficina ID: {formData.oficinaId || 'N/A'})</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 mt-4">
                                <div>
                                    <label htmlFor="dataOficina" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdCalendarToday size={16}/> Data do Serviço:</label>
                                    <input type="date" name="dataOficina" id="dataOficina" value={formData.dataOficina} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 date-input-fix"/>
                                </div>
                                <div>
                                    <label htmlFor="horasTrabalhadasOficina" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Clock size={16}/> Horas Trabalhadas (Serviço):</label>
                                    <input type="text" name="horasTrabalhadasOficina" id="horasTrabalhadasOficina" value={formData.horasTrabalhadasOficina} onChange={handleChange} required placeholder="Ex: 2.5" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                                <div className="md:col-span-2">
                                    <label htmlFor="descricaoProblema" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MessageSquare size={16}/> Descrição do Problema:</label>
                                    <textarea name="descricaoProblema" id="descricaoProblema" value={formData.descricaoProblema} onChange={handleChange} rows={3} required className="w-full p-2 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                                <div className="md:col-span-2">
                                    <label htmlFor="diagnostico" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><ScanSearch size={16}/> Diagnóstico:</label>
                                    <textarea name="diagnostico" id="diagnostico" value={formData.diagnostico} onChange={handleChange} rows={3} className="w-full p-2 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                                <div className="md:col-span-2">
                                    <label htmlFor="partesAfetadas" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Settings size={16}/> Partes Afetadas:</label>
                                    <input type="text" name="partesAfetadas" id="partesAfetadas" value={formData.partesAfetadas} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                            </div>
                        </fieldset>

                        {/* Seção Peças Utilizadas */}
                        <fieldset className="border border-slate-700 p-4 md:p-6 rounded-lg">
                            <legend className="text-xl font-semibold px-2 text-sky-300 flex items-center gap-2"><PackagePlus size={22}/> Peças Utilizadas no Serviço</legend>
                            {isPecasLoading && <p className="text-slate-400 text-sm mt-4">Carregando lista de peças...</p>}

                            {formData.pecasUtilizadas.map((item, index) => (
                                <div key={index} className="grid grid-cols-1 sm:grid-cols-[2fr_100px_120px_120px_auto] gap-3 items-end border-b border-slate-800 py-3 last:border-b-0">
                                    <div>
                                        <label htmlFor={`pecaId-${index}`} className="block text-xs font-medium text-slate-400 mb-1">Peça:</label>
                                        <select
                                            name={`pecaId-${index}`}
                                            id={`pecaId-${index}`}
                                            value={item.pecaId}
                                            onChange={(e) => handlePecaItemChange(index, 'pecaId', e.target.value)}
                                            required
                                            className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 text-sm"
                                            disabled={isPecasLoading}
                                        >
                                            <option value="" disabled>{isPecasLoading ? "Carregando..." : "Selecione..."}</option>
                                            {pecasDisponiveis.map(p => (
                                                <option key={p.id} value={p.id.toString()}>{p.descricao} ({p.fabricante}) - {formatNumberToCurrencyString(p.preco)}</option>
                                            ))}
                                        </select>
                                    </div>
                                    <div>
                                        <label htmlFor={`quantidade-${index}`} className="block text-xs font-medium text-slate-400 mb-1">Qtd.:</label>
                                        <input
                                            type="number"
                                            name={`quantidade-${index}`}
                                            id={`quantidade-${index}`}
                                            value={item.quantidade}
                                            onChange={(e) => handlePecaItemChange(index, 'quantidade', e.target.value)}
                                            min="1" required
                                            className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 text-sm"/>
                                    </div>
                                    <div className="text-sm">
                                        <span className="block text-xs text-slate-400 mb-1">Preço Unit.:</span>
                                        <span className="block p-2 h-10 leading-tight flex items-center bg-slate-800 rounded border border-slate-700">
                                            {formatNumberToCurrencyString(item.precoUnitario)}
                                        </span>
                                    </div>
                                    <div className="text-sm">
                                        <span className="block text-xs text-slate-400 mb-1">Subtotal:</span>
                                        <span className="block p-2 h-10 leading-tight flex items-center bg-slate-800 rounded border border-slate-700 font-semibold">
                                            {formatNumberToCurrencyString(item.subtotal)}
                                        </span>
                                    </div>
                                    <button type="button" onClick={() => handleRemovePeca(index)} className="p-2 h-10 bg-red-600 hover:bg-red-700 rounded text-white flex items-center justify-center" title="Remover Peça">
                                        <Trash2 size={18}/>
                                    </button>
                                </div>
                            ))}
                            <button type="button" onClick={handleAddPeca} disabled={isPecasLoading || pecasDisponiveis.length === 0} className={`mt-4 flex items-center gap-2 px-4 py-2 text-sm bg-blue-600 hover:bg-blue-700 rounded-md ${isPecasLoading || pecasDisponiveis.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}>
                                <MdAddCircleOutline size={18}/> Adicionar Peça
                            </button>
                            <div className="text-right mt-4 font-semibold text-lg">
                                Custo Total das Peças: <span className="text-green-400">{formatNumberToCurrencyString(totalCustoPecas)}</span>
                            </div>
                        </fieldset>

                        {/* Seção Detalhes da Mão de Obra (Orçamento) */}
                        <fieldset className="border border-slate-700 p-4 md:p-6 rounded-lg">
                            <legend className="text-xl font-semibold px-2 text-sky-300 flex items-center gap-2"><HardHat size={22}/> Mão de Obra (Orçamento)</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 mt-4">
                                <div>
                                    <label htmlFor="dataOrcamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdCalendarToday size={16}/> Data Orçamento:</label>
                                    <input type="date" name="dataOrcamento" id="dataOrcamento" value={formData.dataOrcamento} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 date-input-fix"/>
                                </div>
                                <div>
                                    <label htmlFor="valorMaoDeObraAdicional" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Tag size={16}/> Taxa M.O. Adicional (R$):</label>
                                    <input type="text" name="valorMaoDeObraAdicional" id="valorMaoDeObraAdicional" value={formData.valorMaoDeObraAdicional} onChange={handleChange} placeholder="0,00" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                                <div>
                                    <label htmlFor="valorHoraOrcamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><DollarSign size={16}/> Valor/Hora Orçam. (R$):</label>
                                    <input type="text" name="valorHoraOrcamento" id="valorHoraOrcamento" value={formData.valorHoraOrcamento} onChange={handleChange} required placeholder="0,00" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                                <div>
                                    <label htmlFor="quantidadeHorasOrcamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Clock size={16}/> Qtd. Horas Orçam.:</label>
                                    <input type="number" name="quantidadeHorasOrcamento" id="quantidadeHorasOrcamento" value={formData.quantidadeHorasOrcamento} onChange={handleChange} min="0" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                                <div className="md:col-span-2 lg:col-span-3 text-right mt-2 font-semibold text-lg">
                                    Custo Total Mão de Obra (Orç.): <span className="text-yellow-400">{formatNumberToCurrencyString(totalMaoDeObraOrcamento)}</span>
                                </div>
                            </div>
                        </fieldset>

                        {/* Seção Associações */}
                        <fieldset className="border border-slate-700 p-4 md:p-6 rounded-lg">
                            <legend className="text-xl font-semibold px-2 text-sky-300 flex items-center gap-2"><UserCircle size={22}/> Associações (Opcional)</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 mt-4">
                                <div>
                                    <label htmlFor="clienteId" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdPerson size={18}/> ID Cliente:</label>
                                    <input type="text" name="clienteId" id="clienteId" value={formData.clienteId} onChange={handleChange} placeholder="ID numérico do Cliente" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                                <div>
                                    <label htmlFor="clienteEnderecoId" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Info size={18}/> ID Endereço Cliente:</label>
                                    <input type="text" name="clienteEnderecoId" id="clienteEnderecoId" value={formData.clienteEnderecoId} onChange={handleChange} placeholder="ID do Endereço do Cliente" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                                <div className="md:col-span-2">
                                    <label htmlFor="veiculoId" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdDirectionsCar size={18}/> ID Veículo:</label>
                                    <input type="text" name="veiculoId" id="veiculoId" value={formData.veiculoId} onChange={handleChange} placeholder="ID numérico do Veículo" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700"/>
                                </div>
                            </div>
                        </fieldset>

                        <div className="mt-8 p-4 bg-slate-800 rounded-lg text-center">
                            <h3 className="text-2xl font-bold text-sky-300">
                                VALOR TOTAL DO ORÇAMENTO:
                                <span className="ml-2 text-green-400">{formatNumberToCurrencyString(valorTotalOrcamento)}</span>
                            </h3>
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-6">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 w-full sm:w-auto px-8 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading || isFetchingData ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading || isFetchingData}
                            >
                                <MdSave size={20}/> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/orcamento/listar" className="w-full sm:w-auto">
                                <button type="button" className="flex items-center justify-center gap-2 w-full px-8 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center">
                                    <MdArrowBack size={20}/> Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\orcamento\buscar\page.tsx   |   componente BuscarOrcamentosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/orcamento/buscar/page.tsx
"use client";

import React, { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdSearch, MdFilterList, MdEdit, MdDelete, MdErrorOutline, MdCalendarToday,
    MdAttachMoney, MdArrowBack, MdPerson, MdDirectionsCar
} from 'react-icons/md';
import { FileText, Hash, CalendarDays, DollarSign, Edit3, Trash2, ListChecks, Loader2, AlertCircle, Search as SearchIcon } from 'lucide-react';

interface OrcamentoListDto {
    id: number;
    dataOrcamento: string;
    valorMaoDeObra: number;
    valorHora: number;
    quantidadeHoras: number;
    valorTotal: number;
    // clienteNome?: string;
    // veiculoPlaca?: string;
}

export default function BuscarOrcamentosPage() {
    const [resultadosBusca, setResultadosBusca] = useState<OrcamentoListDto[]>([]);
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    const [filtroDataInicio, setFiltroDataInicio] = useState('');
    const [filtroDataFim, setFiltroDataFim] = useState('');
    const [filtroClienteNome, setFiltroClienteNome] = useState('');
    const [filtroVeiculoPlaca, setFiltroVeiculoPlaca] = useState('');

    const formatCurrency = (value: number | null | undefined): string => { if (value === null || value === undefined) return 'R$ 0,00'; return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); };
    const formatDate = (dateString: string | null | undefined): string => { if (!dateString) return 'N/A'; try { return new Date(dateString.includes('T') ? dateString : dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { return dateString; }};

    const handleSearch = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsSearching(true);
        setBuscaRealizada(true);
        setError(null);
        setResultadosBusca([]);

        try {
            const queryParams = new URLSearchParams();
            if (filtroDataInicio) queryParams.append('dataInicio', filtroDataInicio);
            if (filtroDataFim) queryParams.append('dataFim', filtroDataFim);
            if (filtroClienteNome) queryParams.append('clienteNome', filtroClienteNome);
            if (filtroVeiculoPlaca) queryParams.append('veiculoPlaca', filtroVeiculoPlaca);

            // Endpoint de busca no backend - PRECISA SER IMPLEMENTADO NO SEU BACKEND JAVA
            // Exemplo: /rest/orcamentos/buscar?dataInicio=...&clienteNome=...
            const response = await fetch(`http://localhost:8080/rest/orcamentos/buscar/filtrado?${queryParams.toString()}`);

            if (!response.ok) {
                if (response.status === 204) {
                    setResultadosBusca([]); // Nenhum resultado, mas não um erro
                    return;
                }
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}` }));
                throw new Error(errorData.message || `Falha ao buscar orçamentos`);
            }
            const data: OrcamentoListDto[] = await response.json();
            data.sort((a,b) => b.id - a.id);
            setResultadosBusca(data);
        } catch (err: any) {
            setError(err.message || "Erro ao buscar orçamentos. Verifique o console e a API.");
            console.error("Erro na busca de orçamentos:", err);
            setResultadosBusca([]);
        } finally {
            setIsSearching(false);
        }
    };

    const handleDelete = async (id: number) => {
        // Reutilizar o modal da página de listagem seria o ideal aqui
        if (!window.confirm(`Tem certeza que deseja excluir o orçamento ID ${id}? Esta ação não pode ser desfeita.`)) return;
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/orcamentos/${id}`, { method: 'DELETE' });
            if (!response.ok && response.status !== 204) throw new Error('Falha ao excluir');
            alert('Orçamento excluído com sucesso!');
            setResultadosBusca(prev => prev.filter(o => o.id !== id));
        } catch (err: any) {
            setError(err.message || 'Erro ao excluir orçamento.');
        }
    };

    return (
        <>
            <NavBar active="orcamento-buscar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center gap-2 text-3xl font-bold mb-6 text-center">
                    <SearchIcon size={30} className="text-sky-400" /> Buscar Orçamentos
                </h1>

                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg max-w-3xl mx-auto">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 items-end">
                        <div>
                            <label htmlFor="filtroDataInicio" className="flex items-center gap-1 block text-sm font-medium text-slate-300 mb-1"><MdCalendarToday size={16}/> Data Início:</label>
                            <input type="date" id="filtroDataInicio" value={filtroDataInicio} onChange={e => setFiltroDataInicio(e.target.value)} className="w-full h-10 px-3 py-2 bg-slate-700 border border-slate-600 rounded-md date-input-fix"/>
                        </div>
                        <div>
                            <label htmlFor="filtroDataFim" className="flex items-center gap-1 block text-sm font-medium text-slate-300 mb-1"><MdCalendarToday size={16}/> Data Fim:</label>
                            <input type="date" id="filtroDataFim" value={filtroDataFim} onChange={e => setFiltroDataFim(e.target.value)} className="w-full h-10 px-3 py-2 bg-slate-700 border border-slate-600 rounded-md date-input-fix"/>
                        </div>
                        <div>
                            <label htmlFor="filtroClienteNome" className="flex items-center gap-1 block text-sm font-medium text-slate-300 mb-1"><MdPerson size={18}/> Nome do Cliente:</label>
                            <input type="text" id="filtroClienteNome" value={filtroClienteNome} onChange={e => setFiltroClienteNome(e.target.value)} placeholder="Parte do nome" className="w-full h-10 px-3 py-2 bg-slate-700 border border-slate-600 rounded-md"/>
                        </div>
                        <div>
                            <label htmlFor="filtroVeiculoPlaca" className="flex items-center gap-1 block text-sm font-medium text-slate-300 mb-1"><MdDirectionsCar size={18}/> Placa do Veículo:</label>
                            <input type="text" id="filtroVeiculoPlaca" value={filtroVeiculoPlaca} onChange={e => setFiltroVeiculoPlaca(e.target.value)} placeholder="AAA0X00" className="w-full h-10 px-3 py-2 bg-slate-700 border border-slate-600 rounded-md"/>
                        </div>
                        <div className="md:col-span-2 flex justify-end pt-4">
                            <button type="submit" disabled={isSearching} className={`h-10 px-6 py-2 font-semibold rounded-md shadow flex items-center justify-center gap-2 ${isSearching ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}>
                                <MdSearch size={20}/> {isSearching ? 'Buscando...' : 'Buscar Orçamentos'}
                            </button>
                        </div>
                    </div>
                </form>

                {isSearching && (
                    <div className="flex justify-center items-center py-10">
                        <Loader2 className="h-8 w-8 animate-spin text-sky-400" />
                        <span className="ml-3 text-sky-300">Buscando orçamentos...</span>
                    </div>
                )}
                {error && (
                    <div className="text-center text-red-400 py-4 bg-red-900/30 border border-red-700 rounded-md p-3 max-w-2xl mx-auto my-6">
                        <p className="flex items-center justify-center gap-1"><AlertCircle size={20}/> {error}</p>
                    </div>
                )}

                {buscaRealizada && !isSearching && !error && resultadosBusca.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-800/50 rounded-lg shadow-xl">Nenhum orçamento encontrado para os critérios informados.</p>
                )}

                {resultadosBusca.length > 0 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mt-8">
                        {resultadosBusca.map((orc) => (
                            <div key={orc.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                    <span className="flex items-center gap-1 font-semibold text-sky-300"><Hash size={16} /> ID: {orc.id}</span>
                                    <span className="flex items-center gap-1 text-slate-400"><CalendarDays size={16} /> {formatDate(orc.dataOrcamento)}</span>
                                </div>
                                <div className="p-4 space-y-3 flex-grow">
                                    <div>
                                        <h3 className="flex items-center text-2xl font-bold text-green-400 gap-1">{formatCurrency(orc.valorTotal)}</h3>
                                        <p className="text-xs text-slate-400">Valor Total</p>
                                    </div>
                                    {/* <p className="text-sm text-slate-300">Cliente: {orc.clienteNome || 'N/A'}</p> */}
                                    {/* <p className="text-sm text-slate-300">Veículo: {orc.veiculoPlaca || 'N/A'}</p> */}
                                </div>
                                <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                    <Link href={`/orcamento/alterar/${orc.id}`}>
                                        <button className="inline-flex items-center px-3 py-1.5 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1 shadow-sm" title="Alterar/Ver Detalhes">
                                            <Edit3 size={14} /> Detalhes/Alterar
                                        </button>
                                    </Link>
                                    <button onClick={() => handleDelete(orc.id)} className="inline-flex items-center px-3 py-1.5 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1 shadow-sm" title="Deletar">
                                        <Trash2 size={14} /> Deletar
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
                <div className="mt-10 text-center">
                    <Link href="/orcamento">
                        <button className="px-5 py-2.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow flex items-center justify-center gap-2 mx-auto">
                            <MdArrowBack /> Voltar ao Menu Orçamento
                        </button>
                    </Link>
                </div>
                <style jsx global>{`
                    .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                `}</style>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\orcamento\deletar\[id]\page.tsx   |   componente DeletarOrcamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/orcamento/deletar/[id]/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdDescription } from 'react-icons/md';
import { FileText, Trash2, XCircle, AlertTriangle, Loader2 } from 'lucide-react';

// Interface para os dados básicos do orçamento a serem exibidos para confirmação
interface OrcamentoParaDeletar {
    id: number;
    dataOrcamento: string;
    valorTotal: number;
    // Adicione outros campos que você queira mostrar na confirmação,
    // como nome do cliente ou placa do veículo, se o endpoint GET /rest/orcamentos/{id} os retornar.
    // Por simplicidade, usaremos o OrcamentoListDto da listagem.
}

interface OrcamentoListDto { // Reutilizando da listagem para buscar os dados
    id: number;
    dataOrcamento: string;
    valorMaoDeObra: number;
    valorHora: number;
    quantidadeHoras: number;
    valorTotal: number;
}

export default function DeletarOrcamentoPage() {
    const params = useParams();
    const router = useRouter();
    const orcamentoId = params.id as string;

    const [orcamentoInfo, setOrcamentoInfo] = useState<OrcamentoParaDeletar | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return 'N/A';
        try { return new Date(dateString.includes('T') ? dateString : dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { return dateString; }
    };
    const formatCurrency = (value: number | null | undefined): string => {
        if (value === null || value === undefined) return 'R$ 0,00';
        return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    };

    useEffect(() => {
        if (orcamentoId) {
            setIsLoadingInfo(true);
            setError(null);
            const fetchOrcamentoData = async () => {
                try {
                    // Usando o endpoint simples para buscar dados para confirmação
                    const response = await fetch(`http://localhost:8080/rest/orcamentos/${orcamentoId}`);
                    if (response.status === 404) throw new Error("Orçamento não encontrado para confirmar exclusão.");
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                        throw new Error(errorData.message || `Erro ao buscar dados do orçamento`);
                    }
                    const data: OrcamentoListDto = await response.json(); // Usa o DTO da listagem
                    setOrcamentoInfo({ // Mapeia para OrcamentoParaDeletar se necessário, ou use OrcamentoListDto diretamente
                        id: data.id,
                        dataOrcamento: data.dataOrcamento,
                        valorTotal: data.valorTotal
                    });
                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados do orçamento para exclusão.");
                    setOrcamentoInfo(null);
                } finally {
                    setIsLoadingInfo(false);
                }
            };
            fetchOrcamentoData();
        } else {
            setError("ID do orçamento inválido na URL.");
            setIsLoadingInfo(false);
        }
    }, [orcamentoId]);

    const handleConfirmDelete = async () => {
        if (!orcamentoId) {
            setError("Não é possível excluir: ID inválido.");
            return;
        }
        setIsDeleting(true);
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/orcamentos/${orcamentoId}`, { method: 'DELETE' });
            if (!response.ok && response.status !== 204) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao excluir orçamento: ${errorText || response.statusText}`);
            }
            console.log(`Orçamento ID ${orcamentoId} excluído com sucesso.`);
            router.push('/orcamento/listar?deleted=true'); // Adiciona query param para possível mensagem de sucesso na lista
        } catch (err: any) {
            setError(err.message || "Falha ao excluir orçamento.");
            setIsDeleting(false);
        }
    };

    const handleCancel = () => {
        router.push('/orcamento/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="orcamento" /> {/* ou orcamento-deletar se tiver no nav */}
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados para confirmação...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !orcamentoInfo) { // Erro ao buscar o item, e nenhum item carregado
        return (
            <>
                <NavBar active="orcamento" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-800 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <AlertTriangle className="h-16 w-16 text-red-500 mx-auto mb-4" />
                        <h2 className="text-xl font-semibold text-red-400 mb-3">Erro ao Carregar</h2>
                        <p className="text-slate-300 mb-6">{error}</p>
                        <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 mx-auto">
                            <MdArrowBack size={20}/> Voltar para Lista
                        </button>
                    </div>
                </main>
            </>
        );
    }

    if (!orcamentoInfo && !isLoadingInfo) {
        return (
            <>
                <NavBar active="orcamento" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-800 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <MdWarningAmber className="text-7xl text-yellow-400 mx-auto mb-4" />
                        <h2 className="text-xl font-semibold text-yellow-400 mb-3">Orçamento Não Encontrado</h2>
                        <p className="text-slate-300 mb-6">
                            O orçamento ID {orcamentoId} não foi encontrado ou pode já ter sido excluído.
                        </p>
                        <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 mx-auto">
                            <MdArrowBack size={20}/> Voltar para Lista
                        </button>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="orcamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-600">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão de Orçamento
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o seguinte orçamento?</p>

                    {orcamentoInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-4 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID do Orçamento:</strong> {orcamentoInfo.id}</p>
                            <p><strong>Data:</strong> {formatDate(orcamentoInfo.dataOrcamento)}</p>
                            <p><strong>Valor Total:</strong> {formatCurrency(orcamentoInfo.valorTotal)}</p>
                            {/* Adicionar mais detalhes aqui se desejar */}
                        </div>
                    )}

                    {error && ( // Erro durante a tentativa de exclusão
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting || isLoadingInfo}
                        >
                            {isDeleting ? <><Loader2 className="animate-spin mr-2"/> Excluindo...</> : <><MdDeleteForever size={20}/> Sim, Excluir</>}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting || isLoadingInfo}
                        >
                            <MdCancel size={20}/> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\orcamento\gerar\page.tsx   |   componente GerarOrcamentoPageWrapper
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/orcamento/gerar/page.tsx
"use client";

import React, { useState, useEffect, FormEvent, useMemo, Suspense } from 'react'; // Adicionado Suspense
import Link from 'next/link';
import { useRouter, useSearchParams } from 'next/navigation'; // Adicionado useSearchParams
import NavBar from '@/components/nav-bar';
import TabbedForm, { AppTab } from '@/components/forms/TabbedForm';

// Ícones (mantidos)
import {
    UserCircle, Car, Wrench, PackagePlus, HardHat, FileText, DollarSign, Save, ArrowLeft,
    Info, Settings, Clock, Tag, MessageSquare, ScanSearch, ListChecks, Loader2, AlertCircle,
    ShieldCheck, CalendarCheck2, Trash2
} from 'lucide-react';
import {
    MdCalendarToday, MdAddCircleOutline, MdDelete, MdErrorOutline, MdCheckCircle, MdPerson, MdDirectionsCar, MdBadge
} from 'react-icons/md';

// --- Interfaces ---

// DTO Peça vindo da API /rest/pecas/all (DEVE incluir os campos detalhados agora)
interface PecaResponseDto {
    id: number;
    tipoVeiculo: string;
    fabricante: string;      // Marca da Peça ou Fabricante do Veículo? Assumindo Marca Peça
    descricao: string;       // Nome/Descrição principal
    codigoFabricantePeca?: string; // NOVO CAMPO (Exemplo)
    marcaPeca?: string;          // NOVO CAMPO (Exemplo)
    aplicacaoDetalhada?: string; // NOVO CAMPO (Exemplo)
    preco: number;
    // outros campos que possam vir da API...
}

// Usado no estado do formulário e na lista de peças disponíveis no dropdown
interface PecaDisponivel {
    id: number;
    // Campos para exibição no dropdown e uso interno
    textoDisplay: string; // Texto formatado para o dropdown
    preco: number;
    descricao: string; // Guardar para referência
    // Outros campos detalhados para possível exibição
    codigoFabricantePeca?: string;
    marcaPeca?: string;
    aplicacaoDetalhada?: string;
}

interface ItemPecaForm {
    idOficinaPeca?: number;
    pecaId: string;          // O ID da PecaResponseDto selecionada
    descricaoPeca?: string;  // Nome da peça (para referência)
    quantidade: number;
    precoUnitario?: number;  // Preço no momento da adição ao orçamento
    subtotal?: number;
}

// DTOs esperados das buscas de Cliente e Veículo por ID
interface ClienteResponseDto { /* ... campos como idCli, nome, sobrenome, numeroDocumento ... */
    idCli: number; nome?: string; sobrenome?: string; tipoCliente?: string; numeroDocumento?: string; sexo?: string; dataNascimento?: string; atividadeProfissional?: string; endereco?: { codigo: number; } | null; contato?: { codigo: number; } | null; // Adicione todos os campos necessários
}
interface VeiculoResponseDto { /* ... campos como id, placa, modelo, fabricanteVeiculo ... */
    id: number; tipoVeiculo?: string; renavam?: string; placa?: string; modelo?: string; proprietario?: string; montadora?: string; cor?: string; motor?: string; anoFabricacao?: string;
}


interface OrcamentoFormData {
    // IDs recebidos e usados para salvar
    clienteId: string;
    clienteEnderecoId: string;
    veiculoId: string;

    // Dados para exibição na Aba 1 (buscados via API)
    nomeCliente: string;
    documentoCliente: string;
    modeloVeiculo: string;
    placaVeiculo: string;
    fabricanteVeiculo: string;

    // Aba: Serviço/Diagnóstico
    oficinaExistenteId?: number | null;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadasOficina: string;

    // Aba: Peças
    pecasUtilizadas: ItemPecaForm[];

    // Aba: Mão de Obra
    dataOrcamento: string;
    valorMaoDeObraAdicional: string;
    valorHoraOrcamento: string;
    quantidadeHorasOrcamento: number;
}

// --- Componente Principal ---

// Adiciona Suspense Boundary para useSearchParams
function GerarOrcamentoPageComponent() {
    const router = useRouter();
    const searchParams = useSearchParams(); // Hook para ler query params

    const today = new Date().toISOString().split('T')[0];

    // Estado inicial com campos de exibição vazios
    const initialState: OrcamentoFormData = {
        clienteId: searchParams.get('cliId') || "", // Pega da URL
        clienteEnderecoId: searchParams.get('endId') || "", // Pega da URL
        veiculoId: searchParams.get('veiId') || "", // Pega da URL
        nomeCliente: "Carregando...",
        documentoCliente: "Carregando...",
        modeloVeiculo: "Carregando...",
        placaVeiculo: "Carregando...",
        fabricanteVeiculo: "Carregando...",
        oficinaExistenteId: null, // Será preenchido se vier da seleção de histórico
        dataOficina: today,
        descricaoProblema: "",
        diagnostico: "",
        partesAfetadas: "",
        horasTrabalhadasOficina: "0.0",
        pecasUtilizadas: [],
        dataOrcamento: today,
        valorMaoDeObraAdicional: "0,00",
        valorHoraOrcamento: "0,00",
        quantidadeHorasOrcamento: 0,
    };

    const [formData, setFormData] = useState<OrcamentoFormData>(initialState);
    const [pecasDisponiveis, setPecasDisponiveis] = useState<PecaDisponivel[]>([]);
    const [activeTab, setActiveTab] = useState(0);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isFetchingInitialData, setIsFetchingInitialData] = useState(true); // Novo estado
    const [isPecasLoading, setIsPecasLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Funções de formatação/parse (mantidas)
    const parseInputCurrencyToNumber = (inputValue: string): number => { /* ... */  if (!inputValue) return 0; const cleaned = inputValue.replace(/\./g, '').replace(',', '.'); const num = parseFloat(cleaned); return isNaN(num) ? 0 : num; };
    const formatNumberToDisplayCurrencyString = (value: number | undefined | null): string => { /* ... */ if (value === null || value === undefined || isNaN(value)) return 'R$ 0,00'; return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL', minimumFractionDigits: 2, maximumFractionDigits: 2 }); };

    // --- BUSCAR DADOS INICIAIS (CLIENTE, VEÍCULO, PEÇAS) ---
    useEffect(() => {
        const cliId = searchParams.get('cliId');
        const endId = searchParams.get('endId');
        const veiId = searchParams.get('veiId');

        // Valida se IDs necessários estão presentes
        if (!cliId || !endId || !veiId) {
            setError("Erro: IDs de cliente ou veículo não foram fornecidos corretamente na URL. Volte e selecione novamente.");
            setIsFetchingInitialData(false);
            setIsPecasLoading(false); // Também para o loading de peças
            // Opcional: Redirecionar de volta
            // router.replace('/orcamento/iniciar');
            return;
        }

        setIsFetchingInitialData(true);
        setIsPecasLoading(true);
        setError(null);

        const fetchInitialData = async () => {
            try {
                // Busca Cliente e Veículo em paralelo
                const [clienteRes, veiculoRes, pecasRes] = await Promise.all([
                    fetch(`http://localhost:8080/rest/clientes/${cliId}/${endId}`).catch(e => { console.error("Fetch Cliente Falhou:", e); return null; }), // Adiciona catch
                    fetch(`http://localhost:8080/rest/veiculo/${veiId}`).catch(e => { console.error("Fetch Veiculo Falhou:", e); return null; }), // Adiciona catch
                    fetch('http://localhost:8080/rest/pecas/all').catch(e => { console.error("Fetch Pecas Falhou:", e); return null; }) // Adiciona catch
                ]);

                let fetchedClienteData: Partial<OrcamentoFormData> = { nomeCliente: "Erro ao carregar", documentoCliente: "Erro" };
                let fetchedVeiculoData: Partial<OrcamentoFormData> = { modeloVeiculo: "Erro ao carregar", placaVeiculo: "Erro", fabricanteVeiculo: "Erro" };
                let fetchedPecasData: PecaDisponivel[] = [];

                // Processa Cliente
                if (clienteRes?.ok) {
                    const clienteData: ClienteResponseDto = await clienteRes.json();
                    fetchedClienteData = {
                        nomeCliente: `${clienteData.nome || ''} ${clienteData.sobrenome || ''}`.trim(),
                        documentoCliente: clienteData.numeroDocumento || 'N/A'
                    };
                } else {
                    console.error("Erro ao buscar cliente:", clienteRes?.statusText);
                    setError(prev => (prev ? prev + "\n" : "") + `Falha ao carregar dados do cliente (ID: ${cliId}/${endId}).`);
                }

                // Processa Veículo
                if (veiculoRes?.ok) {
                    const veiculoData: VeiculoResponseDto = await veiculoRes.json();
                    fetchedVeiculoData = {
                        modeloVeiculo: veiculoData.modelo || 'N/A',
                        placaVeiculo: veiculoData.placa || 'N/A',
                        fabricanteVeiculo: veiculoData.montadora || 'N/A'
                    };
                } else {
                    console.error("Erro ao buscar veículo:", veiculoRes?.statusText);
                    setError(prev => (prev ? prev + "\n" : "") + `Falha ao carregar dados do veículo (ID: ${veiId}).`);
                }

                // Processa Peças
                if (pecasRes?.ok) {
                    if (pecasRes.status === 204) {
                        fetchedPecasData = [];
                    } else {
                        const dataPecasApi: PecaResponseDto[] = await pecasRes.json();
                        fetchedPecasData = (dataPecasApi || []).map(p => ({
                            id: p.id,
                            preco: p.preco,
                            descricao: p.descricao,
                            codigoFabricantePeca: p.codigoFabricantePeca, // Assumindo que backend retorna
                            marcaPeca: p.marcaPeca, // Assumindo que backend retorna
                            aplicacaoDetalhada: p.aplicacaoDetalhada, // Assumindo que backend retorna
                            // Texto formatado para o dropdown
                            textoDisplay: `${p.descricao} ${p.marcaPeca ? `(${p.marcaPeca})` : p.fabricante ? `(${p.fabricante})` : ''} ${p.codigoFabricantePeca ? `- Cód: ${p.codigoFabricantePeca}` : ''} - ${formatNumberToDisplayCurrencyString(p.preco)}`
                        }));
                        setPecasDisponiveis(fetchedPecasData);
                    }
                } else {
                    console.error("Erro ao buscar peças:", pecasRes?.statusText);
                    setError(prev => (prev ? prev + "\n" : "") + `Falha ao carregar lista de peças.`);
                }


                // Atualiza o estado principal com os dados buscados (ou de erro)
                setFormData(prev => ({
                    ...prev, // Mantém IDs e outros campos
                    ...fetchedClienteData,
                    ...fetchedVeiculoData,
                }));

            } catch (err: any) {
                console.error("Erro geral ao buscar dados iniciais:", err);
                setError(tratarErroFetch(err));
                // Garante que o estado de exibição mostre erro
                setFormData(prev => ({
                    ...prev,
                    nomeCliente: "Erro ao carregar", documentoCliente: "Erro",
                    modeloVeiculo: "Erro ao carregar", placaVeiculo: "Erro", fabricanteVeiculo: "Erro",
                }));
            } finally {
                setIsFetchingInitialData(false);
                setIsPecasLoading(false); // Finaliza loading das peças aqui também
            }
        };

        fetchInitialData();

    }, [searchParams]); // Depende de searchParams para re-executar se a URL mudar

    // Handlers (handleChange, handleCurrencyChange, handleAddPeca, handlePecaItemChange, handleRemovePeca) (mantidos)
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => { /* ... */ const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); };
    const handleCurrencyChange = (e: React.ChangeEvent<HTMLInputElement>) => { /* ... */ const { name, value } = e.target; const cleanedValue = value.replace(/[^0-9,]/g, ''); setFormData(prev => ({ ...prev, [name]: cleanedValue })); };
    const handleAddPeca = () => { /* ... */ setFormData(prev => ({ ...prev, pecasUtilizadas: [...prev.pecasUtilizadas, { pecaId: "", quantidade: 1, descricaoPeca: "Selecione...", precoUnitario: 0, subtotal: 0 }]})); };
    const handlePecaItemChange = (index: number, field: keyof ItemPecaForm, value: string | number) => { /* ... */
        const novasPecas = [...formData.pecasUtilizadas];
        const itemAtual = { ...novasPecas[index] };
        if (field === 'pecaId' && typeof value === 'string') {
            const pecaSelecionada = pecasDisponiveis.find(p => p.id.toString() === value);
            itemAtual.pecaId = value;
            itemAtual.descricaoPeca = pecaSelecionada?.descricao || "Peça inválida";
            itemAtual.precoUnitario = pecaSelecionada?.preco || 0;
        } else if (field === 'quantidade' && typeof value === 'string') {
            itemAtual.quantidade = Math.max(1, parseInt(value, 10) || 1);
        }
        itemAtual.subtotal = (itemAtual.precoUnitario || 0) * itemAtual.quantidade;
        novasPecas[index] = itemAtual;
        setFormData(prev => ({ ...prev, pecasUtilizadas: novasPecas }));
    };
    const handleRemovePeca = (index: number) => { /* ... */ setFormData(prev => ({...prev, pecasUtilizadas: prev.pecasUtilizadas.filter((_, i) => i !== index)})); };

    // useMemo para cálculos (mantido)
    const { totalCustoPecas, totalMaoDeObraOrcamento, valorTotalOrcamento } = useMemo(() => { /* ... */
        const custoPecas = formData.pecasUtilizadas.reduce((sum, item) => sum + (item.subtotal || 0), 0);
        const maoDeObraAdicional = parseInputCurrencyToNumber(formData.valorMaoDeObraAdicional);
        const valorHora = parseInputCurrencyToNumber(formData.valorHoraOrcamento);
        const qtdHoras = Number(formData.quantidadeHorasOrcamento) || 0;
        const custoMaoDeObraHoras = valorHora * qtdHoras;
        const totalMaoObra = maoDeObraAdicional + custoMaoDeObraHoras;
        return { totalCustoPecas: custoPecas, totalMaoDeObraOrcamento: totalMaoObra, valorTotalOrcamento: custoPecas + totalMaoObra };
    }, [formData.pecasUtilizadas, formData.valorMaoDeObraAdicional, formData.valorHoraOrcamento, formData.quantidadeHorasOrcamento]);

    // handleSubmit (mantido)
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => { /* ... (lógica igual anterior) ... */
        event.preventDefault();
        if (isFetchingInitialData) { // Evitar submit enquanto carrega dados
            setError("Aguarde o carregamento dos dados iniciais.");
            return;
        }
        setIsSubmitting(true); setError(null); setSuccess(null);

        const pecasParaEnvio = formData.pecasUtilizadas
            .filter(p => p.pecaId && !isNaN(parseInt(p.pecaId, 10)))
            .map(p => ({
                pecaId: parseInt(p.pecaId, 10),
                quantidade: p.quantidade
            }));

        const payload = {
            dataOficina: formData.dataOficina,
            descricaoProblema: formData.descricaoProblema,
            diagnostico: formData.diagnostico,
            partesAfetadas: formData.partesAfetadas,
            horasTrabalhadasOficina: formData.horasTrabalhadasOficina,
            pecasUtilizadas: pecasParaEnvio,
            dataOrcamento: formData.dataOrcamento,
            valorMaoDeObraAdicional: parseInputCurrencyToNumber(formData.valorMaoDeObraAdicional),
            valorHoraOrcamento: parseInputCurrencyToNumber(formData.valorHoraOrcamento),
            quantidadeHorasOrcamento: Number(formData.quantidadeHorasOrcamento),
            // Garante que IDs são enviados como número ou null
            clienteId: formData.clienteId ? parseInt(formData.clienteId, 10) : null,
            clienteEnderecoId: formData.clienteEnderecoId ? parseInt(formData.clienteEnderecoId, 10) : null,
            veiculoId: formData.veiculoId ? parseInt(formData.veiculoId, 10) : null,
            oficinaExistenteId: formData.oficinaExistenteId || null,
        };

        // Remover propriedades nullas ou inválidas antes de enviar
        if (payload.clienteId === null || isNaN(payload.clienteId)) delete (payload as any).clienteId;
        if (payload.clienteEnderecoId === null || isNaN(payload.clienteEnderecoId)) delete (payload as any).clienteEnderecoId;
        if (payload.veiculoId === null || isNaN(payload.veiculoId)) delete (payload as any).veiculoId;
        if (payload.oficinaExistenteId === null) delete (payload as any).oficinaExistenteId;


        console.log("Enviando payload:", JSON.stringify(payload, null, 2));
        const targetUrl = "http://localhost:8080/rest/orcamentos/completo"; // Ajustar se for PUT
        const method = "POST"; // Ajustar para PUT se for alteração

        try {
            const response = await fetch(targetUrl, {
                method: method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            setSuccess(`Orçamento (ID: ${result.id}) registrado com sucesso!`);
            // Resetar campos do formulário mantendo cliente/veículo
            setFormData(prev => ({
                ...prev,
                oficinaExistenteId: null, dataOficina: today, descricaoProblema: "", diagnostico: "",
                partesAfetadas: "", horasTrabalhadasOficina: "0.0", pecasUtilizadas: [], dataOrcamento: today,
                valorMaoDeObraAdicional: "0,00", valorHoraOrcamento: "0,00", quantidadeHorasOrcamento: 0,
            }));
            setActiveTab(0); // Volta para a primeira aba
            setTimeout(() => setSuccess(null), 7000);

        } catch (err: any) {
            setError(err.message || "Falha ao registrar orçamento.");
            console.error("Erro no fetch:", err);
        } finally {
            setIsSubmitting(false);
        }
    };

    // --- Definição das Abas (Aba 1 modificada para mostrar dados do estado) ---
    const tabs: AppTab[] = [
        {
            label: "Cliente & Veículo",
            icon: <UserCircle size={18} className="text-slate-400" />,
            content: (
                <div className="space-y-4 p-1 md:p-4 bg-slate-800/30 rounded-md min-h-[150px]">
                    <h3 className="text-lg font-semibold text-sky-400 mb-3 border-b border-slate-700 pb-2">Dados do Cliente</h3>
                    {isFetchingInitialData ? (
                        <p className="text-sm text-slate-400">Carregando...</p>
                    ) : error && formData.nomeCliente.includes("Erro") ? (
                        <p className="text-sm text-red-400">Falha ao carregar dados do cliente.</p>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                            <p><strong className="text-slate-400">Nome:</strong> <span className="text-slate-100">{formData.nomeCliente}</span></p>
                            <p><strong className="text-slate-400">Documento:</strong> <span className="text-slate-100">{formData.documentoCliente}</span></p>
                        </div>
                    )}

                    <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-3 border-b border-slate-700 pb-2">Dados do Veículo</h3>
                    {isFetchingInitialData ? (
                        <p className="text-sm text-slate-400">Carregando...</p>
                    ) : error && formData.modeloVeiculo.includes("Erro") ? (
                        <p className="text-sm text-red-400">Falha ao carregar dados do veículo.</p>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
                            <p><strong className="text-slate-400">Placa:</strong> <span className="text-slate-100">{formData.placaVeiculo}</span></p>
                            <p><strong className="text-slate-400">Modelo:</strong> <span className="text-slate-100">{formData.modeloVeiculo}</span></p>
                            <p><strong className="text-slate-400">Fabricante:</strong> <span className="text-slate-100">{formData.fabricanteVeiculo}</span></p>
                        </div>
                    )}
                    {/* Link para voltar e selecionar outro (se necessário) */}
                    <div className='mt-4 text-right'>
                        <Link href="/orcamento/iniciar" className="text-xs text-sky-400 hover:text-sky-200 underline">
                            Selecionar outro cliente/veículo
                        </Link>
                    </div>
                </div>
            ),
            disabled: !formData.clienteId || !formData.veiculoId // Desabilita se IDs não vieram
        },
        {
            label: "Serviço/Diagnóstico",
            icon: <Wrench size={18} className="text-slate-400" />,
            content: ( /* ... JSX da aba Serviço/Diagnóstico (igual anterior) ... */
                <fieldset className="space-y-4 p-1 md:p-4">
                    <div>
                        <label htmlFor="dataOficina" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdCalendarToday size={16}/> Data do Serviço:</label>
                        <input type="date" name="dataOficina" id="dataOficina" value={formData.dataOficina} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 date-input-fix"/>
                    </div>
                    <div>
                        <label htmlFor="horasTrabalhadasOficina" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Clock size={16}/> Horas Trabalhadas (Serviço):</label>
                        <input type="text" name="horasTrabalhadasOficina" id="horasTrabalhadasOficina" value={formData.horasTrabalhadasOficina} onChange={handleChange} required placeholder="Ex: 2.5" className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600"/>
                    </div>
                    <div className="md:col-span-2">
                        <label htmlFor="descricaoProblema" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MessageSquare size={16}/> Descrição do Problema:</label>
                        <textarea name="descricaoProblema" id="descricaoProblema" value={formData.descricaoProblema} onChange={handleChange} rows={3} required className="w-full p-2 rounded bg-slate-700 border border-slate-600"/>
                    </div>
                    <div className="md:col-span-2">
                        <label htmlFor="diagnostico" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><ScanSearch size={16}/> Diagnóstico:</label>
                        <textarea name="diagnostico" id="diagnostico" value={formData.diagnostico} onChange={handleChange} rows={3} className="w-full p-2 rounded bg-slate-700 border border-slate-600"/>
                    </div>
                    <div className="md:col-span-2">
                        <label htmlFor="partesAfetadas" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Settings size={16}/> Partes Afetadas:</label>
                        <input type="text" name="partesAfetadas" id="partesAfetadas" value={formData.partesAfetadas} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600"/>
                    </div>
                </fieldset>
            ),
            disabled: !formData.clienteId || !formData.veiculoId // Só habilita se tiver cliente/veículo
        },
        {
            label: "Peças",
            icon: <PackagePlus size={18} className="text-slate-400" />,
            content: ( /* ... JSX da aba Peças (com dropdown usando pecasDisponiveis.textoDisplay) ... */
                <fieldset className="space-y-4 p-1 md:p-4">
                    {isPecasLoading && <div className="flex items-center gap-2 text-slate-400 text-sm"><Loader2 className="animate-spin"/>Carregando peças...</div>}
                    {!isPecasLoading && pecasDisponiveis.length === 0 && !error && <p className="text-slate-400 text-sm">Nenhuma peça disponível. Cadastre peças primeiro.</p>}
                    {!isPecasLoading && error && error.includes("peças") && <p className="text-red-400 text-sm">{error}</p>}

                    {formData.pecasUtilizadas.map((item, index) => (
                        <div key={index} className="grid grid-cols-1 sm:grid-cols-[2fr_80px_110px_110px_auto] gap-2 items-end border-b border-slate-700/50 py-3 last:border-b-0">
                            <div>
                                <label htmlFor={`pecaId-${index}`} className="block text-xs font-medium text-slate-400 mb-1">Peça:</label>
                                <select name={`pecaId-${index}`} id={`pecaId-${index}`} value={item.pecaId} onChange={(e) => handlePecaItemChange(index, 'pecaId', e.target.value)} required className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 text-sm disabled:opacity-50" disabled={isPecasLoading}>
                                    <option value="" disabled>{isPecasLoading ? "Carregando..." : "Selecione..."}</option>
                                    {/* USA O TEXTO FORMATADO DO ESTADO */}
                                    {pecasDisponiveis.map(p => (<option key={p.id} value={p.id.toString()}>{p.textoDisplay}</option>))}
                                </select>
                                {/* Exibe detalhes da peça selecionada */}
                                {item.pecaId && pecasDisponiveis.find(p => p.id.toString() === item.pecaId)?.aplicacaoDetalhada && (
                                    <p className="text-xs text-slate-400 mt-1">
                                        Aplicação: {pecasDisponiveis.find(p => p.id.toString() === item.pecaId)?.aplicacaoDetalhada}
                                    </p>
                                )}
                            </div>
                            <div>
                                <label htmlFor={`quantidade-${index}`} className="block text-xs font-medium text-slate-400 mb-1">Qtd.:</label>
                                <input type="number" name={`quantidade-${index}`} id={`quantidade-${index}`} value={item.quantidade} onChange={(e) => handlePecaItemChange(index, 'quantidade', e.target.value)} min="1" required className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 text-sm"/>
                            </div>
                            <div className="text-sm">
                                <span className="block text-xs text-slate-400 mb-1">Preço Unit.:</span>
                                <span className="block p-2 h-10 leading-tight flex items-center bg-slate-800 rounded border border-slate-700">{formatNumberToDisplayCurrencyString(item.precoUnitario)}</span>
                            </div>
                            <div className="text-sm">
                                <span className="block text-xs text-slate-400 mb-1">Subtotal:</span>
                                <span className="block p-2 h-10 leading-tight flex items-center bg-slate-800 rounded border border-slate-700 font-semibold">{formatNumberToDisplayCurrencyString(item.subtotal)}</span>
                            </div>
                            <button type="button" onClick={() => handleRemovePeca(index)} className="p-2 h-10 bg-red-600 hover:bg-red-700 rounded text-white flex items-center justify-center" title="Remover Peça"><Trash2 size={18}/></button>
                        </div>
                    ))}
                    <button type="button" onClick={handleAddPeca} disabled={isPecasLoading || pecasDisponiveis.length === 0} className={`mt-4 flex items-center gap-2 px-4 py-2 text-sm bg-blue-600 hover:bg-blue-700 rounded-md ${isPecasLoading || pecasDisponiveis.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}>
                        <MdAddCircleOutline size={18}/> Adicionar Peça
                    </button>
                    <div className="text-right mt-4 font-semibold text-lg">Custo Total das Peças: <span className="text-green-400">{formatNumberToDisplayCurrencyString(totalCustoPecas)}</span></div>
                </fieldset>
            ),
            disabled: !formData.clienteId || !formData.veiculoId // Só habilita se tiver cliente/veículo
        },
        {
            label: "Mão de Obra",
            icon: <HardHat size={18} className="text-slate-400" />,
            content: ( /* ... Conteúdo da Aba Mão de Obra ... */
                <fieldset className="space-y-4 p-1 md:p-4">
                    <div>
                        <label htmlFor="dataOrcamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdCalendarToday size={16}/> Data Orçamento:</label>
                        <input type="date" name="dataOrcamento" id="dataOrcamento" value={formData.dataOrcamento} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 date-input-fix"/>
                    </div>
                    <div>
                        <label htmlFor="valorMaoDeObraAdicional" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Tag size={16}/> Taxa M.O. Adicional (R$):</label>
                        <input type="text" name="valorMaoDeObraAdicional" id="valorMaoDeObraAdicional" value={formData.valorMaoDeObraAdicional} onChange={handleCurrencyChange} placeholder="0,00" className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600"/>
                    </div>
                    <div>
                        <label htmlFor="valorHoraOrcamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><DollarSign size={16}/> Valor/Hora Orçam. (R$):</label>
                        <input type="text" name="valorHoraOrcamento" id="valorHoraOrcamento" value={formData.valorHoraOrcamento} onChange={handleCurrencyChange} required placeholder="0,00" className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600"/>
                    </div>
                    <div>
                        <label htmlFor="quantidadeHorasOrcamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><Clock size={16}/> Qtd. Horas Orçam.:</label>
                        <input type="number" name="quantidadeHorasOrcamento" id="quantidadeHorasOrcamento" value={formData.quantidadeHorasOrcamento} onChange={handleChange} min="0" step="0.1" required className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600"/>
                    </div>
                    <div className="text-right mt-4 font-semibold text-lg">Custo Total Mão de Obra (Orç.): <span className="text-yellow-400">{formatNumberToDisplayCurrencyString(totalMaoDeObraOrcamento)}</span></div>
                </fieldset>
            ),
            disabled: !formData.clienteId || !formData.veiculoId // Só habilita se tiver cliente/veículo
        },
        {
            label: "Resumo & Finalizar",
            icon: <ShieldCheck size={18} className="text-slate-400" />,
            content: ( /* ... Conteúdo da Aba Resumo ... */
                <div className="space-y-4 p-1 md:p-4 bg-slate-800/30 rounded-md">
                    <h3 className="text-xl font-semibold text-sky-300 mb-4 border-b border-slate-700 pb-2">Resumo do Orçamento</h3>
                    <div className="text-base space-y-2">
                        <p className="flex justify-between"><span>Custo Total das Peças:</span> <span className="font-semibold text-green-400">{formatNumberToDisplayCurrencyString(totalCustoPecas)}</span></p>
                        <p className="flex justify-between"><span>Custo Total da Mão de Obra:</span> <span className="font-semibold text-yellow-400">{formatNumberToDisplayCurrencyString(totalMaoDeObraOrcamento)}</span></p>
                        <hr className="border-slate-600 my-3"/>
                        <p className="flex justify-between text-2xl items-center">
                            <strong className="text-sky-200">VALOR TOTAL DO ORÇAMENTO:</strong>
                            <strong className="text-green-300 text-3xl">{formatNumberToDisplayCurrencyString(valorTotalOrcamento)}</strong>
                        </p>
                    </div>
                    <p className="text-xs text-slate-500 mt-6">
                        Confira todos os dados nas abas anteriores antes de salvar.
                    </p>
                </div>
            ),
            disabled: !formData.clienteId || !formData.veiculoId // Só habilita se tiver cliente/veículo
        },
    ];

    return (
        <>
            <NavBar active="orcamento-gerar" />
            <main className="container mx-auto px-2 sm:px-4 py-10 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-4 sm:p-6 md:p-8 rounded-lg shadow-xl w-full max-w-4xl mx-auto border border-slate-700">
                    <h1 className="flex items-center justify-center gap-2 text-xl sm:text-2xl md:text-3xl font-bold mb-6 sm:mb-8 text-center">
                        <ListChecks size={30} className="text-sky-400" />
                        Gerar Novo Orçamento de Serviço
                    </h1>

                    {/* Loading inicial */}
                    {isFetchingInitialData && (
                        <div className='flex justify-center items-center py-10'> <Loader2 className="h-8 w-8 animate-spin text-sky-400" /> <span className='ml-3 text-sky-300'>Carregando dados...</span> </div>
                    )}

                    {/* Erro Principal (antes do formulário se o carregamento inicial falhar gravemente) */}
                    {error && !isFetchingInitialData && (!formData.clienteId || !formData.veiculoId) && (
                        <div className="relative mb-6 text-red-400 bg-red-900/50 p-3 sm:p-4 pr-10 rounded border border-red-500 text-sm" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-lg" /> <span>{error}</span> </div>
                            <Link href="/orcamento/iniciar" className="text-sky-300 underline hover:text-sky-100 text-xs block mt-2">Voltar para seleção</Link>
                        </div>
                    )}

                    {/* Formulário e Abas (só mostra se tiver IDs ou não estiver mais carregando) */}
                    {!isFetchingInitialData && formData.clienteId && formData.veiculoId && (
                        <form onSubmit={handleSubmit}>
                            {/* Mensagens de erro/sucesso do SUBMIT */}
                            {error && isSubmitting && ( /* Mostra erro do submit */
                                <div className="relative mb-6 text-red-400 bg-red-900/50 p-3 sm:p-4 pr-10 rounded border border-red-500 text-sm" role="alert">
                                    <div className="flex items-center gap-2"> <MdErrorOutline className="text-lg" /> <span>{error}</span> </div>
                                    <button type="button" className="absolute top-0 bottom-0 right-0 px-3 sm:px-4 py-1 sm:py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-lg sm:text-xl">&times;</span></button>
                                </div>
                            )}
                            {success && (
                                <div className="flex items-center justify-center gap-2 text-green-400 p-3 mb-6 rounded bg-green-900/30 border border-green-700 text-sm">
                                    <MdCheckCircle className="text-lg" /> <span>{success}</span>
                                </div>
                            )}

                            <TabbedForm tabs={tabs} selectedIndex={activeTab} onChange={setActiveTab} />

                            <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-6 mt-6 border-t border-slate-700">
                                <button
                                    type="submit"
                                    className={`flex items-center justify-center gap-2 w-full sm:w-auto px-6 sm:px-8 py-2.5 sm:py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                    disabled={isSubmitting || isFetchingInitialData /* Desabilita se estiver carregando dados tbm */}
                                >
                                    <Save size={18}/> {isSubmitting ? 'Salvando...' : 'Salvar Orçamento e Serviço'}
                                </button>
                                {/* Botão Voltar Removido */}
                            </div>
                        </form>
                    )}
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type='number'] { -moz-appearance: textfield; }
                input[type='number']::-webkit-inner-spin-button,
                input[type='number']::-webkit-outer-spin-button {
                  -webkit-appearance: none; margin: 0;
                }
            `}</style>
        </>
    );
}


// Componente wrapper para Suspense (necessário para useSearchParams no App Router)
export default function GerarOrcamentoPageWrapper() {
    return (
        <Suspense fallback={<div>Carregando parâmetros...</div>}>
            <GerarOrcamentoPageComponent />
        </Suspense>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\orcamento\iniciar\page.tsx   |   componente IniciarOrcamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/orcamento/iniciar/page.tsx
"use client";

import React, { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
import {
    Search, User, ScanSearch, Hash, Car, CheckSquare, CircleArrowRight, Loader2, AlertCircle, ListFilter, ListChecks, History, ShieldCheck
} from 'lucide-react';
import { MdErrorOutline } from 'react-icons/md';

// --- Interfaces ---
// DTO que esperamos receber da busca de clientes (igual ao usado em clientes/buscar)
interface ClienteInfoDTO {
    idCli: number;
    idEndereco: number;
    nome: string;
    sobrenome: string;
    numeroDocumento: string;
    getNomeCompleto?(): string; // Adicionado via helper
}

// DTO que esperamos receber da busca de veículos por cliente (igual ao usado em veiculo/listar)
interface VeiculoResponseDto {
    id: number;
    tipoVeiculo: string;
    renavam: string;
    placa: string;
    modelo: string;
    proprietario: string;
    montadora: string;
    cor: string;
    motor: string;
    anoFabricacao: string;
}

// DTO para histórico de serviço (como definido anteriormente)
// interface ServicoHistoricoResponseDto { /* ...definição... */ }

type TipoBuscaCliente = 'nome' | 'documento' | 'idCliente';

// Helper para adicionar getNomeCompleto (igual ao usado em clientes/buscar)
const addGetNomeCompleto = (cliente: ClienteInfoDTO): ClienteInfoDTO => ({
    ...cliente,
    getNomeCompleto() { return `${this.nome} ${this.sobrenome}`.trim(); }
});

// Helper para tratar erro fetch (igual aos relatórios)
const tratarErroFetch = (err: any): string => {
    if (err instanceof TypeError && err.message === 'Failed to fetch') {
        return "Não foi possível conectar ao servidor. Verifique a API e a rede.";
    }
    if (err.message && (err.message.startsWith("Erro HTTP") || err.message.includes("inválido") || err.message.includes("não encontrado"))) {
        return err.message;
    }
    return err.message || "Ocorreu um erro desconhecido.";
};


export default function IniciarOrcamentoPage() {
    const router = useRouter();

    // Estados da Busca de Cliente
    const [tipoBuscaCliente, setTipoBuscaCliente] = useState<TipoBuscaCliente>('nome');
    const [termoBuscaCliente, setTermoBuscaCliente] = useState('');
    const [clientesEncontrados, setClientesEncontrados] = useState<ClienteInfoDTO[]>([]);
    const [isBuscandoCliente, setIsBuscandoCliente] = useState(false);

    // Estados da Seleção de Veículo
    const [clienteSelecionado, setClienteSelecionado] = useState<ClienteInfoDTO | null>(null);
    const [veiculosDoCliente, setVeiculosDoCliente] = useState<VeiculoResponseDto[]>([]);
    const [isLoadingVeiculos, setIsLoadingVeiculos] = useState(false);

    // Estado do Veículo Selecionado para Orçamento
    const [veiculoSelecionado, setVeiculoSelecionado] = useState<VeiculoResponseDto | null>(null);

    // Estados Gerais
    const [error, setError] = useState<string | null>(null);

    // Placeholder da busca de cliente
    const getPlaceholderCliente = (): string => {
        switch (tipoBuscaCliente) {
            case 'nome': return 'Digite nome ou sobrenome…';
            case 'documento': return 'Digite CPF ou CNPJ…';
            case 'idCliente': return 'Digite Código do Cliente…';
            default: return '';
        }
    };

    // Função para buscar clientes
    const buscarClientes = async (e?: FormEvent) => {
        if (e) e.preventDefault();
        setIsBuscandoCliente(true);
        setError(null);
        setClientesEncontrados([]);
        setClienteSelecionado(null); // Reseta seleção anterior
        setVeiculosDoCliente([]);
        setVeiculoSelecionado(null);

        if (!termoBuscaCliente.trim()) {
            setError("Insira um termo para busca.");
            setIsBuscandoCliente(false);
            return;
        }

        const params = new URLSearchParams();
        if (tipoBuscaCliente === 'idCliente') params.append('idCliente', termoBuscaCliente.trim());
        else if (tipoBuscaCliente === 'documento') params.append('documento', termoBuscaCliente.trim());
        else params.append('nome', termoBuscaCliente.trim());

        const apiUrl = `http://localhost:8080/rest/clientes/buscar?${params}`;
        console.info("Buscando clientes:", apiUrl);
        try {
            const resp = await fetch(apiUrl);
            if (!resp.ok) {
                if (resp.status === 400) throw new Error("Critério de busca inválido.");
                if (resp.status === 404 || resp.status === 204) {
                    // Nenhum cliente encontrado, informa o usuário mas não define como erro crítico
                    setClientesEncontrados([]);
                    return;
                }
                throw new Error(`Erro HTTP ${resp.status} ao buscar clientes.`);
            }
            const data: ClienteInfoDTO[] = await resp.json();
            setClientesEncontrados(data.map(addGetNomeCompleto));
        } catch (err: any) {
            setError(tratarErroFetch(err));
            setClientesEncontrados([]);
        } finally {
            setIsBuscandoCliente(false);
        }
    };

    // Função para buscar veículos do cliente selecionado
    const fetchVeiculosDoCliente = async (cliente: ClienteInfoDTO) => {
        setIsLoadingVeiculos(true);
        setError(null);
        setVeiculosDoCliente([]);
        setVeiculoSelecionado(null);
        const { idCli, idEndereco } = cliente;

        // !!! LEMBRETE: Este endpoint precisa ser criado no backend !!!
        const apiUrl = `http://localhost:8080/rest/clientes/${idCli}/${idEndereco}/veiculos`;
        console.info("Buscando veículos:", apiUrl);

        try {
            const resp = await fetch(apiUrl);
            if (!resp.ok) {
                if (resp.status === 404 || resp.status === 204) {
                    setVeiculosDoCliente([]); // Cliente sem veículos, não é um erro
                    return;
                }
                throw new Error(`Erro HTTP ${resp.status} ao buscar veículos.`);
            }
            const data: VeiculoResponseDto[] = await resp.json();
            setVeiculosDoCliente(data || []);
        } catch (err: any) {
            setError(tratarErroFetch(err));
            setVeiculosDoCliente([]);
        } finally {
            setIsLoadingVeiculos(false);
        }
    };

    // Função chamada ao selecionar um cliente
    const handleSelecionarCliente = (cliente: ClienteInfoDTO) => {
        setClienteSelecionado(cliente);
        setClientesEncontrados([]); // Esconde a lista de busca
        fetchVeiculosDoCliente(cliente); // Busca os veículos deste cliente
    };

    // Função para voltar para a busca de cliente
    const resetSelecaoCliente = () => {
        setClienteSelecionado(null);
        setVeiculosDoCliente([]);
        setVeiculoSelecionado(null);
        setTermoBuscaCliente(''); // Opcional: limpar termo de busca
        setError(null);
    }

    // Função para selecionar o veículo e habilitar botão de orçamento
    const handleSelecionarVeiculo = (veiculo: VeiculoResponseDto) => {
        setVeiculoSelecionado(veiculo);
        // Aqui você poderia opcionalmente buscar o histórico de serviços
        // fetchHistoricoServicos(veiculo.id);
    };

    // Função para navegar para a geração de orçamento
    const iniciarGeracaoOrcamento = () => {
        if (!clienteSelecionado || !veiculoSelecionado) {
            setError("Erro interno: Cliente ou veículo não selecionado.");
            return;
        }
        // Navega para a tela de gerar orçamento, passando os IDs via query params
        const queryParams = new URLSearchParams({
            cliId: clienteSelecionado.idCli.toString(),
            endId: clienteSelecionado.idEndereco.toString(),
            veiId: veiculoSelecionado.id.toString()
        }).toString();

        router.push(`/orcamento/gerar?${queryParams}`);
    };


    return (
        <>
            {/* Atualize a prop 'active' conforme sua NavBar */}
            <NavBar active="orcamento-gerar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-6 text-center gap-2">
                    <ShieldCheck size={30} className="text-sky-400" />
                    Iniciar Geração de Orçamento
                </h1>

                {/* -- Etapa 1: Busca de Cliente -- */}
                {!clienteSelecionado && (
                    <section className="mb-8 p-4 md:p-6 bg-slate-800 rounded-lg shadow-lg max-w-4xl mx-auto border border-slate-600">
                        <h2 className='text-xl font-semibold text-sky-300 mb-4 pb-2 border-b border-slate-700'>1. Buscar Cliente</h2>
                        <form onSubmit={buscarClientes} className="flex flex-col sm:flex-row gap-4 items-end">
                            {/* Select Tipo Busca */}
                            <div className="flex-shrink-0 w-full sm:w-auto">
                                <label htmlFor="tipoBuscaCliente" className="block text-sm font-medium mb-1 text-slate-300 flex items-center gap-1">
                                    <ListFilter size={16} /> Buscar por:
                                </label>
                                <select
                                    id="tipoBuscaCliente" value={tipoBuscaCliente}
                                    onChange={e => setTipoBuscaCliente(e.target.value as TipoBuscaCliente)}
                                    className="w-full sm:w-40 p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"
                                >
                                    <option value="nome">Nome</option>
                                    <option value="documento">Documento</option>
                                    <option value="idCliente">Código</option>
                                </select>
                            </div>
                            {/* Input Termo */}
                            <div className="flex-grow w-full">
                                <label htmlFor="termoBuscaCliente" className="block text-sm font-medium mb-1 text-slate-300 flex items-center gap-1">
                                    {tipoBuscaCliente === 'nome' ? <User size={16} /> : tipoBuscaCliente === 'documento' ? <ScanSearch size={16} /> : <Hash size={16} />}
                                    Termo:
                                </label>
                                <input
                                    id="termoBuscaCliente" type={tipoBuscaCliente === 'idCliente' ? 'number' : 'text'}
                                    value={termoBuscaCliente} onChange={e => setTermoBuscaCliente(e.target.value)}
                                    placeholder={getPlaceholderCliente()} required
                                    className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"
                                />
                            </div>
                            {/* Botão Buscar */}
                            <button type="submit" disabled={isBuscandoCliente} className={`flex-shrink-0 w-full sm:w-auto h-10 px-5 py-2 rounded text-white font-semibold flex items-center justify-center gap-2 transition-opacity ${isBuscandoCliente ? 'bg-sky-800 cursor-not-allowed opacity-70' : 'bg-sky-600 hover:bg-sky-700'}`}>
                                <Search size={18} />
                                {isBuscandoCliente ? 'Buscando...' : 'Buscar Cliente'}
                            </button>
                        </form>

                        {/* Erro da Busca de Cliente */}
                        {error && !isBuscandoCliente && clientesEncontrados.length === 0 && (
                            <p className="mt-4 text-sm text-red-400 flex items-center gap-1"><MdErrorOutline/>{error}</p>
                        )}

                        {/* Resultados da Busca de Cliente */}
                        {!isBuscandoCliente && clientesEncontrados.length > 0 && (
                            <div className="mt-6">
                                <h3 className="text-md mb-2 font-semibold text-slate-200">Clientes encontrados:</h3>
                                <ul className="space-y-2 max-h-48 overflow-y-auto pr-2">
                                    {clientesEncontrados.map(c => (
                                        <li
                                            key={`${c.idCli}-${c.idEndereco}`}
                                            onClick={() => handleSelecionarCliente(c)}
                                            className="p-3 bg-slate-700 hover:bg-sky-700 cursor-pointer rounded flex justify-between items-center text-sm transition-colors duration-150 shadow-sm"
                                            title={`Selecionar Cliente (ID: ${c.idCli})`}
                                        >
                                            <span className='flex items-center gap-2 text-slate-100'>
                                                <User size={16} className='text-slate-400'/> {c.getNomeCompleto?.()}
                                            </span>
                                            <span className="text-xs text-slate-400 flex items-center gap-1">
                                                <Hash size={14}/>{c.idCli} | <ScanSearch size={14}/> {c.numeroDocumento}
                                            </span>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        )}
                        {!isBuscandoCliente && !error && termoBuscaCliente && clientesEncontrados.length === 0 && (
                            <p className="mt-4 text-sm text-slate-400">Nenhum cliente encontrado com o termo "{termoBuscaCliente}".</p>
                        )}
                    </section>
                )}

                {/* -- Etapa 2 e 3: Seleção de Veículo e Histórico -- */}
                {clienteSelecionado && (
                    <section className="mb-6 p-4 md:p-6 bg-slate-800 rounded-lg shadow-lg max-w-4xl mx-auto border border-slate-600">
                        {/* Informações do Cliente Selecionado */}
                        <div className="mb-4 pb-3 border-b border-slate-700 flex flex-wrap justify-between items-center gap-2">
                            <h2 className='text-xl font-semibold text-sky-300 flex items-center gap-2'>
                                <UserCheck size={22}/> Cliente Selecionado: <span className='text-white font-bold'>{clienteSelecionado.getNomeCompleto?.()}</span>
                            </h2>
                            <button onClick={resetSelecaoCliente} className="text-xs text-sky-400 hover:text-sky-200 underline">Trocar Cliente</button>
                        </div>

                        {/* Erro ao buscar Veículos */}
                        {error && isLoadingVeiculos && (
                            <p className="mt-4 text-sm text-red-400 flex items-center gap-1"><MdErrorOutline/>{error}</p>
                        )}

                        {/* Loading Veículos */}
                        {isLoadingVeiculos && (
                            <div className='flex justify-center items-center py-6'>
                                <Loader2 className="h-6 w-6 animate-spin text-sky-400" />
                                <span className='ml-3 text-sky-300'>Carregando veículos...</span>
                            </div>
                        )}

                        {/* Lista de Veículos */}
                        {!isLoadingVeiculos && !error && (
                            <>
                                <h3 className="text-lg font-semibold text-slate-200 mb-3">2. Selecione o Veículo</h3>
                                {veiculosDoCliente.length === 0 ? (
                                    <p className="text-slate-400 text-sm">Nenhum veículo encontrado para este cliente.</p>
                                ) : (
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-6">
                                        {veiculosDoCliente.map(v => (
                                            <button
                                                key={v.id}
                                                onClick={() => handleSelecionarVeiculo(v)}
                                                className={`p-3 rounded text-left w-full transition-colors duration-150 border ${veiculoSelecionado?.id === v.id ? 'bg-sky-700 border-sky-500 ring-2 ring-sky-400' : 'bg-slate-700 hover:bg-slate-600 border-slate-600'}`}
                                            >
                                                <p className="font-semibold text-slate-100 flex items-center gap-1"><Car size={16} /> {v.placa} - {v.modelo}</p>
                                                <p className="text-xs text-slate-400">{v.montadora} - {v.cor} - Ano: {v.anoFabricacao ? new Date(v.anoFabricacao + 'T00:00:00Z').getFullYear() : '-'}</p>
                                            </button>
                                        ))}
                                    </div>
                                )}
                            </>
                        )}

                        {/* Botão para Iniciar Orçamento (só aparece se cliente E veículo estiverem selecionados) */}
                        {clienteSelecionado && veiculoSelecionado && (
                            <div className="mt-6 pt-4 border-t border-slate-700 text-center">
                                <h3 className="text-lg font-semibold text-slate-200 mb-3">3. Prosseguir para Orçamento</h3>
                                <button
                                    onClick={iniciarGeracaoOrcamento}
                                    className="px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-bold rounded-md shadow-lg flex items-center justify-center gap-2 mx-auto"
                                >
                                    Gerar Orçamento para {veiculoSelecionado.placa} <CircleArrowRight size={20}/>
                                </button>
                            </div>
                        )}

                        {/* Área para Histórico (a implementar a busca e exibição) */}
                        {veiculoSelecionado && (
                            <div className="mt-6 pt-4 border-t border-slate-700">
                                <h3 className="text-lg font-semibold text-slate-200 mb-3 flex items-center gap-2"><History size={20} className="text-slate-400"/> Histórico do Veículo <span className='font-mono text-xs bg-slate-600 px-1 rounded'>{veiculoSelecionado.placa}</span> (Opcional)</h3>
                                {/* Aqui entraria a chamada para fetchHistoricoServicos(veiculoSelecionado.id) */}
                                {/* E a exibição da lista/cards do histórico */}
                                <p className="text-sm text-slate-500 italic">(Funcionalidade de histórico ainda não implementada nesta tela)</p>
                            </div>
                        )}

                    </section>
                )}

                {/* Mensagem inicial */}
                {!clienteSelecionado && !isBuscandoCliente && !error && clientesEncontrados.length === 0 && (
                    <div className="text-center text-slate-400 mt-10 bg-slate-800/50 p-6 rounded-lg max-w-md mx-auto border border-slate-700">
                        <Search size={40} className="mx-auto mb-4 text-sky-500" />
                        <p>Comece buscando um cliente para iniciar o processo de orçamento.</p>
                    </div>
                )}

            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\orcamento\listar\page.tsx   |   componente ListarOrcamentosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/orcamento/listar/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdDescription, MdAdd, MdEdit, MdDelete, MdErrorOutline, MdCalendarToday, MdAttachMoney, MdListAlt
} from 'react-icons/md';
import { FileText, Hash, CalendarDays, DollarSign, Edit3, Trash2, ListChecks, Loader2, AlertCircle } from 'lucide-react';

// Interface para o DTO básico de Orcamento que vem da API de listagem
interface OrcamentoListDto {
    id: number;
    dataOrcamento: string;
    valorMaoDeObra: number;
    valorHora: number;
    quantidadeHoras: number;
    valorTotal: number;
    // Adicionar clienteNome ou oficinaDescricaoResumida se o backend os enviar na listagem
}

export default function ListarOrcamentosPage() {
    const [orcamentos, setOrcamentos] = useState<OrcamentoListDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // Estados para modal de deleção
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [orcamentoParaDeletar, setOrcamentoParaDeletar] = useState<OrcamentoListDto | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);

    const fetchOrcamentos = async () => {
        setIsLoading(true);
        setError(null);
        try {
            // Usando o endpoint que lista orçamentos simples (sem paginação por enquanto, pode adicionar depois)
            const response = await fetch('http://localhost:8080/rest/orcamentos');
            if (!response.ok) {
                if (response.status === 204) { // No Content
                    setOrcamentos([]);
                    return;
                }
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Erro ao buscar orçamentos`);
            }
            const data: OrcamentoListDto[] = await response.json();
            // Ordenar por ID decrescente (mais recentes primeiro) ou data
            data.sort((a, b) => b.id - a.id);
            setOrcamentos(data);
        } catch (err: any) {
            setError(err.message);
            setOrcamentos([]);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchOrcamentos();
    }, []);

    const openDeleteModal = (orcamento: OrcamentoListDto) => {
        setOrcamentoParaDeletar(orcamento);
        setShowDeleteModal(true);
    };

    const closeDeleteModal = () => {
        setOrcamentoParaDeletar(null);
        setShowDeleteModal(false);
        setError(null); // Limpa erro do modal
    };

    const confirmDelete = async () => {
        if (!orcamentoParaDeletar) return;
        setIsDeleting(true);
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/orcamentos/${orcamentoParaDeletar.id}`, { method: 'DELETE' });
            if (!response.ok && response.status !== 204) {
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Falha ao excluir orçamento`);
            }
            setOrcamentos(prev => prev.filter(o => o.id !== orcamentoParaDeletar.id));
            closeDeleteModal();
            // Adicionar um toast de sucesso seria bom aqui
        } catch (err: any) {
            setError(`Falha ao excluir: ${err.message}`);
            // Não fechar o modal se houver erro para o usuário ver
        } finally {
            setIsDeleting(false);
        }
    };

    const formatCurrency = (value: number | null | undefined): string => {
        if (value === null || value === undefined) return 'R$ 0,00';
        return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    };

    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return 'N/A';
        try {
            // A data já pode vir formatada ou como 'YYYY-MM-DD'
            return new Date(dateString.includes('T') ? dateString : dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) { return dateString; }
    };

    return (
        <>
            <NavBar active="orcamento-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="text-2xl md:text-3xl font-bold flex items-center gap-2 text-center sm:text-left">
                        <ListChecks size={28} className="text-sky-400" />
                        Orçamentos Registrados
                    </h1>
                    <Link href="/orcamento/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                            <MdAdd size={20}/> Novo Orçamento (Completo)
                        </button>
                    </Link>
                </div>

                {isLoading && (
                    <div className="flex justify-center items-center py-10">
                        <Loader2 className="h-8 w-8 animate-spin text-sky-400" />
                        <span className="ml-3 text-sky-300">Carregando orçamentos...</span>
                    </div>
                )}
                {error && !showDeleteModal && (
                    <div className="text-center text-red-400 py-4 bg-red-900/30 border border-red-700 rounded-md p-3">
                        <p className="flex items-center justify-center gap-1"><AlertCircle size={20}/> {error}</p>
                        <button onClick={fetchOrcamentos} className="mt-2 px-3 py-1 bg-sky-700 hover:bg-sky-600 rounded text-xs">Tentar Novamente</button>
                    </div>
                )}

                {!isLoading && !error && orcamentos.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-800/50 rounded-lg shadow-xl">Nenhum orçamento encontrado.</p>
                )}

                {!isLoading && orcamentos.length > 0 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                        {orcamentos.map((orc) => (
                            <div key={orc.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                    <span className="flex items-center gap-1 font-semibold text-sky-300">
                                        <Hash size={16} /> ID Orçam.: {orc.id}
                                    </span>
                                    <span className="flex items-center gap-1 text-slate-400">
                                        <CalendarDays size={16} /> {formatDate(orc.dataOrcamento)}
                                    </span>
                                </div>
                                <div className="p-4 space-y-3 flex-grow">
                                    <div>
                                        <h3 className="flex items-center text-2xl font-bold text-green-400 gap-1">
                                            {formatCurrency(orc.valorTotal)}
                                        </h3>
                                        <p className="text-xs text-slate-400">Valor Total do Orçamento</p>
                                    </div>
                                    <div className="text-sm space-y-1 text-slate-300 pt-2 border-t border-slate-700/50">
                                        <p><span className="font-medium text-slate-400">Mão de Obra (Taxa):</span> {formatCurrency(orc.valorMaoDeObra)}</p>
                                        <p><span className="font-medium text-slate-400">Valor/Hora:</span> {formatCurrency(orc.valorHora)}</p>
                                        <p><span className="font-medium text-slate-400">Qtd. Horas:</span> {orc.quantidadeHoras}h</p>
                                        {/* Aqui poderiam entrar mais detalhes resumidos se a API os retornasse */}
                                    </div>
                                </div>
                                <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                    <Link href={`/orcamento/alterar/${orc.id}`}>
                                        <button className="inline-flex items-center px-3 py-1.5 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1 shadow-sm" title="Alterar/Ver Detalhes">
                                            <Edit3 size={14} /> Detalhes/Alterar
                                        </button>
                                    </Link>
                                    <button
                                        onClick={() => openDeleteModal(orc)}
                                        className="inline-flex items-center px-3 py-1.5 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1 shadow-sm" title="Deletar">
                                        <Trash2 size={14} /> Deletar
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
                {/* Paginação pode ser adicionada aqui se o backend /rest/orcamentos suportar */}
            </main>

            {/* Modal de Confirmação de Deleção */}
            {showDeleteModal && orcamentoParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={closeDeleteModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={e => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4 flex items-center gap-2">
                            <Trash2 size={22} className="text-red-400" /> Confirmar Exclusão
                        </h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir o orçamento ID <span className="font-bold">{orcamentoParaDeletar.id}</span>?</p>
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3 bg-slate-700/30 p-3 rounded'>
                            <p><strong>Data:</strong> {formatDate(orcamentoParaDeletar.dataOrcamento)}</p>
                            <p><strong>Valor Total:</strong> {formatCurrency(orcamentoParaDeletar.valorTotal)}</p>
                        </div>
                        {error && isDeleting && (
                            <p className="text-red-400 text-sm mb-3 text-center bg-red-900/50 p-2 rounded">{error}</p>
                        )}
                        <div className="flex justify-end gap-4">
                            <button
                                type="button"
                                className="flex items-center justify-center gap-2 px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md focus:outline-none"
                                onClick={closeDeleteModal}
                                disabled={isDeleting}
                            >
                                <MdCancel /> Cancelar
                            </button>
                            <button
                                type="button"
                                className={`flex items-center justify-center gap-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md focus:outline-none ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                onClick={confirmDelete}
                                disabled={isDeleting}
                            >
                                {isDeleting ? <><Loader2 className="animate-spin mr-2"/> Excluindo...</> : <><MdDelete /> Sim, Excluir</>}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pagamento\alterar\[id]\page.tsx   |   componente AlterarPagamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pagamento/alterar/[id]/page.tsx
"use client";

import React, { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { useParams, useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
import { MdPayment, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle, MdCalendarToday, MdCreditCard, MdAttachMoney, MdListAlt, MdConfirmationNumber } from 'react-icons/md';

interface PagamentoRequest {
    dataPagamento: string;
    tipoPagamento: string;
    descontoPercentual: number;
    totalParcelas: number;
    valorServico: number;
    clienteId?: number | null;
    orcamentoId?: number | null;
}

interface PagamentoResponse extends PagamentoRequest {
    id: number;
    // O backend pode não retornar valorServico na PagamentoResponse,
    // mas ele é necessário para recalcular o display no frontend.
    // Se o backend não enviar, o usuário terá que re-informar ou
    // teremos que buscar o orçamento/serviço associado.
    // Para este exemplo, assumimos que o usuário deve confirmar/re-inserir o valorServico.
}

export default function AlterarPagamentoPage() {
    const router = useRouter();
    const params = useParams();
    const idPagamento = params.id as string;

    const [dataPagamento, setDataPagamento] = useState("");
    const [tipoPagamento, setTipoPagamento] = useState("dinheiro");
    const [valorServicoStr, setValorServicoStr] = useState(""); // Importante: Usuário precisa confirmar/re-digitar este valor
    const [descontoPercentual, setDescontoPercentual] = useState(0);
    const [totalParcelas, setTotalParcelas] = useState(1);
    const [valorParcelaDisplay, setValorParcelaDisplay] = useState("0,00");
    const [totalComDescontoDisplay, setTotalComDescontoDisplay] = useState("0,00");
    const [clienteIdStr, setClienteIdStr] = useState<string>("");
    const [orcamentoIdStr, setOrcamentoIdStr] = useState<string>("");
    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [notFoundError, setNotFoundError] = useState<string | null>(null);

    const descontosPorTipo: { [key: string]: number } = {
        dinheiro: 20, pix: 15, debito: 10,
        'credito a vista': 5, 'credito parcelado': 2,
    };

    const parseCurrency = (formattedValue: string): number => {
        if (!formattedValue) return 0;
        const cleanedValue = formattedValue.replace("R$ ", "").replace(/\./g, "").replace(",", ".");
        return parseFloat(cleanedValue) || 0;
    };
    const formatCurrency = (value: number | undefined): string => {
        if (value === undefined || value === null) return "0,00";
        return value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    };

    useEffect(() => {
        if (!idPagamento) {
            setNotFoundError("ID do registro de pagamento não fornecido.");
            setIsFetching(false); return;
        }
        setIsFetching(true);
        const fetchPagamento = async () => {
            setError(null); setNotFoundError(null);
            try {
                const response = await fetch(`http://localhost:8080/rest/pagamentos/${idPagamento}`);
                if (response.status === 404) throw new Error(`Registro de Pagamento ID ${idPagamento} não encontrado.`);
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                    throw new Error(errorData.message || `Falha ao carregar dados`);
                }
                const data: PagamentoResponse = await response.json();
                setDataPagamento(data.dataPagamento ? data.dataPagamento.split('T')[0] : new Date().toISOString().split('T')[0]);
                setTipoPagamento(data.tipoPagamento);
                setDescontoPercentual(data.descontoPercentual); // O nome no DTO é 'descontoPercentual'
                setTotalParcelas(data.totalParcelas || 1);
                // Importante: 'valorServico' pode não vir no DTO de PagamentoResponse.
                // Se vier, use-o: setValorServicoStr(formatCurrency(data.valorServico));
                // Caso contrário, o usuário precisará preencher este campo, ou você precisará buscar do orçamento.
                // Para este exemplo, vamos assumir que data.valorServico existe e foi preenchido pelo fetch.
                setValorServicoStr(formatCurrency(data.valorServico));

                setClienteIdStr(data.clienteId?.toString() || "");
                setOrcamentoIdStr(data.orcamentoId?.toString() || "");
            } catch (err: any) {
                setNotFoundError(err.message);
            } finally {
                setIsFetching(false);
            }
        };
        fetchPagamento();
    }, [idPagamento]);

    useEffect(() => {
        setDescontoPercentual(descontosPorTipo[tipoPagamento] || 0);
    }, [tipoPagamento]);

    useEffect(() => {
        const valorServicoNum = parseCurrency(valorServicoStr);
        const descontoNum = descontoPercentual || 0;
        const parcelasNum = totalParcelas || 1;
        if (valorServicoNum > 0) {
            const totalComDesc = valorServicoNum * (1 - (descontoNum / 100));
            const valorParcela = parcelasNum > 0 ? totalComDesc / parcelasNum : 0;
            setTotalComDescontoDisplay(formatCurrency(totalComDesc));
            setValorParcelaDisplay(formatCurrency(valorParcela));
        } else {
            setTotalComDescontoDisplay("0,00");
            setValorParcelaDisplay("0,00");
        }
    }, [valorServicoStr, descontoPercentual, totalParcelas]);

    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true); setError(null); setSuccess(null);
        const valorServicoNum = parseCurrency(valorServicoStr);
        if (valorServicoNum <= 0) {
            setError("Valor do Serviço deve ser maior que zero para alteração.");
            setIsLoading(false); return;
        }
        const requestBody: PagamentoRequest = {
            dataPagamento, tipoPagamento, descontoPercentual, totalParcelas, valorServico: valorServicoNum,
            clienteId: clienteIdStr ? parseInt(clienteIdStr, 10) : null,
            orcamentoId: orcamentoIdStr ? parseInt(orcamentoIdStr, 10) : null,
        };
        try {
            const response = await fetch(`http://localhost:8080/rest/pagamentos/${idPagamento}`, {
                method: "PUT", headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestBody),
            });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Erro ao atualizar registro`);
            }
            setSuccess("Registro de pagamento atualizado com sucesso!");
            setTimeout(() => { setSuccess(null); router.push('/pagamento/listar'); }, 2000);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetching) return (
        <> <NavBar active="pagamento-alterar" /> <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]"> <p className="text-sky-300 text-xl">Carregando...</p> </main> </>
    );
    if (notFoundError) return (
        <> <NavBar active="pagamento-alterar" /> <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]"> <div className="bg-slate-900 p-8 rounded-lg shadow-xl text-center"> <MdErrorOutline className="text-5xl text-red-400 mx-auto mb-4" /> <p className="text-red-400 text-lg mb-6">{notFoundError}</p> <Link href="/pagamento/listar" className="px-6 py-3 bg-sky-600 text-white rounded-md shadow hover:bg-sky-700">Voltar para Lista</Link> </div> </main> </>
    );

    return (
        <>
            <NavBar active="pagamento-alterar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-2xl mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdPayment className="text-3xl text-sky-400" />
                        Alterar Registro de Pagamento (ID: {idPagamento})
                    </h1>
                    <form onSubmit={handleUpdate} className="space-y-5">
                        {error && ( <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"> <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div> <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button> </div> )}
                        {success && ( <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700"> <MdCheckCircle className="text-xl" /> <span>{success}</span> </div> )}

                        <fieldset className="border border-slate-700 p-4 rounded space-y-4">
                            <legend className="text-lg font-semibold px-2 text-slate-300">Detalhes do Pagamento</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="data_pagamento_alt" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdCalendarToday size={16}/> Data:</label>
                                    <input type="date" id="data_pagamento_alt" name="data_pagamento_alt" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 date-input-fix" value={dataPagamento} onChange={(e) => setDataPagamento(e.target.value)} />
                                </div>
                                <div>
                                    <label htmlFor="tipo_pagamento_alt" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdCreditCard size={16}/> Tipo Pagamento:</label>
                                    <select id="tipo_pagamento_alt" name="tipo_pagamento_alt" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700" value={tipoPagamento} onChange={(e) => setTipoPagamento(e.target.value)}>
                                        <option value="dinheiro">Dinheiro</option> <option value="pix">PIX</option> <option value="debito">Débito</option>
                                        <option value="credito a vista">Crédito à Vista</option> <option value="credito parcelado">Crédito Parcelado</option>
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="valor_servico_alt" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdAttachMoney size={16}/> Valor Serviço (R$):</label>
                                    <input type="text" id="valor_servico_alt" name="valor_servico_alt" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700" value={valorServicoStr} onChange={e => setValorServicoStr(e.target.value)} placeholder="Ex: 1500,50" />
                                    <p className="text-xs text-slate-500 mt-1">Confirme/atualize o valor original do serviço.</p>
                                </div>
                                <div>
                                    <label htmlFor="desconto_alt" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdConfirmationNumber size={16}/> Desconto (%):</label>
                                    <input type="number" id="desconto_alt" name="desconto_alt" readOnly className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={descontoPercentual} />
                                </div>
                                <div>
                                    <label htmlFor="total_parcelas_alt" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdListAlt size={16}/> Nº Parcelas:</label>
                                    <select id="total_parcelas_alt" name="total_parcelas_alt" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700" value={totalParcelas} onChange={(e) => setTotalParcelas(parseInt(e.target.value, 10))}>
                                        <option value="1">1X</option> <option value="2">2X</option> <option value="3">3X</option>
                                        <option value="4">4X</option> <option value="5">5X</option>
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="valor_parcela_alt_display" className="block mb-1 text-sm font-medium text-slate-400">Valor Parcela (R$):</label>
                                    <input type="text" id="valor_parcela_alt_display" readOnly className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={valorParcelaDisplay} />
                                </div>
                            </div>
                            <div className="mt-4">
                                <label htmlFor="valor_total_desconto_alt_display" className="block mb-1 text-sm font-medium text-slate-400">Valor Total c/ Desconto (R$):</label>
                                <input type="text" id="valor_total_desconto_alt_display" readOnly className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 font-semibold cursor-not-allowed" value={totalComDescontoDisplay} />
                            </div>
                        </fieldset>

                        <fieldset className="border border-slate-700 p-4 rounded space-y-4">
                            <legend className="text-lg font-semibold px-2 text-slate-300">Associações (Opcional)</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="clienteIdStr_alt" className="block mb-1 text-sm font-medium text-slate-300">ID Cliente:</label>
                                    <input type="number" id="clienteIdStr_alt" name="clienteIdStr_alt" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700" value={clienteIdStr} onChange={(e) => setClienteIdStr(e.target.value)} placeholder="ID do cliente" />
                                </div>
                                <div>
                                    <label htmlFor="orcamentoIdStr_alt" className="block mb-1 text-sm font-medium text-slate-300">ID Orçamento:</label>
                                    <input type="number" id="orcamentoIdStr_alt" name="orcamentoIdStr_alt" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700" value={orcamentoIdStr} onChange={(e) => setOrcamentoIdStr(e.target.value)} placeholder="ID do orçamento" />
                                </div>
                            </div>
                        </fieldset>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button type="submit" className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 ${isLoading || isFetching ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isLoading || isFetching}>
                                {isLoading ? 'Salvando...' : (<><MdSave size={20}/> Salvar Alterações</>)}
                            </button>
                            <Link href="/pagamento/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center">
                                <MdArrowBack size={20}/> Cancelar
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pagamento\buscar\page.tsx   |   componente DeletarPagamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pagamento/deletar/[id]/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdPayment } from 'react-icons/md';

interface PagamentoInfo {
    id: number;
    dataPagamento: string;
    tipoPagamento: string;
    totalComDesconto: number;
    // Adicione mais campos se desejar mostrar na confirmação
}

export default function DeletarPagamentoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [pagamentoInfo, setPagamentoInfo] = useState<PagamentoInfo | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return 'N/A';
        try { return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { return dateString; }
    };
    const formatCurrency = (value: number | null | undefined): string => {
        if (value === null || value === undefined) return 'R$ 0,00';
        return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    };


    useEffect(() => {
        if (id) {
            setIsLoadingInfo(true); setError(null);
            const fetchPagamentoData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/pagamentos/${id}`;
                    const response = await fetch(apiUrl);
                    if (response.status === 404) throw new Error("Registro de Pagamento não encontrado para confirmar exclusão.");
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                        throw new Error(errorData.message || `Erro ao buscar dados`);
                    }
                    const data: PagamentoInfo = await response.json();
                    setPagamentoInfo(data);
                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados do registro para exclusão.");
                    setPagamentoInfo(null);
                } finally {
                    setIsLoadingInfo(false);
                }
            };
            fetchPagamentoData();
        } else {
            setError("ID do registro de pagamento inválido na URL.");
            setIsLoadingInfo(false);
        }
    }, [id]);

    const handleConfirmDelete = async () => {
        if (!id) { setError("Não é possível excluir: ID inválido."); return; }
        setIsDeleting(true); setError(null);
        try {
            const apiUrl = `http://localhost:8080/rest/pagamentos/${id}`;
            const response = await fetch(apiUrl, { method: 'DELETE' });
            if (!response.ok && response.status !== 204) { // 204 No Content também é sucesso para DELETE
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao excluir registro: ${errorText || response.statusText}`);
            }
            console.log(`Registro de Pagamento ID ${id} excluído com sucesso.`);
            router.push('/pagamento/listar?deleted=true'); // Adiciona query param para possível mensagem de sucesso na lista
        } catch (err: any) {
            setError(err.message || "Falha ao excluir registro de pagamento.");
            setIsDeleting(false);
        }
    };

    const handleCancel = () => {
        router.push('/pagamento/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="pagamento-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-center text-sky-300 py-10 text-xl">Carregando dados para confirmação...</p>
                </main>
            </>
        );
    }

    if (error && !pagamentoInfo) { // Erro ao buscar o item, e nenhum item carregado
        return (
            <>
                <NavBar active="pagamento-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" /> Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdArrowBack size={20}/> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    if (!pagamentoInfo && !isLoadingInfo) { // Nenhum erro, mas nenhum item encontrado (ex: ID inválido ou já deletado)
        return (
            <>
                <NavBar active="pagamento-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-yellow-400">
                            <MdWarningAmber className="text-3xl" /> Registro Não Encontrado
                        </h2>
                        <p className="text-center text-yellow-400 bg-yellow-900/50 p-3 rounded border border-yellow-500 mb-6">
                            O registro de pagamento ID {id} não foi encontrado ou pode já ter sido excluído.
                        </p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdArrowBack size={20}/> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }


    return (
        <>
            <NavBar active="pagamento-deletar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <MdDeleteForever className="text-3xl" /> Confirmar Exclusão de Pagamento
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o seguinte registro de pagamento?</p>

                    {pagamentoInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID do Registro:</strong> {pagamentoInfo.id}</p>
                            <p><strong>Data:</strong> {formatDate(pagamentoInfo.dataPagamento)}</p>
                            <p><strong>Tipo:</strong> {pagamentoInfo.tipoPagamento}</p>
                            <p><strong>Valor Total:</strong> {formatCurrency(pagamentoInfo.totalComDesconto)}</p>
                        </div>
                    )}

                    {error && ( // Erro durante a tentativa de exclusão
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever size={20}/> Sim, Excluir</>)}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel size={20}/> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pagamento\cadastrar\page.tsx   |   componente CadastrarPagamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pagamento/cadastrar/page.tsx
"use client";

import React, { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdPayment, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle, MdAttachMoney, MdCalendarToday, MdCreditCard, MdListAlt, MdConfirmationNumber } from 'react-icons/md';

interface PagamentoRequest {
    dataPagamento: string;
    tipoPagamento: string;
    descontoPercentual: number;
    totalParcelas: number;
    valorServico: number;
    clienteId?: number | null;
    orcamentoId?: number | null;
}

export default function CadastrarPagamentoPage() {
    const today = new Date().toISOString().split('T')[0];
    const [dataPagamento, setDataPagamento] = useState(today);
    const [tipoPagamento, setTipoPagamento] = useState("dinheiro");
    const [valorServicoStr, setValorServicoStr] = useState("");
    const [descontoPercentual, setDescontoPercentual] = useState(20);
    const [totalParcelas, setTotalParcelas] = useState(1);
    const [valorParcelaDisplay, setValorParcelaDisplay] = useState("0,00");
    const [totalComDescontoDisplay, setTotalComDescontoDisplay] = useState("0,00");
    const [clienteIdStr, setClienteIdStr] = useState<string>("");
    const [orcamentoIdStr, setOrcamentoIdStr] = useState<string>("");
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const descontosPorTipo: { [key: string]: number } = {
        dinheiro: 20, pix: 15, debito: 10,
        'credito a vista': 5, 'credito parcelado': 2,
    };

    useEffect(() => {
        setDescontoPercentual(descontosPorTipo[tipoPagamento] || 0);
    }, [tipoPagamento]);

    const parseCurrency = (formattedValue: string): number => {
        if (!formattedValue) return 0;
        const cleanedValue = formattedValue.replace("R$ ", "").replace(/\./g, "").replace(",", ".");
        return parseFloat(cleanedValue) || 0;
    };

    const formatCurrency = (value: number): string => {
        return value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    };

    useEffect(() => {
        const valorServicoNum = parseCurrency(valorServicoStr);
        const descontoNum = descontoPercentual || 0;
        const parcelasNum = totalParcelas || 1;
        if (valorServicoNum > 0) {
            const totalComDesc = valorServicoNum * (1 - (descontoNum / 100));
            const valorParcela = parcelasNum > 0 ? totalComDesc / parcelasNum : 0;
            setTotalComDescontoDisplay(formatCurrency(totalComDesc));
            setValorParcelaDisplay(formatCurrency(valorParcela));
        } else {
            setTotalComDescontoDisplay("0,00");
            setValorParcelaDisplay("0,00");
        }
    }, [valorServicoStr, descontoPercentual, totalParcelas]);

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true); setError(null); setSuccess(null);
        const valorServicoNum = parseCurrency(valorServicoStr);

        if (valorServicoNum <= 0) {
            setError("Valor do Serviço deve ser maior que zero.");
            setIsLoading(false); return;
        }

        const requestBody: PagamentoRequest = {
            dataPagamento, tipoPagamento, descontoPercentual, totalParcelas, valorServico: valorServicoNum,
            clienteId: clienteIdStr ? parseInt(clienteIdStr, 10) : null,
            orcamentoId: orcamentoIdStr ? parseInt(orcamentoIdStr, 10) : null,
        };
        try {
            const response = await fetch("http://localhost:8080/rest/pagamentos", {
                method: "POST", headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestBody),
            });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }
            setSuccess("Pagamento registrado com sucesso!");
            setDataPagamento(today); setTipoPagamento("dinheiro");
            setValorServicoStr(""); setTotalParcelas(1);
            setClienteIdStr(""); setOrcamentoIdStr("");
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.message || "Falha ao registrar pagamento.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="pagamento-cadastrar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-2xl mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdPayment className="text-3xl text-sky-400" />
                        Registrar Novo Pagamento
                    </h1>
                    <form onSubmit={handleSubmit} className="space-y-5">
                        {error && (
                            <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                            </div>
                        )}
                        {success && (
                            <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700">
                                <MdCheckCircle className="text-xl" /> <span>{success}</span>
                            </div>
                        )}

                        <fieldset className="border border-slate-700 p-4 rounded space-y-4">
                            <legend className="text-lg font-semibold px-2 text-slate-300">Detalhes do Pagamento</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="data_pagamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdCalendarToday size={16}/> Data:</label>
                                    <input type="date" id="data_pagamento" name="data_pagamento" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataPagamento} onChange={(e) => setDataPagamento(e.target.value)} />
                                </div>
                                <div>
                                    <label htmlFor="tipo_pagamento" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdCreditCard size={16}/> Tipo Pagamento:</label>
                                    <select id="tipo_pagamento" name="tipo_pagamento" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoPagamento} onChange={(e) => setTipoPagamento(e.target.value)} >
                                        <option value="dinheiro">Dinheiro</option> <option value="pix">PIX</option> <option value="debito">Débito</option>
                                        <option value="credito a vista">Crédito à Vista</option> <option value="credito parcelado">Crédito Parcelado</option>
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="valor_servico" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdAttachMoney size={16}/> Valor Serviço (R$):</label>
                                    <input type="text" id="valor_servico" name="valor_servico" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={valorServicoStr} onChange={e => setValorServicoStr(e.target.value)} placeholder="Ex: 1500,50" />
                                </div>
                                <div>
                                    <label htmlFor="desconto" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdConfirmationNumber size={16}/> Desconto (%):</label>
                                    <input type="number" id="desconto" name="desconto" readOnly className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={descontoPercentual} />
                                </div>
                                <div>
                                    <label htmlFor="total_parcelas" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300"><MdListAlt size={16}/> Nº Parcelas:</label>
                                    <select id="total_parcelas" name="total_parcelas" required className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={totalParcelas} onChange={(e) => setTotalParcelas(parseInt(e.target.value, 10))} >
                                        <option value="1">1X</option> <option value="2">2X</option> <option value="3">3X</option>
                                        <option value="4">4X</option> <option value="5">5X</option>
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="valor_parcela" className="block mb-1 text-sm font-medium text-slate-400">Valor Parcela (R$):</label>
                                    <input type="text" id="valor_parcela" readOnly className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={valorParcelaDisplay} />
                                </div>
                            </div>
                            <div className="mt-4">
                                <label htmlFor="valor_total_desconto" className="block mb-1 text-sm font-medium text-slate-400">Valor Total c/ Desconto (R$):</label>
                                <input type="text" id="valor_total_desconto" readOnly className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 cursor-not-allowed font-semibold" value={totalComDescontoDisplay} />
                            </div>
                        </fieldset>

                        <fieldset className="border border-slate-700 p-4 rounded space-y-4">
                            <legend className="text-lg font-semibold px-2 text-slate-300">Associações (Opcional)</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label htmlFor="clienteIdStr" className="block mb-1 text-sm font-medium text-slate-300">ID Cliente:</label>
                                    <input type="number" id="clienteIdStr" name="clienteIdStr" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={clienteIdStr} onChange={(e) => setClienteIdStr(e.target.value)} placeholder="ID numérico do cliente" />
                                </div>
                                <div>
                                    <label htmlFor="orcamentoIdStr" className="block mb-1 text-sm font-medium text-slate-300">ID Orçamento:</label>
                                    <input type="number" id="orcamentoIdStr" name="orcamentoIdStr" className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={orcamentoIdStr} onChange={(e) => setOrcamentoIdStr(e.target.value)} placeholder="ID numérico do orçamento" />
                                </div>
                            </div>
                        </fieldset>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button type="submit" className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isLoading} >
                                {isLoading ? 'Salvando...' : (<><MdSave size={20}/> Salvar Registro</>)}
                            </button>
                            <Link href="/pagamento/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20}/> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pagamento\deletar\[id]\page.tsx   |   componente (nome não identificado)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――



//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pagamento\listar\page.tsx   |   componente ListarPagamentosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pagamento/listar/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdPayment, MdAdd, MdEdit, MdDelete, MdErrorOutline, MdFilterList,
    MdChevronLeft, MdChevronRight, MdAttachMoney, MdCalendarToday,
    MdCreditCard, MdListAlt, MdPercent, MdCancel // Adicionado MdCancel para o modal
} from 'react-icons/md';
import { Hash, Edit3, Trash2, CalendarDays, CreditCard, Tag, ListOrdered, Info, Delete } from 'lucide-react'; // Usando Lucide para consistência nos cards

interface Pagamento {
    id: number;
    dataPagamento: string;
    tipoPagamento: string;
    desconto: number; // Percentual
    totalParcelas: string;
    valorParcelas: number;
    totalComDesconto: number;
    clienteId?: number | null;
    orcamentoId?: number | null;
}

interface PaginatedPagamentosResponse {
    content: Pagamento[];
    totalPages: number;
    totalElements: number;
    number: number; // Página atual (base 0)
    size: number;
}

export default function ListarPagamentosPage() {
    const [pagamentos, setPagamentos] = useState<Pagamento[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const [filtroTipo, setFiltroTipo] = useState("");
    const [filtroDataInicio, setFiltroDataInicio] = useState("");
    const [filtroDataFim, setFiltroDataFim] = useState("");
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize] = useState(12);

    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [pagamentoParaDeletar, setPagamentoParaDeletar] = useState<Pagamento | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);

    const fetchPagamentos = async (page = currentPage) => {
        setIsLoading(true);
        setError(null);
        try {
            const queryParams = new URLSearchParams({
                page: page.toString(),
                size: pageSize.toString(),
                sort: 'id,asc' // MODIFICADO: Ordenar por ID ascendente
            });
            if (filtroTipo) queryParams.append('tipoPagamento', filtroTipo);
            if (filtroDataInicio) queryParams.append('dataInicio', filtroDataInicio);
            if (filtroDataFim) queryParams.append('dataFim', filtroDataFim);

            const response = await fetch(`http://localhost:8080/rest/pagamentos?${queryParams.toString()}`);
            if (!response.ok) {
                if (response.status === 204) {
                    setPagamentos([]); setTotalPages(0); setCurrentPage(0); return;
                }
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Erro ao buscar pagamentos`);
            }
            const data: PaginatedPagamentosResponse = await response.json();
            setPagamentos(data.content || []);
            setTotalPages(data.totalPages || 0);
            setCurrentPage(data.number || 0);
        } catch (err: any) {
            setError(err.message); setPagamentos([]); setTotalPages(0); setCurrentPage(0);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchPagamentos(0);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    const handleFilterSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        fetchPagamentos(0);
    };

    const openDeleteModal = (pagamento: Pagamento) => {
        setPagamentoParaDeletar(pagamento);
        setShowDeleteModal(true);
        setError(null);
    };

    const closeDeleteModal = () => {
        setPagamentoParaDeletar(null);
        setShowDeleteModal(false);
    };

    const confirmDelete = async () => {
        if (!pagamentoParaDeletar) return;
        setIsDeleting(true);
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/pagamentos/${pagamentoParaDeletar.id}`, { method: 'DELETE' });
            if (!response.ok && response.status !== 204) {
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Falha ao excluir registro`);
            }
            fetchPagamentos(currentPage);
            closeDeleteModal();
        } catch (err: any) {
            setError(`Falha ao excluir: ${err.message}`);
        } finally {
            setIsDeleting(false);
        }
    };

    const formatCurrency = (value: number | null | undefined): string => {
        if (value === null || value === undefined) return 'R$ 0,00';
        return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    };

    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return 'N/A';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) { return dateString; }
    };

    return (
        <>
            <NavBar active="pagamento-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="text-2xl md:text-3xl font-bold flex items-center gap-2 text-center sm:text-left">
                        <MdPayment className="text-3xl text-sky-400" />
                        Registros de Pagamento
                    </h1>
                    <Link href="/pagamento/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                            <MdAdd size={20}/> Novo Registro
                        </button>
                    </Link>
                </div>

                <form onSubmit={handleFilterSubmit} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md flex flex-wrap gap-4 items-end">
                    <div>
                        <label htmlFor="filtroDataInicio" className="text-sm text-slate-300 block mb-1">De:</label>
                        <input type="date" id="filtroDataInicio" value={filtroDataInicio} onChange={e => setFiltroDataInicio(e.target.value)}
                               className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"/>
                    </div>
                    <div>
                        <label htmlFor="filtroDataFim" className="text-sm text-slate-300 block mb-1">Até:</label>
                        <input type="date" id="filtroDataFim" value={filtroDataFim} onChange={e => setFiltroDataFim(e.target.value)}
                               className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"/>
                    </div>
                    <div>
                        <label htmlFor="filtroTipo" className="text-sm text-slate-300 block mb-1">Tipo Pag.:</label>
                        <select id="filtroTipo" value={filtroTipo} onChange={e => setFiltroTipo(e.target.value)}
                                className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white min-w-[150px]">
                            <option value="">Todos</option>
                            <option value="dinheiro">Dinheiro</option>
                            <option value="pix">PIX</option>
                            <option value="debito">Débito</option>
                            <option value="credito a vista">Crédito à Vista</option>
                            <option value="credito parcelado">Crédito Parcelado</option>
                        </select>
                    </div>
                    <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                        <MdFilterList size={20}/> Filtrar
                    </button>
                </form>

                {isLoading && <p className="text-center text-sky-300 py-10">Carregando registros...</p>}
                {error && !showDeleteModal && (
                    <div className="text-center text-red-400 py-4 bg-red-900/30 border border-red-700 rounded-md">
                        <p className="flex items-center justify-center gap-2"><MdErrorOutline size={22}/> Erro ao carregar: {error}</p>
                        <button onClick={() => fetchPagamentos(0)} className="mt-2 px-3 py-1 bg-sky-600 hover:bg-sky-700 rounded text-white">
                            Tentar Novamente
                        </button>
                    </div>
                )}

                {!isLoading && !error && pagamentos.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhum registro de pagamento encontrado.</p>
                )}

                {!isLoading && pagamentos.length > 0 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                        {pagamentos.map((pag) => (
                            <div key={pag.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                    <span className="flex items-center gap-1 font-semibold text-sky-300">
                                        <Hash size={16} /> ID: {pag.id}
                                    </span>
                                    <span className="flex items-center gap-1 text-slate-400">
                                        <CalendarDays size={16} /> {formatDate(pag.dataPagamento)}
                                    </span>
                                </div>
                                <div className="p-4 space-y-3 flex-grow">
                                    <div>
                                        <h3 className="flex items-center text-lg font-semibold mb-1 text-sky-200 gap-1">
                                            <MdAttachMoney size={22} className="text-green-400"/> {formatCurrency(pag.totalComDesconto)}
                                        </h3>
                                        <p className="text-xs text-slate-400">Total com Desconto</p>
                                    </div>
                                    <div className="text-sm space-y-1 text-slate-300">
                                        <p className="flex items-center gap-1.5"><CreditCard size={15} className="text-slate-500"/> Tipo: <span className="font-medium">{pag.tipoPagamento}</span></p>
                                        <p className="flex items-center gap-1.5"><ListOrdered size={15} className="text-slate-500"/> Parcelas: <span className="font-medium">{pag.totalParcelas}x de {formatCurrency(pag.valorParcelas)}</span></p>
                                        <p className="flex items-center gap-1.5"><Tag size={15} className="text-slate-500"/> Desconto: <span className="font-medium">{pag.desconto?.toFixed(1)}%</span></p>
                                        {pag.clienteId && <p className="flex items-center gap-1.5"><Info size={15} className="text-slate-500"/> Cliente ID: <span className="font-medium">{pag.clienteId}</span></p>}
                                        {pag.orcamentoId && <p className="flex items-center gap-1.5"><Info size={15} className="text-slate-500"/> Orçamento ID: <span className="font-medium">{pag.orcamentoId}</span></p>}
                                    </div>
                                </div>
                                <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                    <Link href={`/pagamento/alterar/${pag.id}`}>
                                        <button className="inline-flex items-center px-3 py-1.5 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1 shadow-sm" title="Alterar">
                                            <Edit3 size={14} /> Editar
                                        </button>
                                    </Link>
                                    <button
                                        onClick={() => openDeleteModal(pag)}
                                        className="inline-flex items-center px-3 py-1.5 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1 shadow-sm" title="Deletar">
                                        <Trash2 size={14} /> Deletar
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}

                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-8 gap-3">
                        <button onClick={() => fetchPagamentos(currentPage - 1)} disabled={currentPage === 0}
                                className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                            <MdChevronLeft size={20}/> Anterior
                        </button>
                        <span className="text-slate-300 text-sm">
                             Página {currentPage + 1} de {totalPages}
                        </span>
                        <button onClick={() => fetchPagamentos(currentPage + 1)} disabled={currentPage >= totalPages - 1}
                                className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                            Próxima <MdChevronRight size={20}/>
                        </button>
                    </div>
                )}
            </main>

            {showDeleteModal && pagamentoParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={closeDeleteModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={e => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4 flex items-center gap-2">
                            <Trash2 size={22} className="text-red-400" /> Confirmar Exclusão
                        </h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir este registro de pagamento?</p>
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3 bg-slate-700/30 p-3 rounded'>
                            <p><strong>ID:</strong> {pagamentoParaDeletar.id}</p>
                            <p><strong>Data:</strong> {formatDate(pagamentoParaDeletar.dataPagamento)}</p>
                            <p><strong>Tipo:</strong> {pagamentoParaDeletar.tipoPagamento}</p>
                            <p><strong>Valor Total:</strong> {formatCurrency(pagamentoParaDeletar.totalComDesconto)}</p>
                        </div>
                        {error && isDeleting && (
                            <p className="text-red-400 text-sm mb-3 text-center bg-red-900/50 p-2 rounded">{error}</p>
                        )}
                        <div className="flex justify-end gap-4">
                            <button
                                type="button"
                                className="flex items-center justify-center gap-2 px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md focus:outline-none"
                                onClick={closeDeleteModal}
                                disabled={isDeleting}
                            >
                                <MdCancel /> Cancelar
                            </button>
                            <button
                                type="button"
                                className={`flex items-center justify-center gap-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md focus:outline-none ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                onClick={confirmDelete}
                                disabled={isDeleting}
                            >
                                {isDeleting ? 'Excluindo...' : <><Delete /> Sim, Excluir</>}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pagamento\page.tsx   |   componente PagamentoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

import NavBar from "@/components/nav-bar";

export default function PagamentoPage(){
    return(
        <>
            <NavBar active="pagamento"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Pagamento</h2>
                </div>
            </main>
        </>

    )
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\page.tsx   |   componente HomePage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/page.tsx  (Substitua o conteúdo do seu page.tsx atual por este)
import NavBar from "@/components/nav-bar"; // Corrigido para NavBar

export default function HomePage() { // Renomeado para HomePage por clareza
    return (
        <>
            {/* Verifica se o NavBar está sendo importado corretamente */}
            <NavBar active="inicio" />

            {/* Conteúdo e Estilo da sua página de início original */}
            <main
                className="flex items-center justify-center min-h-screen text-white bg-cover bg-center bg-no-repeat"
                // Define a imagem de fundo
                style={{
                    backgroundImage: `url('/admin-ajax.png')`, // Caminho relativo à pasta /public
                    backgroundColor: '#012A46', // Cor de fundo fallback
                }}
            >
                {/* Conteúdo sobre a imagem */}
                <section className="bg-black/50 backdrop-blur-sm max-w-2xl p-8 m-4 rounded-xl text-center">
                    <h1 className="mb-4 text-4xl font-bold">Bem-vindo à Oficina Virtual</h1>
                    <p className="mb-8 text-lg">
                        Descubra uma nova forma de cuidar do seu veículo com praticidade e eficiência. Experimente nossa plataforma e agende seu serviço online.
                    </p>
                    {/* Verifique se o botão ou link desejado está aqui */}
                    <button className="px-6 py-3 font-semibold text-white transition bg-[#075985] rounded-md shadow hover:bg-[#075985]/90">
                        Agendar Serviço
                    </button>
                </section>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pecas\alterar\[id]\page.tsx   |   componente AlterarPecaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pecas/alterar/[id]/page.tsx
"use client";

import React, { useState, useEffect, FormEvent, useMemo } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    Edit3 as EditIcon, Package, Car, Building, Tag, Calendar, DollarSign, Percent, Calculator, Save, ArrowLeft,
    Info, AlertCircle, CheckCircle, Loader2
} from 'lucide-react';
import { MdErrorOutline, MdCheckCircle } from 'react-icons/md';

// Interfaces
interface PecaResponseDto { // Para buscar dados
    id: number;
    tipoVeiculo: string;
    fabricante: string;
    descricao: string;
    dataCompra: string;
    preco: number;
    desconto: number;
    totalDesconto: number;
}
interface PecaFormData { // Para o formulário
    tipoVeiculo: string;
    fabricante: string;
    descricaoPeca: string;
    dataCompra: string;
    preco: string;
    desconto: string;
}

// Tipos de veículo (igual ao cadastro)
const tiposVeiculo = ["Carro", "Moto", "Caminhão", "Ônibus", "Utilitário", "Outro"];

export default function AlterarPecaPage() {
    const router = useRouter();
    const params = useParams();
    const id = params.id as string;

    const [formData, setFormData] = useState<PecaFormData>({
        tipoVeiculo: "", fabricante: "", descricaoPeca: "", dataCompra: "", preco: "0,00", desconto: "0,00",
    });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [originalDataLoaded, setOriginalDataLoaded] = useState(false);

    // Funções de formatação/parse (iguais ao cadastro)
    const parseInputCurrencyToNumber = (inputValue: string): number => {
        if (!inputValue) return 0;
        const cleaned = inputValue.replace(/\./g, '').replace(',', '.');
        const num = parseFloat(cleaned);
        return isNaN(num) ? 0 : num;
    };
    const formatNumberToInputCurrencyString = (value: number): string => {
        if (value === null || value === undefined || isNaN(value)) return '0,00';
        return value.toFixed(2).replace('.', ',');
    };
    const formatNumberToDisplayCurrencyString = (value: number): string => {
        if (value === null || value === undefined || isNaN(value)) return 'R$ 0,00';
        return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL', minimumFractionDigits: 2, maximumFractionDigits: 2 });
    };

    // Buscar dados da peça ao carregar
    useEffect(() => {
        if (!id) {
            setError("ID da peça não fornecido na URL.");
            setIsFetching(false);
            return;
        }
        const fetchPeca = async () => {
            setIsFetching(true);
            setError(null);
            setOriginalDataLoaded(false);
            try {
                const response = await fetch(`http://localhost:8080/rest/pecas/${id}`);
                if (response.status === 404) throw new Error(`Peça com ID ${id} não encontrada.`);
                if (!response.ok) throw new Error(`Erro HTTP ${response.status}: Falha ao buscar dados da peça.`);

                const data: PecaResponseDto = await response.json();
                setFormData({
                    tipoVeiculo: data.tipoVeiculo || "",
                    fabricante: data.fabricante || "",
                    descricaoPeca: data.descricao || "",
                    dataCompra: data.dataCompra ? data.dataCompra.split('T')[0] : "", // Formata YYYY-MM-DD
                    preco: formatNumberToInputCurrencyString(data.preco),
                    desconto: formatNumberToInputCurrencyString(data.desconto),
                });
                setOriginalDataLoaded(true);

            } catch (err: any) {
                setError(err.message || "Erro desconhecido ao carregar peça.");
            } finally {
                setIsFetching(false);
            }
        };
        fetchPeca();
    }, [id]);

    // Cálculo do total (igual ao cadastro)
    const totalComDesconto = useMemo(() => {
        const precoNum = parseInputCurrencyToNumber(formData.preco);
        const descontoNum = parseInputCurrencyToNumber(formData.desconto);
        if (precoNum <= 0) return 0;
        const total = precoNum - descontoNum;
        return Math.max(0, total);
    }, [formData.preco, formData.desconto]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };
    const handleCurrencyChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        const cleanedValue = value.replace(/[^0-9,]/g, '');
        setFormData(prev => ({ ...prev, [name]: cleanedValue }));
    };


    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!originalDataLoaded) { // Não submeter se dados originais não carregaram
            setError("Dados originais não carregados. Não é possível salvar.");
            return;
        }
        setIsSubmitting(true); setError(null); setSuccess(null);

        const precoNum = parseInputCurrencyToNumber(formData.preco);
        const descontoNum = parseInputCurrencyToNumber(formData.desconto);
        const totalDescNum = totalComDesconto;

        if (precoNum <= 0 || descontoNum < 0 || descontoNum > precoNum) {
            setError("Verifique os valores de Preço e Desconto.");
            setIsSubmitting(false);
            return;
        }

        const payload = {
            tipoVeiculo: formData.tipoVeiculo,
            fabricante: formData.fabricante,
            descricao: formData.descricaoPeca,
            dataCompra: formData.dataCompra,
            preco: precoNum,
            desconto: descontoNum,
            totalDesconto: totalDescNum
        };

        console.log("Enviando payload para UPDATE Peça:", JSON.stringify(payload, null, 2));

        try {
            const response = await fetch(`http://localhost:8080/rest/pecas/${id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Erro ao atualizar peça`);
            }

            setSuccess(`Peça (ID: ${id}) atualizada com sucesso!`);
            setTimeout(() => {
                setSuccess(null);
                router.push('/pecas/listar'); // Volta para a lista após sucesso
            }, 3000);

        } catch (err: any) {
            setError(err.message || "Falha ao atualizar peça.");
            console.error("Erro no fetch PUT Peça:", err);
        } finally {
            setIsSubmitting(false);
        }
    };

    // Renderização condicional para loading e erro inicial
    if (isFetching) {
        return (
            <>
                <NavBar active="pecas" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados da peça...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !originalDataLoaded) { // Erro grave ao carregar dados
        return (
            <>
                <NavBar active="pecas" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl text-center w-full max-w-lg">
                        <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4"/>
                        <h2 className="text-xl font-semibold text-red-400 mb-3">Erro ao Carregar Dados</h2>
                        <p className="text-slate-300 mb-6">{error}</p>
                        <Link href="/pecas/listar">
                            <button className="px-6 py-2 bg-sky-600 hover:bg-sky-700 rounded-md text-white font-semibold">Voltar para Lista</button>
                        </Link>
                    </div>
                </main>
            </>
        );
    }


    return (
        <>
            {/* Use a chave correta para 'active' na NavBar */}
            <NavBar active="pecas-alterar" />
            <main className="container mx-auto px-4 py-10 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-3xl mx-auto border border-slate-700">
                    <h1 className="flex items-center justify-center gap-2 text-xl sm:text-2xl md:text-3xl font-bold mb-6 sm:mb-8 text-center">
                        <EditIcon size={30} className="text-sky-400" />
                        Alterar Peça (ID: {id})
                    </h1>

                    {/* Mensagens de Erro/Sucesso do Submit */}
                    {error && !isFetching && (
                        <div className="relative mb-6 text-red-400 bg-red-900/50 p-3 sm:p-4 pr-10 rounded border border-red-500 text-sm" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-lg" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-3 sm:px-4 py-1 sm:py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-lg sm:text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 mb-6 rounded bg-green-900/30 border border-green-700 text-sm">
                            <MdCheckCircle className="text-lg" /> <span>{success}</span>
                        </div>
                    )}

                    {/* Formulário similar ao de cadastro */}
                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                            {/* Campos do formulário (iguais ao de cadastro) */}
                            <div>
                                <label htmlFor="tipoVeiculo" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Car size={16}/> Tipo Veículo (Aplicação):</label>
                                <select id="tipoVeiculo" name="tipoVeiculo" value={formData.tipoVeiculo} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500">
                                    <option value="" disabled>Selecione...</option>
                                    {tiposVeiculo.map(tv => (<option key={tv} value={tv}>{tv}</option>))}
                                </select>
                            </div>
                            <div>
                                <label htmlFor="fabricante" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Building size={16}/> Fabricante/Marca da Peça:</label>
                                <input type="text" id="fabricante" name="fabricante" value={formData.fabricante} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500"/>
                            </div>
                            <div className="md:col-span-2">
                                <label htmlFor="descricaoPeca" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Tag size={16}/> Descrição da Peça:</label>
                                <input type="text" id="descricaoPeca" name="descricaoPeca" value={formData.descricaoPeca} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500"/>
                            </div>
                            <div>
                                <label htmlFor="dataCompra" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Calendar size={16}/> Data da Compra:</label>
                                <input type="date" id="dataCompra" name="dataCompra" value={formData.dataCompra} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500 date-input-fix"/>
                            </div>
                            <div>
                                <label htmlFor="preco" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><DollarSign size={16}/> Preço (R$):</label>
                                <input type="text" id="preco" name="preco" value={formData.preco} onChange={handleCurrencyChange} required placeholder="0,00" className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500"/>
                            </div>
                            <div>
                                <label htmlFor="desconto" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Percent size={16}/> Desconto (Valor R$):</label>
                                <input type="text" id="desconto" name="desconto" value={formData.desconto} onChange={handleCurrencyChange} required placeholder="0,00" className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500"/>
                            </div>
                            <div>
                                <label className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-400"><Calculator size={16}/> Preço Final (R$):</label>
                                <input type="text" value={formatNumberToDisplayCurrencyString(totalComDesconto)} readOnly className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-md h-10 cursor-not-allowed font-semibold text-green-400"/>
                            </div>
                        </div>

                        {/* Botões */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-6 mt-6 border-t border-slate-700">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 w-full sm:w-auto px-6 sm:px-8 py-2.5 sm:py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isSubmitting || isFetching}
                            >
                                <Save size={18}/> {isSubmitting ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/pecas/listar" className="w-full sm:w-auto">
                                <button type="button" className="flex items-center justify-center gap-2 w-full px-6 sm:px-8 py-2.5 sm:py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center">
                                    <ArrowLeft size={18}/> Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pecas\buscar\page.tsx   |   componente BuscarPecasPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pecas/buscar/page.tsx
"use client";

import React, { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    Search, Package, Car, Building, Tag, Calendar, DollarSign, Percent, Calculator, Hash, Edit3, Trash2,
    Loader2, AlertCircle, Filter, ListX, ArrowLeft
} from 'lucide-react';
import { MdErrorOutline } from 'react-icons/md';

// Interfaces (iguais à listagem)
interface PecaResponseDto { id: number; tipoVeiculo: string; fabricante: string; descricao: string; dataCompra: string; preco: number; desconto: number; totalDesconto: number; }
interface PecaParaLista { id: number; tipoVeiculo: string; fabricante: string; descricaoPeca: string; dataCompraFormatada: string; precoFormatado: string; descontoFormatado: string; totalComDescontoFormatado: string; }

// Tipos de busca
type TipoBuscaPeca = 'descricaoPeca' | 'fabricante' | 'tipoVeiculo';

export default function BuscarPecasPage() {
    const [todasPecas, setTodasPecas] = useState<PecaParaLista[]>([]);
    const [resultadosBusca, setResultadosBusca] = useState<PecaParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaPeca>('descricaoPeca');
    const [termoBusca, setTermoBusca] = useState('');
    const [isLoadingAll, setIsLoadingAll] = useState(false); // Loading inicial de todos
    const [isSearching, setIsSearching] = useState(false); // Loading do filtro/busca
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // Funções de formatação (iguais à listagem)
    const formatCurrency = (value: number): string => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    const formatDate = (dateString: string): string => { try { return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch { return "Inválida"; }};

    // Busca inicial de todas as peças para filtro client-side
    const fetchTodasPecas = async () => {
        if (todasPecas.length > 0 && !isLoadingAll) return;
        setIsLoadingAll(true); setError(null);
        try {
            const response = await fetch('http://localhost:8080/rest/pecas/all');
            if (!response.ok) throw new Error(`Erro HTTP ${response.status}: Falha ao buscar base de peças.`);
            if (response.status === 204) { setTodasPecas([]); return; }

            const data: PecaResponseDto[] = await response.json();
            data.sort((a, b) => a.id - b.id); // Ordena por ID
            const formatadas = data.map(dto => ({
                id: dto.id, tipoVeiculo: dto.tipoVeiculo || '-', fabricante: dto.fabricante || '-',
                descricaoPeca: dto.descricao || '-', dataCompraFormatada: dto.dataCompra ? formatDate(dto.dataCompra) : '-',
                precoFormatado: formatCurrency(dto.preco), descontoFormatado: formatCurrency(dto.desconto),
                totalComDescontoFormatado: formatCurrency(dto.totalDesconto),
            }));
            setTodasPecas(formatadas);
            console.log(`Carregadas ${formatadas.length} peças para busca local.`);
        } catch (err: any) { setError(err.message); setTodasPecas([]);
        } finally { setIsLoadingAll(false); }
    };

    useEffect(() => { fetchTodasPecas(); }, []); // Roda só na montagem

    // Placeholder dinâmico
    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'descricaoPeca': return 'Digite parte da descrição...';
            case 'fabricante': return 'Digite parte do fabricante/marca...';
            case 'tipoVeiculo': return 'Digite o tipo (Carro, Moto...)';
            default: return '';
        }
    };

    // Lógica da Busca (filtro client-side)
    const handleSearch = (event?: FormEvent<HTMLFormElement>) => {
        if (event) event.preventDefault();
        setIsSearching(true); setBuscaRealizada(true); setError(null);

        if (isLoadingAll) { // Se ainda estiver carregando a base, espera
            setError("Aguarde o carregamento inicial dos dados.");
            setIsSearching(false);
            return;
        }
        if (todasPecas.length === 0 && !isLoadingAll) {
            setError("Não há peças cadastradas para buscar.");
            setIsSearching(false);
            return;
        }

        const query = termoBusca.trim().toLowerCase();
        if (!query) {
            setResultadosBusca([]); setIsSearching(false); return;
        }

        let resultados: PecaParaLista[] = [];
        try {
            switch (tipoBusca) {
                case 'descricaoPeca':
                    resultados = todasPecas.filter(p => p.descricaoPeca.toLowerCase().includes(query));
                    break;
                case 'fabricante':
                    resultados = todasPecas.filter(p => p.fabricante.toLowerCase().includes(query));
                    break;
                case 'tipoVeiculo':
                    resultados = todasPecas.filter(p => p.tipoVeiculo.toLowerCase().includes(query));
                    break;
                default:
                    resultados = [];
            }
        } catch (err) {
            console.error("Erro durante filtro:", err);
            setError("Erro ao filtrar peças.");
        } finally {
            setResultadosBusca(resultados);
            setIsSearching(false);
        }
    };

    // Deleção (similar à listagem, mas opera sobre 'todasPecas' e 'resultadosBusca')
    const handleDelete = async (id: number) => {
        if (!window.confirm(`Tem certeza que deseja excluir a peça ID ${id}?`)) return;
        // Adicionar estado de loading para o botão específico seria ideal
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/pecas/${id}`, { method: 'DELETE' });
            if (!response.ok && response.status !== 204) throw new Error('Falha ao excluir peça');
            alert('Peça excluída com sucesso!');
            // Remove das duas listas para consistência
            setTodasPecas(prev => prev.filter(p => p.id !== id));
            setResultadosBusca(prev => prev.filter(p => p.id !== id));
        } catch (err: any) { setError(err.message || 'Erro ao excluir.'); }
    };

    return (
        <>
            <NavBar active="pecas-buscar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-8 gap-2">
                    <Search size={28} className="text-sky-400"/> Buscar Peças
                </h1>

                {/* Formulário de Busca */}
                <div className="bg-slate-800 p-4 md:p-6 rounded-lg shadow-lg max-w-3xl mx-auto mb-8 border border-slate-700">
                    <form onSubmit={handleSearch} className="flex flex-col sm:flex-row gap-4 items-end">
                        {/* Select Tipo Busca */}
                        <div className="flex-shrink-0 w-full sm:w-auto">
                            <label htmlFor="tipoBuscaPeca" className="flex items-center gap-1 block text-sm font-medium text-slate-300 mb-1"><Filter size={16}/>Buscar por:</label>
                            <select id="tipoBuscaPeca" name="tipoBuscaPeca" value={tipoBusca} onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaPeca); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); }} className="w-full sm:w-48 p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500">
                                <option value="descricaoPeca">Descrição</option>
                                <option value="fabricante">Fabricante/Marca</option>
                                <option value="tipoVeiculo">Tipo Veículo</option>
                            </select>
                        </div>
                        {/* Input Termo */}
                        <div className="flex-grow w-full">
                            <label htmlFor="termoBuscaPeca" className="block text-sm font-medium text-slate-300 mb-1">Termo:</label>
                            <input id="termoBuscaPeca" type="text" value={termoBusca} onChange={e => setTermoBusca(e.target.value)} required placeholder={getPlaceholder()} className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"/>
                        </div>
                        {/* Botão Buscar */}
                        <button type="submit" disabled={isLoadingAll || isSearching} className={`flex-shrink-0 w-full sm:w-auto h-10 px-5 py-2 rounded text-white font-semibold flex items-center justify-center gap-2 transition-opacity ${isLoadingAll || isSearching ? 'bg-sky-800 cursor-not-allowed opacity-70' : 'bg-sky-600 hover:bg-sky-700'}`}>
                            <Search size={18}/> {isSearching ? 'Buscando...' : (isLoadingAll ? 'Carregando Base...' : 'Buscar')}
                        </button>
                    </form>
                </div>

                {/* Loading Inicial */}
                {isLoadingAll && <p className="text-center text-sky-300 py-10">Carregando dados base de peças...</p>}

                {/* Erro */}
                {error && ( <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 text-sm" role="alert"><MdErrorOutline className="inline mr-2" />{error}<button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">&times;</button></div> )}

                {/* Resultados da Busca */}
                {!isLoadingAll && buscaRealizada && (
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold mb-4 text-center text-sky-300">Resultados da Busca</h2>
                        {isSearching ? (
                            <div className='flex justify-center items-center py-10'><Loader2 className="h-8 w-8 animate-spin text-sky-400" /><span className='ml-3 text-sky-300'>Filtrando...</span></div>
                        ) : resultadosBusca.length === 0 ? (
                            <p className="text-center text-slate-400 py-10 bg-slate-800/50 rounded-lg shadow-xl flex items-center justify-center gap-2"><ListX size={20}/> Nenhuma peça encontrada para "{termoBusca}" em "{tipoBusca}".</p>
                        ) : (
                            // Grid de Cards (igual à listagem)
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {resultadosBusca.map((peca) => (
                                    <div key={peca.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                        {/* Header */}
                                        <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                            <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {peca.id} </span>
                                            <span className="flex items-center gap-1 text-slate-400 uppercase text-xs font-medium tracking-wider"> <Car size={16} /> {peca.tipoVeiculo} </span>
                                        </div>
                                        {/* Corpo */}
                                        <div className="p-4 space-y-2 flex-grow text-sm">
                                            <p title={peca.descricaoPeca}><strong><Tag size={16} className="inline -mt-1 mr-1"/> Descrição:</strong> {peca.descricaoPeca}</p>
                                            <p><strong><Building size={16} className="inline -mt-1 mr-1"/> Fabricante/Marca:</strong> {peca.fabricante}</p>
                                            <p><strong><Calendar size={16} className="inline -mt-1 mr-1"/> Data Compra:</strong> {peca.dataCompraFormatada}</p>
                                            <div className="grid grid-cols-3 gap-x-2 pt-2 border-t border-slate-700/50 mt-2">
                                                <p className='text-center'><span className='block text-xs text-slate-400'>Preço</span> <span className='font-semibold'>{peca.precoFormatado}</span></p>
                                                <p className='text-center'><span className='block text-xs text-slate-400'>Desconto</span> <span className='font-semibold'>{peca.descontoFormatado}</span></p>
                                                <p className='text-center'><span className='block text-xs text-slate-400'>Preço Final</span> <strong className='text-green-400'>{peca.totalComDescontoFormatado}</strong></p>
                                            </div>
                                        </div>
                                        {/* Footer */}
                                        <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                            <Link href={`/pecas/alterar/${peca.id}`}> <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1" title="Editar Peça"><Edit3 size={14} /> Editar</button> </Link>
                                            <button onClick={() => handleDelete(peca.id)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1" title="Deletar Peça"><Trash2 size={14} /> Deletar</button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )}

                {/* Mensagem inicial antes da busca */}
                {!isLoadingAll && !buscaRealizada && (
                    <div className="text-center text-slate-400 mt-10 bg-slate-800/50 p-6 rounded-lg max-w-md mx-auto border border-slate-700">
                        <Search size={40} className="mx-auto mb-4 text-sky-500" />
                        <p>Utilize os filtros acima para buscar peças específicas no catálogo.</p>
                    </div>
                )}

                {/* Botão Voltar */}
                <div className="mt-10 text-center">
                    <Link href="/pecas/listar">
                        <button className="px-5 py-2.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow flex items-center justify-center gap-2 mx-auto">
                            <ArrowLeft size={18} /> Voltar para Lista Completa
                        </button>
                    </Link>
                </div>

            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pecas\cadastrar\page.tsx   |   componente CadastrarPecaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pecas/cadastrar/page.tsx
"use client";

import React, { useState, FormEvent, useEffect, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    CirclePlus, Package, Car, Building, Tag, Calendar, DollarSign, Percent, Calculator, Save, ArrowLeft,
    Info, AlertCircle, CheckCircle, Loader2
} from 'lucide-react';
import { MdErrorOutline, MdCheckCircle } from 'react-icons/md';

// Interfaces (baseadas na tabela PECAS e DTOs)
interface PecaFormData {
    tipoVeiculo: string;
    fabricante: string;      // Assumindo ser a Marca da PEÇA por enquanto
    descricaoPeca: string;   // Mapeia para DESCRICA_PECA
    dataCompra: string;
    preco: string;           // Input como string para formatação
    desconto: string;        // Input como string (valor ou %)
    // totalDesconto não será um input, será calculado
}

// Tipos de veículo (pode vir do backend ou ser constante)
const tiposVeiculo = ["Carro", "Moto", "Caminhão", "Ônibus", "Utilitário", "Outro"];

export default function CadastrarPecaPage() {
    const router = useRouter();
    const today = new Date().toISOString().split('T')[0];

    const initialState: PecaFormData = {
        tipoVeiculo: "",
        fabricante: "",
        descricaoPeca: "",
        dataCompra: today,
        preco: "0,00",
        desconto: "0,00", // Inicializa como valor
    };

    const [formData, setFormData] = useState<PecaFormData>(initialState);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [isDescontoPercentual] = useState(false); // Controle se desconto é % (Pode implementar no futuro)

    // Função para formatar/parsear valores monetários (igual ao orçamento)
    const parseInputCurrencyToNumber = (inputValue: string): number => {
        if (!inputValue) return 0;
        const cleaned = inputValue.replace(/\./g, '').replace(',', '.');
        const num = parseFloat(cleaned);
        return isNaN(num) ? 0 : num;
    };
    const formatNumberToInputCurrencyString = (value: number): string => {
        return value.toFixed(2).replace('.', ',');
    };
    const formatNumberToDisplayCurrencyString = (value: number): string => {
        return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL', minimumFractionDigits: 2, maximumFractionDigits: 2 });
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleCurrencyChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        const cleanedValue = value.replace(/[^0-9,]/g, ''); // Permite só números e vírgula
        // Formatação básica enquanto digita (pode melhorar com libs)
        // let formattedValue = cleanedValue;
        // if (cleanedValue.includes(',')) {
        //     const parts = cleanedValue.split(',');
        //     formattedValue = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ".") + (parts[1] ? `,${parts[1].slice(0, 2)}` : '');
        // } else {
        //     formattedValue = cleanedValue.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        // }
        setFormData(prev => ({ ...prev, [name]: cleanedValue }));
    };

    // Cálculo do Total com Desconto
    const totalComDesconto = useMemo(() => {
        const precoNum = parseInputCurrencyToNumber(formData.preco);
        const descontoNum = parseInputCurrencyToNumber(formData.desconto);

        if (precoNum <= 0) return 0;

        // Por enquanto, assume que 'desconto' é um valor fixo
        const total = precoNum - descontoNum;
        return Math.max(0, total); // Garante que não seja negativo

    }, [formData.preco, formData.desconto]);

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsSubmitting(true); setError(null); setSuccess(null);

        const precoNum = parseInputCurrencyToNumber(formData.preco);
        const descontoNum = parseInputCurrencyToNumber(formData.desconto);
        const totalDescNum = totalComDesconto; // Usa o valor calculado

        if (precoNum <= 0) {
            setError("O preço da peça deve ser maior que zero.");
            setIsSubmitting(false);
            return;
        }
        if (descontoNum < 0) {
            setError("O desconto não pode ser negativo.");
            setIsSubmitting(false);
            return;
        }
        if (descontoNum > precoNum) {
            setError("O desconto não pode ser maior que o preço.");
            setIsSubmitting(false);
            return;
        }

        const payload = {
            tipoVeiculo: formData.tipoVeiculo,
            fabricante: formData.fabricante,
            descricao: formData.descricaoPeca, // Nome do campo no DTO/Backend
            dataCompra: formData.dataCompra,
            preco: precoNum,
            desconto: descontoNum,
            totalDesconto: totalDescNum
        };

        console.log("Enviando payload Peça:", JSON.stringify(payload, null, 2));

        try {
            const response = await fetch("http://localhost:8080/rest/pecas", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Erro ao cadastrar peça`);
            }

            const result = await response.json();
            setSuccess(`Peça "${result.descricao}" (ID: ${result.id}) cadastrada com sucesso!`);
            setFormData(initialState); // Limpa o formulário
            setTimeout(() => setSuccess(null), 5000);

        } catch (err: any) {
            setError(err.message || "Falha ao cadastrar peça.");
            console.error("Erro no fetch POST Peça:", err);
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <>
            <NavBar active="pecas-cadastrar" /> {/* Atualize a prop 'active' */}
            <main className="container mx-auto px-4 py-10 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-3xl mx-auto border border-slate-700">
                    <h1 className="flex items-center justify-center gap-2 text-xl sm:text-2xl md:text-3xl font-bold mb-6 sm:mb-8 text-center">
                        <CirclePlus size={30} className="text-sky-400" />
                        Cadastrar Nova Peça
                    </h1>

                    {/* Mensagens */}
                    {error && (
                        <div className="relative mb-6 text-red-400 bg-red-900/50 p-3 sm:p-4 pr-10 rounded border border-red-500 text-sm" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-lg" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-3 sm:px-4 py-1 sm:py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-lg sm:text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 mb-6 rounded bg-green-900/30 border border-green-700 text-sm">
                            <MdCheckCircle className="text-lg" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                            {/* Tipo de Veículo (Aplicação Genérica) */}
                            <div>
                                <label htmlFor="tipoVeiculo" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Car size={16}/> Tipo Veículo (Aplicação):</label>
                                <select id="tipoVeiculo" name="tipoVeiculo" value={formData.tipoVeiculo} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500">
                                    <option value="" disabled>Selecione...</option>
                                    {tiposVeiculo.map(tv => (<option key={tv} value={tv}>{tv}</option>))}
                                </select>
                            </div>

                            {/* Fabricante/Marca da Peça */}
                            <div>
                                <label htmlFor="fabricante" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Building size={16}/> Fabricante/Marca da Peça:</label>
                                <input type="text" id="fabricante" name="fabricante" value={formData.fabricante} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500"/>
                            </div>

                            {/* Descrição da Peça */}
                            <div className="md:col-span-2">
                                <label htmlFor="descricaoPeca" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Tag size={16}/> Descrição da Peça:</label>
                                <input type="text" id="descricaoPeca" name="descricaoPeca" value={formData.descricaoPeca} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500"/>
                            </div>

                            {/* Data da Compra */}
                            <div>
                                <label htmlFor="dataCompra" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Calendar size={16}/> Data da Compra:</label>
                                <input type="date" id="dataCompra" name="dataCompra" value={formData.dataCompra} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500 date-input-fix"/>
                            </div>

                            {/* Preço */}
                            <div>
                                <label htmlFor="preco" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><DollarSign size={16}/> Preço (R$):</label>
                                <input type="text" id="preco" name="preco" value={formData.preco} onChange={handleCurrencyChange} required placeholder="0,00" className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500"/>
                            </div>

                            {/* Desconto (Valor) */}
                            <div>
                                <label htmlFor="desconto" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300"><Percent size={16}/> Desconto (Valor R$):</label>
                                <input type="text" id="desconto" name="desconto" value={formData.desconto} onChange={handleCurrencyChange} required placeholder="0,00" className="w-full px-3 py-2 bg-slate-800 border border-slate-600 rounded-md h-10 focus:ring-2 focus:ring-sky-500"/>
                            </div>

                            {/* Total com Desconto (Apenas Display) */}
                            <div>
                                <label className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-400"><Calculator size={16}/> Preço Final (R$):</label>
                                <input type="text" value={formatNumberToDisplayCurrencyString(totalComDesconto)} readOnly className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-md h-10 cursor-not-allowed font-semibold text-green-400"/>
                            </div>
                        </div>

                        {/* Botões */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-6 mt-6 border-t border-slate-700">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 w-full sm:w-auto px-6 sm:px-8 py-2.5 sm:py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isSubmitting}
                            >
                                <Save size={18}/> {isSubmitting ? 'Salvando...' : 'Salvar Nova Peça'}
                            </button>
                            <Link href="/pecas/listar" className="w-full sm:w-auto">
                                <button type="button" className="flex items-center justify-center gap-2 w-full px-6 sm:px-8 py-2.5 sm:py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center">
                                    <ArrowLeft size={18}/> Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pecas\deletar\[id]\page.tsx   |   componente DeletarPecaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pecas/deletar/[id]/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { Trash2, AlertCircle, Package, Tag, Building, DollarSign, Loader2, ArrowLeft, XCircle } from 'lucide-react';
import { MdErrorOutline, MdCancel, MdDelete } from 'react-icons/md';

// Interface para buscar os dados da peça
interface PecaResponseDto {
    id: number;
    tipoVeiculo: string;
    fabricante: string;
    descricao: string;
    preco: number;
    totalDesconto: number; // Mostrar preço final para confirmação
}

export default function DeletarPecaPage() {
    const router = useRouter();
    const params = useParams();
    const id = params.id as string;

    const [pecaInfo, setPecaInfo] = useState<PecaResponseDto | null>(null);
    const [isFetching, setIsFetching] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Formatação
    const formatCurrency = (value: number): string => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });

    // Busca dados da peça para confirmação
    useEffect(() => {
        if (!id) { setError("ID da peça não fornecido."); setIsFetching(false); return; }
        const fetchPeca = async () => {
            setIsFetching(true); setError(null);
            try {
                const response = await fetch(`http://localhost:8080/rest/pecas/${id}`);
                if (response.status === 404) throw new Error(`Peça com ID ${id} não encontrada.`);
                if (!response.ok) throw new Error(`Erro HTTP ${response.status}: Falha ao buscar dados da peça.`);
                const data: PecaResponseDto = await response.json();
                setPecaInfo(data);
            } catch (err: any) { setError(err.message || "Erro ao carregar dados da peça."); setPecaInfo(null);
            } finally { setIsFetching(false); }
        };
        fetchPeca();
    }, [id]);

    // Executa a deleção
    const handleDelete = async () => {
        if (!id) { setError("ID inválido."); return; }
        setIsDeleting(true); setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/pecas/${id}`, { method: 'DELETE' });
            if (!response.ok && response.status !== 204) {
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Falha ao excluir peça`);
            }
            // Idealmente, mostrar uma mensagem de sucesso antes de redirecionar
            router.push('/pecas/listar?deleted=true'); // Adiciona query param

        } catch (err: any) { setError(err.message || "Falha ao deletar peça.");
        } finally { setIsDeleting(false); }
    };

    // Renderização condicional
    if (isFetching) {
        return (
            <>
                <NavBar active="pecas" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados da peça...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !pecaInfo) { // Erro grave ao carregar
        return (
            <>
                <NavBar active="pecas" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl text-center w-full max-w-lg border border-red-500">
                        <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4"/>
                        <h2 className="text-xl font-semibold text-red-400 mb-3">Erro ao Carregar</h2>
                        <p className="text-slate-300 mb-6">{error}</p>
                        <Link href="/pecas/listar">
                            <button className="px-6 py-2 bg-sky-600 hover:bg-sky-700 rounded-md text-white font-semibold flex items-center justify-center gap-2 mx-auto">
                                <ArrowLeft size={18}/> Voltar para Lista
                            </button>
                        </Link>
                    </div>
                </main>
            </>
        );
    }

    if (!pecaInfo && !isFetching) { // Peça não encontrada, mas sem erro de fetch
        return (
            <>
                <NavBar active="pecas" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl text-center w-full max-w-lg border border-yellow-500">
                        <AlertCircle className="h-16 w-16 text-yellow-400 mx-auto mb-4"/>
                        <h2 className="text-xl font-semibold text-yellow-400 mb-3">Peça Não Encontrada</h2>
                        <p className="text-slate-300 mb-6">A peça com ID {id} não foi encontrada. Ela pode ter sido excluída.</p>
                        <Link href="/pecas/listar">
                            <button className="px-6 py-2 bg-sky-600 hover:bg-sky-700 rounded-md text-white font-semibold flex items-center justify-center gap-2 mx-auto">
                                <ArrowLeft size={18}/> Voltar para Lista
                            </button>
                        </Link>
                    </div>
                </main>
            </>
        );
    }


    return (
        <>
            <NavBar active="pecas-deletar" />
            <main className="container mx-auto px-4 py-10 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg border border-red-600">
                    <h1 className="flex items-center justify-center gap-2 text-xl sm:text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão de Peça
                    </h1>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir a peça abaixo? Esta ação não pode ser desfeita.</p>

                    {pecaInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-4 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong><Hash size={14} className="inline -mt-1 mr-1"/> ID:</strong> {pecaInfo.id}</p>
                            <p><strong><Tag size={14} className="inline -mt-1 mr-1"/> Descrição:</strong> {pecaInfo.descricao}</p>
                            <p><strong><Building size={14} className="inline -mt-1 mr-1"/> Fabricante:</strong> {pecaInfo.fabricante}</p>
                            <p><strong><Car size={14} className="inline -mt-1 mr-1"/> Tipo Veíc.:</strong> {pecaInfo.tipoVeiculo}</p>
                            <p><strong><DollarSign size={14} className="inline -mt-1 mr-1"/> Preço Final:</strong> {formatCurrency(pecaInfo.totalDesconto)}</p>
                        </div>
                    )}

                    {/* Erro durante a deleção */}
                    {error && (
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4 text-sm">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleDelete}
                            className={`flex items-center justify-center gap-2 w-full sm:w-auto px-6 py-2.5 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting || isFetching}
                        >
                            {isDeleting ? <><Loader2 className="animate-spin mr-2"/> Excluindo...</> : <><MdDelete size={20}/> Sim, Excluir</>}
                        </button>
                        <Link href="/pecas/listar" className="w-full sm:w-auto">
                            <button type="button" className="flex items-center justify-center gap-2 w-full px-6 py-2.5 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center" disabled={isDeleting}>
                                <MdCancel size={20}/> Não, Cancelar
                            </button>
                        </Link>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\pecas\listar\page.tsx   |   componente ListarPecasPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/pecas/listar/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    Package, List, CirclePlus, Search, Edit3, Trash2, Car, Building, Tag, Calendar, DollarSign, Percent, Calculator, Hash,
    Loader2, AlertCircle, XCircle
} from 'lucide-react';
import { MdErrorOutline, MdCheckCircle, MdCancel, MdDelete } from 'react-icons/md';

// Interface para os dados da peça como vêm da API
interface PecaResponseDto {
    id: number;
    tipoVeiculo: string;
    fabricante: string;
    descricao: string; // Corresponde a DESCRICA_PECA
    dataCompra: string;
    preco: number;
    desconto: number;
    totalDesconto: number;
}

// Interface para os dados formatados para exibição
interface PecaParaLista {
    id: number;
    tipoVeiculo: string;
    fabricante: string;
    descricaoPeca: string;
    dataCompraFormatada: string;
    precoFormatado: string;
    descontoFormatado: string;
    totalComDescontoFormatado: string;
}

export default function ListarPecasPage() {
    const [pecas, setPecas] = useState<PecaParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    // Estados para o modal de deleção
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [pecaParaDeletar, setPecaParaDeletar] = useState<PecaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);

    // Funções de formatação
    const formatCurrency = (value: number): string => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    const formatDate = (dateString: string): string => {
        try {
            // Adiciona 'T00:00:00Z' para garantir que seja interpretado como UTC
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return "Inválida";
        }
    };

    // Função para buscar peças
    const fetchPecas = async () => {
        setIsLoading(true);
        setError(null);
        setSuccessMessage(null); // Limpa mensagem de sucesso anterior
        try {
            const response = await fetch('http://localhost:8080/rest/pecas/all');
            if (!response.ok) {
                if (response.status === 204) { // No Content
                    setPecas([]);
                    return;
                }
                throw new Error(`Erro HTTP ${response.status}: Falha ao buscar peças.`);
            }
            const data: PecaResponseDto[] = await response.json();

            // Ordena por ID ascendente (ou como preferir)
            data.sort((a, b) => a.id - b.id);

            const pecasFormatadas: PecaParaLista[] = data.map(dto => ({
                id: dto.id,
                tipoVeiculo: dto.tipoVeiculo || '-',
                fabricante: dto.fabricante || '-',
                descricaoPeca: dto.descricao || '-', // Mapeia de 'descricao' do DTO
                dataCompraFormatada: dto.dataCompra ? formatDate(dto.dataCompra) : '-',
                precoFormatado: formatCurrency(dto.preco),
                descontoFormatado: formatCurrency(dto.desconto),
                totalComDescontoFormatado: formatCurrency(dto.totalDesconto),
            }));
            setPecas(pecasFormatadas);

        } catch (err: any) {
            setError(err.message || "Erro desconhecido ao carregar peças.");
            setPecas([]);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchPecas();
    }, []);

    // Funções do modal de deleção
    const openDeleteModal = (peca: PecaParaLista) => {
        setPecaParaDeletar(peca);
        setShowDeleteModal(true);
        setError(null); // Limpa erro anterior ao abrir modal
    };

    const closeDeleteModal = () => {
        setPecaParaDeletar(null);
        setShowDeleteModal(false);
    };

    const confirmDelete = async () => {
        if (!pecaParaDeletar) return;
        setIsDeleting(true);
        setError(null); // Limpa erro antes de tentar deletar

        try {
            const response = await fetch(`http://localhost:8080/rest/pecas/${pecaParaDeletar.id}`, { method: 'DELETE' });
            if (!response.ok && response.status !== 204) { // 204 também é sucesso
                const errorData = await response.json().catch(() => ({ message: `Erro HTTP ${response.status}` }));
                throw new Error(errorData.message || `Falha ao excluir peça`);
            }
            setSuccessMessage(`Peça "${pecaParaDeletar.descricaoPeca}" (ID: ${pecaParaDeletar.id}) excluída com sucesso!`);
            setPecas(prev => prev.filter(p => p.id !== pecaParaDeletar.id)); // Remove da lista local
            closeDeleteModal();
            setTimeout(() => setSuccessMessage(null), 5000); // Limpa msg de sucesso

        } catch (err: any) {
            setError(`Falha ao excluir: ${err.message}`);
            // Mantém modal aberto para exibir o erro
        } finally {
            setIsDeleting(false);
        }
    };

    return (
        <>
            {/* Use a chave correta para 'active' na NavBar */}
            <NavBar active="pecas-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left">
                        <Package size={28} className="text-sky-400" /> Lista de Peças Cadastradas
                    </h1>
                    <div className="flex gap-2 flex-wrap justify-center">
                        <Link href="/pecas/cadastrar">
                            <button className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                                <CirclePlus size={18} /> Nova Peça
                            </button>
                        </Link>
                        <Link href="/pecas/buscar">
                            <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                                <Search size={18} /> Buscar Peça
                            </button>
                        </Link>
                    </div>
                </div>

                {/* Mensagens */}
                {isLoading && <div className='flex justify-center items-center py-10'><Loader2 className="h-8 w-8 animate-spin text-sky-400" /><span className='ml-3 text-sky-300'>Carregando peças...</span></div>}
                {error && !showDeleteModal && ( // Não mostra erro geral se o modal de erro estiver ativo
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" /> {error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"> <span className="text-xl">&times;</span> </button>
                    </div>
                )}
                {successMessage && (
                    <div className="flex items-center justify-center gap-2 text-green-400 p-3 mb-6 rounded bg-green-900/30 border border-green-700 text-sm max-w-3xl mx-auto">
                        <MdCheckCircle className="text-lg" /> <span>{successMessage}</span>
                    </div>
                )}

                {/* Grid de Cards */}
                {!isLoading && !error && pecas.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-800/50 rounded-lg shadow-xl">Nenhuma peça encontrada.</p>
                )}
                {!isLoading && pecas.length > 0 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                        {pecas.map((peca) => (
                            <div key={peca.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                {/* Header Card */}
                                <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                    <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {peca.id} </span>
                                    <span className="flex items-center gap-1 text-slate-400 uppercase text-xs font-medium tracking-wider"> <Car size={16} /> {peca.tipoVeiculo} </span>
                                </div>
                                {/* Corpo Card */}
                                <div className="p-4 space-y-2 flex-grow text-sm">
                                    <p title={peca.descricaoPeca}><strong><Tag size={16} className="inline -mt-1 mr-1"/> Descrição:</strong> {peca.descricaoPeca}</p>
                                    <p><strong><Building size={16} className="inline -mt-1 mr-1"/> Fabricante/Marca:</strong> {peca.fabricante}</p>
                                    <p><strong><Calendar size={16} className="inline -mt-1 mr-1"/> Data Compra:</strong> {peca.dataCompraFormatada}</p>
                                    <div className="grid grid-cols-3 gap-x-2 pt-2 border-t border-slate-700/50 mt-2">
                                        <p className='text-center'><span className='block text-xs text-slate-400'>Preço</span> <span className='font-semibold'>{peca.precoFormatado}</span></p>
                                        <p className='text-center'><span className='block text-xs text-slate-400'>Desconto</span> <span className='font-semibold'>{peca.descontoFormatado}</span></p>
                                        <p className='text-center'><span className='block text-xs text-slate-400'>Preço Final</span> <strong className='text-green-400'>{peca.totalComDescontoFormatado}</strong></p>
                                    </div>
                                </div>
                                {/* Footer Card */}
                                <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                    <Link href={`/pecas/alterar/${peca.id}`}>
                                        <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1" title="Editar Peça">
                                            <Edit3 size={14} /> Editar
                                        </button>
                                    </Link>
                                    <button onClick={() => openDeleteModal(peca)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1" title="Deletar Peça">
                                        <Trash2 size={14} /> Deletar
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </main>

            {/* Modal de Confirmação de Deleção */}
            {showDeleteModal && pecaParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center p-4" onClick={closeDeleteModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={e => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4 flex items-center gap-2">
                            <Trash2 size={22} className="text-red-400" /> Confirmar Exclusão
                        </h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir a peça abaixo?</p>
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3 bg-slate-700/30 p-3 rounded'>
                            <p><strong>ID:</strong> {pecaParaDeletar.id}</p>
                            <p><strong>Descrição:</strong> {pecaParaDeletar.descricaoPeca}</p>
                            <p><strong>Fabricante:</strong> {pecaParaDeletar.fabricante}</p>
                            <p><strong>Preço Final:</strong> {pecaParaDeletar.totalComDescontoFormatado}</p>
                        </div>
                        {/* Exibe erro específico do modal aqui */}
                        {error && isDeleting && (
                            <p className="text-red-400 text-sm mb-3 text-center bg-red-900/50 p-2 rounded">{error}</p>
                        )}
                        <div className="flex justify-end gap-4">
                            <button type="button" className="flex items-center justify-center gap-2 px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md focus:outline-none" onClick={closeDeleteModal} disabled={isDeleting}>
                                <MdCancel /> Cancelar
                            </button>
                            <button type="button" className={`flex items-center justify-center gap-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md focus:outline-none ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                                {isDeleting ? <><Loader2 className="animate-spin mr-2"/> Excluindo...</> : <><MdDelete /> Sim, Excluir</>}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\relatorio\agendamentos-futuros\page.tsx   |   componente RelatorioAgendamentosFuturosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/relatorio/agendamentos-futuros/page.tsx
"use client";

import { useState, useEffect } from 'react';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho se necessário

// --- Imports para Gráfico ---
import { Bar } from 'react-chartjs-2';
import {
    Chart as ChartJS, CategoryScale, LinearScale, BarElement,
    Title as ChartTitle, Tooltip, Legend
} from 'chart.js';

// --- Ícones ---
import { CalendarDays, ClipboardList, Hash, BarChart3, ListChecks, ChevronLeft, ChevronRight } from 'lucide-react';
import { MdErrorOutline, MdCalendarToday } from 'react-icons/md'; // Ícones adicionais se necessário

// --- Registrar componentes Chart.js ---
ChartJS.register(CategoryScale, LinearScale, BarElement, ChartTitle, Tooltip, Legend);

// --- Interfaces ---
interface AgendamentoParaLista {
    id: number;
    dataAgendamento: string; // Formatada: DD/MM/YYYY ou 'N/A'
    observacao: string;
}
interface PaginatedAgendaResponse {
    content: AgendamentoApiResponseDto[];
    totalPages: number;
    totalElements: number;
    number: number;
    size: number;
}
interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string; // Formato YYYY-MM-DD
    observacao: string | null;
}
// --- Interface para Contagem Mensal ---
interface ContagemMensalDto {
    mesAno: string; // Formato "YYYY-MM"
    quantidade: number;
}
// ----------------

export default function RelatorioAgendamentosFuturosPage() {
    // --- Estados para Agendamentos Futuros ---
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoadingAgendamentos, setIsLoadingAgendamentos] = useState(true);
    const [errorAgendamentos, setErrorAgendamentos] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(12); // Ajustado para cards

    // --- Estados para Contagem Mensal / Gráfico ---
    const [dadosContagem, setDadosContagem] = useState<ContagemMensalDto[]>([]);
    const [isLoadingContagem, setIsLoadingContagem] = useState(true);
    const [errorContagem, setErrorContagem] = useState<string | null>(null);

    // --- Fetch Agendamentos Futuros (sem alterações na lógica interna) ---
    const fetchAgendamentosFuturos = async (page = 0) => {
        setIsLoadingAgendamentos(true);
        setErrorAgendamentos(null);
        const today = new Date().toISOString().split('T')[0];
        const params = new URLSearchParams({
            page: page.toString(), size: pageSize.toString(),
            sort: 'dataAgendamento,asc', dataInicio: today
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.info("[Futuros] Buscando:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) { /* ... tratamento de erro ... */ throw new Error(`Erro HTTP ${response.status}`); }
            if (response.status === 204) { setAgendamentos([]); setTotalPages(0); setCurrentPage(page); return; } // Atualiza page mesmo no 204

            const data: PaginatedAgendaResponse = await response.json();
            const formatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: formatarData(dto.dataAgendamento),
                observacao: dto.observacao || '',
            }));
            setAgendamentos(formatados); setTotalPages(data.totalPages); setCurrentPage(data.number);
        } catch (err: any) {
            setErrorAgendamentos(tratarErroFetch(err));
            setAgendamentos([]); setTotalPages(0);
        } finally {
            setIsLoadingAgendamentos(false);
        }
    };

    // --- Fetch Contagem Mensal ---
    const fetchContagemMensal = async () => {
        setIsLoadingContagem(true);
        setErrorContagem(null);
        const apiUrl = "http://localhost:8080/rest/relatorios/contagem-agendamentos-mensal";
        console.info("[Contagem] Buscando:", apiUrl);
        try {
            const resp = await fetch(apiUrl);
            if (!resp.ok) { /* ... tratamento de erro ... */ throw new Error(`Erro HTTP ${resp.status}`); }
            if (resp.status === 204) { setDadosContagem([]); return; }
            const data: ContagemMensalDto[] = await resp.json();
            data.sort((a, b) => a.mesAno.localeCompare(b.mesAno)); // Ordena para o gráfico
            setDadosContagem(data);
        } catch (err: any) {
            setErrorContagem(tratarErroFetch(err));
            setDadosContagem([]);
        } finally {
            setIsLoadingContagem(false);
        }
    };

    // --- useEffect para buscar ambos os dados ---
    useEffect(() => {
        fetchAgendamentosFuturos(currentPage);
        fetchContagemMensal(); // Busca dados do gráfico na montagem/mudança de página
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [currentPage, pageSize]);

    // --- Configuração do Gráfico ---
    const labels = dadosContagem.map(d => d.mesAno);
    const valores = dadosContagem.map(d => d.quantidade);
    const backgroundColors = [
        'rgba(54, 162, 235, 0.7)', 'rgba(75, 192, 192, 0.7)',
        'rgba(255, 206, 86, 0.7)', 'rgba(153, 102, 255, 0.7)',
        'rgba(255, 159, 64, 0.7)', 'rgba(255, 99, 132, 0.7)',
        'rgba(100, 116, 139, 0.7)' // Cor neutra se precisar de mais
    ];
    const borderColors = backgroundColors.map(color => color.replace(/0\.7/, '1'));
    const chartData = {
        labels,
        datasets: [{
            label: 'Nº de Agendamentos',
            data: valores,
            backgroundColor: backgroundColors.slice(0, valores.length),
            borderColor: borderColors.slice(0, valores.length),
            borderWidth: 1,
        }]
    };
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false, // Para controlar altura
        plugins: {
            legend: { display: false }, // Sem legenda para uma barra
            title: { display: true, text: 'Agendamentos por Mês/Ano', color: '#e2e8f0', font: { size: 16 } },
            tooltip: {
                callbacks: {
                    label: function(context: any) {
                        let label = context.dataset.label || '';
                        if (label) { label += ': '; }
                        if (context.parsed.y !== null) { label += context.parsed.y; }
                        return label;
                    }
                }
            }
        },
        scales: {
            x: { ticks: { color: '#94a3b8' }, grid: { display: false } },
            y: { beginAtZero: true, ticks: { color: '#94a3b8', stepSize: Math.max(1, Math.ceil(Math.max(...valores, 1) / 5)) }, grid: { color: 'rgba(100, 116, 139, 0.2)' } } // stepSize dinâmico
        },
    };
    // ----------------------------

    // --- Funções Auxiliares ---
    const handlePreviousPage = () => { if (currentPage > 0) { setCurrentPage(prev => prev - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { setCurrentPage(prev => prev + 1); } };
    const formatarData = (dataString: string | null | undefined): string => {
        if (!dataString) return '-';
        try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { console.error("Erro formatar data:", dataString, e); return 'Inválida'; }
    };
    const tratarErroFetch = (err: any): string => {
        if (err instanceof TypeError && err.message === 'Failed to fetch') {
            return "Não foi possível conectar ao servidor. Verifique a API e a rede.";
        }
        return err.message || "Ocorreu um erro desconhecido.";
    };
    // -------------------------

    return (
        <>
            {/* Mantido 'relatorio-agendamentos-futuros' para consistência se existir link direto */}
            <NavBar active="relatorio-agendamentos-futuros"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título Principal */}
                <h1 className="text-2xl md:text-3xl font-bold mb-6 text-center flex items-center justify-center gap-2">
                    <CalendarDays className="h-8 w-8 text-sky-400" />
                    Relatórios de Agendamento
                </h1>

                {/* Seção do Gráfico Mensal */}
                <section className="mb-8 bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                    <h2 className="flex items-center text-xl font-semibold mb-4 text-sky-400 border-b border-slate-700 pb-2 gap-2">
                        <BarChart3 size={24}/> Contagem Mensal de Agendamentos
                    </h2>
                    {errorContagem && (
                        <p className="text-center text-red-400 mb-4 p-3 bg-red-900/50 rounded border border-red-500 flex items-center gap-2">
                            <MdErrorOutline /> Erro ao carregar dados do gráfico: {errorContagem}
                        </p>
                    )}
                    {isLoadingContagem ? (
                        <p className="text-center text-sky-300 py-5">Carregando gráfico...</p>
                    ) : (
                        <div className="relative h-64 md:h-80"> {/* Altura do gráfico */}
                            {dadosContagem.length > 0 ? (
                                <Bar options={chartOptions} data={chartData} />
                            ) : (
                                <p className="text-center text-slate-400 flex items-center justify-center h-full">
                                    Nenhum dado de contagem mensal disponível.
                                </p>
                            )}
                        </div>
                    )}
                </section>

                {/* Seção Agendamentos Futuros */}
                <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                    <h2 className="flex items-center text-xl font-semibold mb-4 text-sky-400 border-b border-slate-700 pb-2 gap-2">
                        <ListChecks size={24}/> Próximos Agendamentos (a partir de hoje)
                    </h2>

                    {errorAgendamentos && (
                        <p className="text-center text-red-400 mb-4 p-3 bg-red-900/50 rounded border border-red-500 flex items-center gap-2">
                            <MdErrorOutline /> {errorAgendamentos}
                        </p>
                    )}

                    {isLoadingAgendamentos ? (
                        <p className="text-center text-sky-300 py-10">Carregando agendamentos futuros...</p>
                    ) : (
                        <>
                            {agendamentos.length === 0 && !errorAgendamentos ? (
                                <p className="text-center text-slate-400 py-10">Nenhum agendamento futuro encontrado.</p>
                            ) : (
                                // <<< Grid de Cards para Agendamentos Futuros >>>
                                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                    {agendamentos.map((ag) => (
                                        <div key={ag.id} className="bg-slate-800 rounded-lg shadow-md border border-slate-700 flex flex-col overflow-hidden">
                                            {/* Header */}
                                            <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                                <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {ag.id} </span>
                                                <span className="flex items-center gap-1 text-slate-400"> <CalendarDays size={16} /> {ag.dataAgendamento} </span>
                                            </div>
                                            {/* Corpo */}
                                            <div className="p-4 space-y-2 flex-grow">
                                                <div>
                                                    <h3 className="flex items-center text-base font-semibold mb-1 text-slate-200 gap-1">
                                                        <ClipboardList size={18} className="text-amber-400 flex-shrink-0"/> Observação
                                                    </h3>
                                                    <p className="text-sm text-slate-300 break-words max-h-28 overflow-y-auto pr-1">
                                                        {ag.observacao || '-'}
                                                    </p>
                                                </div>
                                                {/* Poderia adicionar info de cliente/veículo se a API retornasse */}
                                            </div>
                                            {/* Footer (Opcional - sem ações para este relatório) */}
                                            {/* <div className="bg-slate-900 p-2 mt-auto border-t border-slate-700"></div> */}
                                        </div>
                                    ))}
                                </div>
                            )}

                            {/* Paginação para Agendamentos Futuros */}
                            {!isLoadingAgendamentos && totalPages > 1 && (
                                <div className="flex justify-center items-center mt-6 gap-3">
                                    <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                                        <ChevronLeft size={18}/> Anterior
                                    </button>
                                    <span className="text-slate-300 text-sm"> Página {currentPage + 1} de {totalPages} </span>
                                    <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                                        Próxima <ChevronRight size={18}/>
                                    </button>
                                </div>
                            )}
                        </>
                    )}
                </section>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\relatorio\cliente-completo\page.tsx   |   componente RelatorioCompletoClientePage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/relatorio/cliente-completo/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import NavBar from '@/components/nav-bar';
import { Bar } from 'react-chartjs-2';
import {
    Chart as ChartJS, CategoryScale, LinearScale, BarElement,
    Title as ChartTitle, Tooltip, Legend
} from 'chart.js';

// --- Ícones Lucide ---
import {
    Search, UserCircle, Info, Briefcase, PhoneCall, Mail, MapPin, Car, Hash,
    Building, Palette, Calendar, Settings, BarChart3, CalendarClock, CalendarDays,
    ClipboardList, Wrench, Stethoscope, Puzzle, FileText, DollarSign,
    ListChecks, ScanSearch, AlertCircle, Loader2, ListX
} from 'lucide-react';
import { MdErrorOutline, MdBadge } from 'react-icons/md';

// --- Registrar Chart.js ---
ChartJS.register(CategoryScale, LinearScale, BarElement, ChartTitle, Tooltip, Legend);

// --- Interfaces (COM ENDEREÇO CORRIGIDO) ---
interface EnderecoDto { codigo?: number; numero?: number; cep?: string; logradouro?: string; localidade?: string; bairro?: string; uf?: string; complemento?: string | null; }
interface ContatoDto { codigo?: number; celular?: string; email?: string; contato?: string; }
interface ClienteResponseDto { idCli: number; nome?: string; sobrenome?: string; tipoCliente?: string; numeroDocumento?: string; sexo?: string; dataNascimento?: string; atividadeProfissional?: string; endereco?: EnderecoDto | null; contato?: ContatoDto | null; }
interface VeiculoResponseDto { id: number; tipoVeiculo?: string; renavam?: string; placa?: string; modelo?: string; proprietario?: string; montadora?: string; cor?: string; motor?: string; anoFabricacao?: string; }
interface AgendaSimplificadoDTO { id: number; dataAgendamento?: string | null; observacao?: string | null; veiculoPlaca?: string | null; }
interface PecaUtilizadaDTO { idPeca: number; descricaoPeca?: string; fabricante?: string; }
interface OficinaServicoDTO { idOficina: number; dataOficina?: string | null; descricaoProblema?: string | null; diagnostico?: string | null; partesAfetadas?: string | null; horasTrabalhadas?: string | null; veiculoPlaca?: string | null; pecasUtilizadas?: PecaUtilizadaDTO[]; }
interface OrcamentoResponseDto { id: number; dataOrcamento?: string | null; maoDeObra?: number; valorHora?: number; quantidadeHoras?: number; valorTotal?: number; }
interface PagamentoResponseDto { id: number; dataPagamento?: string | null; tipoPagamento?: string; desconto?: number; totalParcelas?: string; valorParcelas?: number; totalComDesconto?: number; }
interface ClienteRelatorioCompletoDTO { cliente?: ClienteResponseDto | null; veiculos?: VeiculoResponseDto[]; agendamentos?: AgendaSimplificadoDTO[]; servicosOficina?: OficinaServicoDTO[]; orcamentos?: OrcamentoResponseDto[]; pagamentos?: PagamentoResponseDto[]; totalAgendamentos?: number; }
// ----------------------------------------------------------------------

type TipoBuscaRelatorio = 'id' | 'documento';

// Helper para formatar data DD/MM/YYYY
const formatarData = (dataString: string | null | undefined): string => { /* ...código formatarData... */
    if (!dataString) return '-';
    try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
    catch (e) { console.error("Erro formatar data:", dataString, e); return 'Inválida'; }
};

// Helper para extrair apenas o ano
const extrairAno = (dataString: string | null | undefined): string => { /* ...código extrairAno... */
    if (!dataString) return '-';
    try {
        if (dataString.length >= 4 && /^\d{4}/.test(dataString)) {
            return dataString.substring(0, 4);
        }
        return new Date(dataString + 'T00:00:00Z').getFullYear().toString();
    } catch (e) {
        console.error("Erro ao extrair ano:", dataString, e);
        return 'Inválido';
    }
};

// Helper para tratar erro fetch
const tratarErroFetch = (err: any): string => { /* ...código tratarErroFetch... */
    if (err instanceof TypeError && err.message === 'Failed to fetch') {
        return "Não foi possível conectar ao servidor. Verifique a API e a rede.";
    }
    if (err.message && (err.message.startsWith("Erro HTTP") || err.message.includes("inválido") || err.message.includes("não encontrado"))) {
        return err.message;
    }
    if (err.message) {
        return err.message;
    }
    return "Ocorreu um erro desconhecido.";
};

export default function RelatorioCompletoClientePage() {
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaRelatorio>('documento');
    const [valorBusca, setValorBusca] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [relatorioData, setRelatorioData] = useState<ClienteRelatorioCompletoDTO | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    const handleSearch = async (e: FormEvent) => { /* ...código handleSearch... */
        e.preventDefault();
        setIsLoading(true); setError(null); setRelatorioData(null); setBuscaRealizada(true);
        if (!valorBusca.trim()) { setError("Por favor, insira um valor para busca."); setIsLoading(false); return; }
        const params = new URLSearchParams({ tipoBusca, valorBusca: valorBusca.trim() });
        const apiUrl = `http://localhost:8080/rest/relatorios/cliente/completo?${params}`;
        console.info("Buscando relatório completo:", apiUrl);
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 404) throw new Error("Cliente não encontrado.");
                if (response.status === 400) { const errData = await response.json().catch(()=>({message:"Tipo ou valor de busca inválido."})); throw new Error(errData.message || "Tipo ou valor de busca inválido."); }
                if (response.status === 204) throw new Error("Cliente não encontrado (resposta sem conteúdo).");
                let errorMsg = `Erro HTTP ${response.status}`;
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (jsonError) { errorMsg = `${errorMsg}: ${response.statusText || 'Erro desconhecido'}`; }
                throw new Error(errorMsg);
            }
            const data: ClienteRelatorioCompletoDTO = await response.json();
            if (!data || typeof data !== 'object') throw new Error("Resposta da API inválida ou vazia.");
            if (!data.cliente) console.warn("API retornou dados sem informações do cliente.");
            setRelatorioData(data);
        } catch (err: any) { setError(tratarErroFetch(err)); setRelatorioData(null); } finally { setIsLoading(false); }
    };

    // --- Configuração do Gráfico ---
    const backgroundColors = [ /* ... cores ... */
        'rgba(54, 162, 235, 0.7)', 'rgba(75, 192, 192, 0.7)', 'rgba(255, 206, 86, 0.7)',
        'rgba(153, 102, 255, 0.7)','rgba(255, 159, 64, 0.7)','rgba(255, 99, 132, 0.7)'
    ];
    const borderColors = backgroundColors.map(color => color.replace(/0\.7/, '1'));
    const corIndex = 0;
    const chartData = { /* ...código chartData... */
        labels: ['Agendamentos'],
        datasets: [{
            label: 'Nº de Agendamentos',
            data: [relatorioData?.totalAgendamentos ?? 0],
            backgroundColor: [backgroundColors[corIndex % backgroundColors.length]],
            borderColor: [borderColors[corIndex % borderColors.length]],
            borderWidth: 1, barThickness: 60, maxBarThickness: 80
        }],
    };
    const chartOptions = { /* ...código chartOptions... */
        indexAxis: 'y' as const, responsive: true, maintainAspectRatio: false,
        plugins: { legend: { display: false }, title: { display: true, text: 'Total de Agendamentos Registrados', color: '#e2e8f0', font: {size: 14} }, },
        scales: { x: { beginAtZero: true, ticks: { color: '#94a3b8', stepSize: 1 }, grid: { color: 'rgba(100, 116, 139, 0.2)' } }, y: { ticks: { color: '#94a3b8' }, grid: { display: false } } },
    };
    // ---------------------------------

    return (
        <>
            <NavBar active="relatorio-cliente-completo"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título */}
                <h1 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-8 text-center gap-2">
                    <UserCircle size={32} className="text-sky-400"/> Visão 360º do Cliente
                </h1>

                {/* Formulário de Busca */}
                <div className="bg-slate-800 p-4 md:p-6 rounded-lg shadow-lg max-w-3xl mx-auto mb-8 border border-slate-700">
                    <form onSubmit={handleSearch} className="flex flex-col sm:flex-row gap-4 items-end">
                        {/* ... (código do formulário de busca) ... */}
                        <div className="flex-shrink-0 w-full sm:w-auto"> <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label> <select id="tipoBusca" value={tipoBusca} onChange={(e) => setTipoBusca(e.target.value as TipoBuscaRelatorio)} className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"> <option value="documento">Documento</option> <option value="id">Código Cliente</option> </select> </div> <div className="flex-grow w-full"> <label htmlFor="valorBusca" className="block text-sm font-medium mb-1 text-slate-300">Valor:</label> <input id="valorBusca" type={tipoBusca === 'id' ? 'number' : 'text'} value={valorBusca} onChange={(e) => setValorBusca(e.target.value)} required placeholder={tipoBusca === 'id' ? 'Digite o código...' : 'Digite o CPF ou CNPJ...'} className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"/> </div> <button type="submit" disabled={isLoading} className={`flex-shrink-0 w-full sm:w-auto h-10 px-5 py-2 rounded text-white flex items-center justify-center font-semibold whitespace-nowrap transition-opacity ${isLoading ? 'bg-sky-800 cursor-not-allowed opacity-70' : 'bg-sky-600 hover:bg-sky-700'}`}> <Search className="mr-2" size={18}/> {isLoading ? 'Buscando...' : 'Gerar Relatório'} </button>
                    </form>
                </div>

                {/* Mensagem de Erro */}
                {error && ( <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"> <MdErrorOutline className="inline mr-2" /> {error} <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"> <span className="text-xl" aria-hidden="true">&times;</span> </button> </div> )}

                {/* Loading */}
                {isLoading && <div className='flex justify-center items-center py-10'><Loader2 className="h-8 w-8 animate-spin text-sky-400" /><span className='ml-3 text-sky-300'>Carregando relatório...</span></div>}

                {/* Mensagem Nenhum Cliente Encontrado */}
                {!isLoading && !relatorioData && buscaRealizada && !error && ( <div className="text-center text-slate-400 mt-10 bg-slate-800/50 p-6 rounded-lg max-w-md mx-auto border border-slate-700"> <ListX size={40} className="mx-auto mb-4 text-slate-500" /> <p>Nenhum cliente encontrado para os critérios informados.</p> </div> )}

                {/* Conteúdo do Relatório */}
                {!isLoading && relatorioData && (
                    <div className="space-y-6">

                        {/* --- Card Dados do Cliente --- */}
                        {relatorioData.cliente && (
                            <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                                <h2 className="flex items-center text-xl font-semibold mb-4 text-sky-400 border-b border-slate-700 pb-2 gap-2">
                                    <UserCircle size={24}/> Dados do Cliente
                                </h2>
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-3 text-sm">
                                    {/* ... (dados do cliente como antes) ... */}
                                    <span className="flex items-center gap-2"><Info size={16} className="text-slate-500 flex-shrink-0"/><strong>Nome:</strong> <span className='truncate' title={`${relatorioData.cliente.nome} ${relatorioData.cliente.sobrenome}`}>{relatorioData.cliente.nome} {relatorioData.cliente.sobrenome}</span></span> <span className="flex items-center gap-2"><MdBadge className="text-slate-500 flex-shrink-0"/><strong>Doc:</strong> {relatorioData.cliente.numeroDocumento} ({relatorioData.cliente.tipoDocumento})</span> <span className="flex items-center gap-2"><Info size={16} className="text-slate-500 flex-shrink-0"/><strong>Tipo:</strong> {relatorioData.cliente.tipoCliente === 'PF' ? 'Pessoa Física' : 'Pessoa Jurídica'}</span> <span className="flex items-center gap-2"><Calendar size={16} className="text-slate-500 flex-shrink-0"/><strong>Nasc:</strong> {formatarData(relatorioData.cliente.dataNascimento)}</span> <span className="flex items-center gap-2"><Info size={16} className="text-slate-500 flex-shrink-0"/><strong>Sexo:</strong> {relatorioData.cliente.sexo || '-'}</span> <span className="flex items-center gap-2"><Briefcase size={16} className="text-slate-500 flex-shrink-0"/><strong>Profissão:</strong> <span className='truncate' title={relatorioData.cliente.atividadeProfissional}>{relatorioData.cliente.atividadeProfissional || '-'}</span></span> <span className="flex items-center gap-2"><PhoneCall size={16} className="text-slate-500 flex-shrink-0"/><strong>Celular:</strong> {relatorioData.cliente.contato?.celular || '-'}</span> <span className="flex items-center gap-2 lg:col-span-2"><Mail size={16} className="text-slate-500 flex-shrink-0"/><strong>Email:</strong> <span className='truncate' title={relatorioData.cliente.contato?.email}>{relatorioData.cliente.contato?.email || '-'}</span></span>

                                    {/* <<< ENDEREÇO CORRIGIDO E REFORMATADO >>> */}
                                    <div className="flex items-start gap-2 col-span-1 sm:col-span-2 lg:col-span-3 mt-2 pt-3 border-t border-slate-700/50">
                                        <MapPin size={18} className="text-slate-400 mt-0.5 flex-shrink-0" />
                                        <div className="text-sm space-y-1">
                                            <p className="text-slate-200"> {relatorioData.cliente.endereco?.logradouro || 'Logradouro não informado'}, {relatorioData.cliente.endereco?.numero || 'S/N'} {relatorioData.cliente.endereco?.complemento ? <span className="text-slate-400 text-xs"> ({relatorioData.cliente.endereco.complemento})</span> : ''} </p>
                                            <p className="text-slate-300"> Bairro: {relatorioData.cliente.endereco?.bairro || '-'} </p>
                                            <p className="text-slate-300"> {relatorioData.cliente.endereco?.localidade || 'Cidade não informada'} / {relatorioData.cliente.endereco?.uf || '--'} </p>
                                            <p className="text-slate-400 text-xs"> CEP: {relatorioData.cliente.endereco?.cep || '-'} </p>
                                        </div>
                                    </div>
                                    {/* <<< FIM ENDEREÇO >>> */}
                                </div>
                            </section>
                        )}

                        {/* --- Layout em Colunas --- */}
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">

                            {/* Coluna Esquerda */}
                            <div className="space-y-6">

                                {/* --- Card Veículos (REFATORADO v2) --- */}
                                <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                                    <h2 className="flex items-center text-lg font-semibold mb-3 text-sky-400 border-b border-slate-700 pb-2 gap-2">
                                        <Car size={20}/> Veículos ({relatorioData.veiculos?.length ?? 0})
                                    </h2>
                                    {relatorioData.veiculos && relatorioData.veiculos.length > 0 ? (
                                        <div className="space-y-3 max-h-72 overflow-y-auto pr-2">
                                            {relatorioData.veiculos.map(v => (
                                                <div key={v.id} className="bg-slate-800/60 p-3 rounded border border-slate-600 text-xs hover:border-sky-500 transition-colors duration-150">
                                                    {/* Linha 1: Modelo, Montadora, Tipo */}
                                                    <div className='flex flex-wrap justify-between items-start mb-2 gap-x-3'>
                                                        <p className='font-semibold text-sm text-slate-100 truncate flex-grow basis-2/3' title={`${v.modelo} (${v.montadora})`}>
                                                            <Info size={14} className="inline -mt-1 mr-1 text-slate-400"/> {v.modelo || '-'} <span className='text-slate-400 font-normal'>({v.montadora || 'N/I'})</span>
                                                        </p>
                                                        <p className="text-slate-300 flex items-center gap-1 flex-shrink-0 text-xs uppercase font-medium tracking-wider">
                                                            <ListChecks size={14} className="text-slate-400" /> {v.tipoVeiculo || '-'}
                                                        </p>
                                                    </div>
                                                    {/* Linha 2: Placa e Renavam */}
                                                    <div className="flex flex-wrap justify-between items-center gap-x-4 mb-2">
                                                        <p className="flex items-center gap-1">
                                                            <MdBadge className="text-slate-400"/> <strong>Placa:</strong> <span className="ml-1 font-mono bg-slate-600 px-1.5 py-0.5 rounded text-sky-300">{v.placa || '-'}</span> </p>
                                                        <p className="flex items-center gap-1 text-slate-400"> <Hash size={12} /> <strong>Renavam:</strong> <span className='ml-1'>{v.renavam || '-'}</span> </p>
                                                    </div>
                                                    {/* Linha 3: Cor, Ano, Motor */}
                                                    <div className="grid grid-cols-3 gap-x-2 items-center border-t border-slate-700/50 pt-2 mt-2 text-slate-300">
                                                        <p className="flex items-center gap-1 truncate" title={`Cor: ${v.cor}`}> <Palette size={12} className="text-slate-400 flex-shrink-0"/> <span className="text-slate-400 mr-1">Cor:</span> <span className='truncate'>{v.cor || '-'}</span> </p>
                                                        <p className="flex items-center gap-1"> <Calendar size={12} className="text-slate-400 flex-shrink-0"/> <span className="text-slate-400 mr-1">Ano:</span> <span className='truncate'>{extrairAno(v.anoFabricacao)}</span> </p>
                                                        <p className="flex items-center gap-1 truncate" title={`Motor: ${v.motor}`}> <Settings size={12} className="text-slate-400 flex-shrink-0"/> <span className="text-slate-400 mr-1">Motor:</span> <span className='truncate'>{v.motor || '-'}</span> </p>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    ) : <p className="text-slate-400 text-sm">Nenhum veículo encontrado.</p>}
                                </section>
                                {/* --- Fim Card Veículos --- */}

                                {/* --- Card Orçamentos --- */}
                                <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                                    <h2 className="flex items-center text-lg font-semibold mb-3 text-sky-400 border-b border-slate-700 pb-2 gap-2"> <FileText size={20}/> Orçamentos ({relatorioData.orcamentos?.length ?? 0}) </h2>
                                    {/* ... (código interno orçamento) ... */}
                                    {relatorioData.orcamentos && relatorioData.orcamentos.length > 0 ? ( <div className="space-y-2 max-h-60 overflow-y-auto pr-2"> {relatorioData.orcamentos.map(o => ( <div key={o.id} className="border-l-4 border-sky-600 pl-3 text-xs bg-slate-800/50 p-2 rounded"> <p className='flex justify-between items-center'> <span><strong>Data:</strong> {formatarData(o.dataOrcamento)}</span> <span className='font-bold text-base text-sky-300'>R$ {o.valorTotal?.toFixed(2) ?? '-'}</span> </p> <p className="text-slate-400">M.O: R$ {o.maoDeObra?.toFixed(2) ?? '-'} ({o.quantidadeHoras ?? '-'}h @ R$ {o.valorHora?.toFixed(2) ?? '-'}/h)</p> </div> ))} </div> ) : <p className="text-slate-400 text-sm">Nenhum orçamento encontrado.</p>}
                                </section>

                                {/* --- Card Pagamentos --- */}
                                <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                                    <h2 className="flex items-center text-lg font-semibold mb-3 text-sky-400 border-b border-slate-700 pb-2 gap-2"> <DollarSign size={20}/> Pagamentos ({relatorioData.pagamentos?.length ?? 0}) </h2>
                                    {/* ... (código interno pagamento) ... */}
                                    {relatorioData.pagamentos && relatorioData.pagamentos.length > 0 ? ( <div className="space-y-2 max-h-60 overflow-y-auto pr-2"> {relatorioData.pagamentos.map(p => ( <div key={p.id} className="border-l-4 border-green-600 pl-3 text-xs bg-slate-800/50 p-2 rounded"> <p className='flex justify-between items-center'> <span><strong>Data:</strong> {formatarData(p.dataPagamento)}</span> <span className='font-semibold text-green-400'>R$ {p.totalComDesconto?.toFixed(2) ?? '-'}</span> </p> <p className="text-slate-400">Tipo: {p.tipoPagamento} | {p.totalParcelas}x R$ {p.valorParcelas?.toFixed(2) ?? '-'} (Desc: R$ {p.desconto?.toFixed(2) ?? '-'})</p> </div> ))} </div> ) : <p className="text-slate-400 text-sm">Nenhum pagamento encontrado.</p>}
                                </section>
                            </div>

                            {/* Coluna Direita */}
                            <div className="space-y-6">
                                {/* --- Card Gráfico --- */}
                                <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                                    <h2 className="flex items-center text-lg font-semibold mb-3 text-sky-400 border-b border-slate-700 pb-2 gap-2"> <BarChart3 size={20}/> Volume Total de Agendamentos </h2>
                                    <div className="relative h-24"> {(relatorioData.totalAgendamentos ?? 0) > 0 ? ( <Bar options={chartOptions} data={chartData} /> ) : ( <p className="text-slate-400 text-xs text-center flex items-center justify-center h-full">Sem dados para exibir gráfico.</p> )} </div>
                                </section>

                                {/* --- Card Histórico Agendamentos --- */}
                                <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                                    <h2 className="flex items-center text-lg font-semibold mb-3 text-sky-400 border-b border-slate-700 pb-2 gap-2"> <CalendarClock size={20}/> Histórico Agendamentos ({relatorioData.agendamentos?.length ?? 0}) </h2>
                                    {/* ... (código interno histórico) ... */}
                                    {relatorioData.agendamentos && relatorioData.agendamentos.length > 0 ? ( <div className="space-y-3 max-h-96 overflow-y-auto pr-2"> {relatorioData.agendamentos.map(a => ( <div key={`ag-${a.id}`} className="bg-slate-800/50 p-3 rounded border border-slate-700 text-xs hover:border-sky-600 transition-colors"> <div className="flex justify-between items-center mb-1"> <span className="flex items-center gap-1 font-semibold text-sky-300"><CalendarDays size={14}/> {formatarData(a.dataAgendamento)}</span> <span className="font-mono bg-slate-600 px-1.5 py-0.5 rounded flex items-center gap-1"><Car size={14}/> {a.veiculoPlaca || 'N/I'}</span> </div> <p className="text-slate-300"><strong className='text-slate-400'>Obs:</strong> {a.observacao || '-'}</p> </div> ))} </div> ) : <p className="text-slate-400 text-sm">Nenhum agendamento encontrado.</p>}
                                </section>

                                {/* --- Card Serviços / Oficina --- */}
                                <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                                    <h2 className="flex items-center text-lg font-semibold mb-3 text-sky-400 border-b border-slate-700 pb-2 gap-2"> <Wrench size={20}/> Serviços Realizados ({relatorioData.servicosOficina?.length ?? 0}) </h2>
                                    {/* ... (código interno serviços) ... */}
                                    {relatorioData.servicosOficina && relatorioData.servicosOficina.length > 0 ? ( <div className="space-y-3 max-h-96 overflow-y-auto pr-2"> {relatorioData.servicosOficina.map(s => ( <div key={`sv-${s.idOficina}`} className="bg-slate-800/50 p-3 rounded border border-slate-700 text-xs hover:border-teal-600 transition-colors"> <div className="flex justify-between items-center mb-1"> <span className="flex items-center gap-1 font-semibold text-sky-300"><CalendarDays size={14}/> {formatarData(s.dataOficina)}</span> <span className="font-mono bg-slate-600 px-1.5 py-0.5 rounded flex items-center gap-1"><Car size={14}/> {s.veiculoPlaca || 'N/I'}</span> </div> <p className="text-slate-300 mb-0.5"><strong>Problema:</strong> {s.descricaoProblema || '-'}</p> <p className="text-slate-300"><strong>Diagnóstico:</strong> {s.diagnostico || '-'}</p> <p className="text-slate-400 mt-1">Partes: {s.partesAfetadas || '-'} | Horas: {s.horasTrabalhadas || '-'}</p> {s.pecasUtilizadas && s.pecasUtilizadas.length > 0 && ( <div className="mt-2 pt-2 border-t border-slate-600/50"> <p className="font-semibold text-slate-400 mb-1 flex items-center gap-1"><Puzzle size={14}/> Peças:</p> <ul className="list-disc list-inside text-slate-300 space-y-0.5 pl-4"> {s.pecasUtilizadas.map(p => ( <li key={p.idPeca}>{p.descricaoPeca} ({p.fabricante})</li> ))} </ul> </div> )} </div> ))} </div> ) : <p className="text-slate-400 text-sm">Nenhum serviço encontrado.</p>}
                                </section>
                            </div>
                        </div>
                    </div>
                )}

                {/* Mensagem inicial */}
                {!isLoading && !relatorioData && !buscaRealizada && !error && (
                    <div className="text-center text-slate-400 mt-10 bg-slate-800/50 p-6 rounded-lg max-w-md mx-auto border border-slate-700">
                        <Search size={40} className="mx-auto mb-4 text-sky-500" />
                        <p>Utilize a busca acima para gerar o relatório completo de um cliente.</p>
                    </div>
                )}

            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\relatorio\contagem-mensal\page.tsx   |   componente RelatorioContagemMensalPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/relatorio/contagem-mensal/page.tsx
"use client";

import { useState, useEffect, useMemo } from 'react'; // <<< ADICIONAR useMemo AQUI
import NavBar from '@/components/nav-bar';
import { Bar } from 'react-chartjs-2';
import {
    Chart as ChartJS, CategoryScale, LinearScale, BarElement,
    Title as ChartTitle, Tooltip, Legend, Filler, PointElement, LineElement, BarController, LineController, ArcElement // Registro mais completo
} from 'chart.js';
import {
    MdBarChart, MdTableChart, MdInsertChart, MdList, MdCalendarToday, MdErrorOutline
} from 'react-icons/md';
import { Loader2 } from 'lucide-react'; // Para ícone de loading

// Registrar componentes Chart.js (mais completo para evitar erros)
ChartJS.register(
    CategoryScale, LinearScale, BarController, BarElement, LineController, LineElement, PointElement, ArcElement,
    ChartTitle, Tooltip, Legend, Filler
);

interface ContagemMensalDto { mesAno: string; quantidade: number; }
type ViewMode = 'both' | 'table' | 'graph';

// Cores para barras (consistente com outros relatórios)
const backgroundColors = [
    'rgba(54, 162, 235, 0.7)', 'rgba(75, 192, 192, 0.7)', 'rgba(255, 206, 86, 0.7)',
    'rgba(153, 102, 255, 0.7)', 'rgba(255, 159, 64, 0.7)', 'rgba(255, 99, 132, 0.7)',
    'rgba(100, 116, 139, 0.7)', 'rgba(239, 68, 68, 0.7)', 'rgba(59, 130, 246, 0.7)',
    'rgba(16, 185, 129, 0.7)', 'rgba(245, 158, 11, 0.7)', 'rgba(139, 92, 246, 0.7)'
];
const borderColors = backgroundColors.map(color => color.replace(/0\.7/, '1'));

export default function RelatorioContagemMensalPage() {
    const [dadosContagem, setDadosContagem] = useState<ContagemMensalDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [viewMode, setViewMode] = useState<ViewMode>('both');

    useEffect(() => {
        const fetchContagem = async () => {
            setIsLoading(true); setError(null);
            try {
                const resp = await fetch("http://localhost:8080/rest/relatorios/contagem-agendamentos-mensal");
                if (!resp.ok) {
                    if (resp.status === 404) throw new Error("Endpoint não encontrado (404). Verifique a URL da API.");
                    if (resp.status >= 500) throw new Error(`Erro no servidor (${resp.status}). Tente novamente mais tarde.`);
                    throw new Error(`Erro HTTP ${resp.status}.`);
                }
                if (resp.status === 204) { setDadosContagem([]); return; }
                const data: ContagemMensalDto[] = await resp.json();
                data.sort((a, b) => b.mesAno.localeCompare(a.mesAno)); // Para a tabela (mais recentes primeiro)
                setDadosContagem(data);
            } catch (err: any) {
                setError( err instanceof TypeError && err.message === 'Failed to fetch' ? "Falha ao conectar ao servidor." : err.message );
                setDadosContagem([]);
            } finally { setIsLoading(false); }
        };
        fetchContagem();
    }, []);

    const chartData = useMemo(() => {
        const sortedDataForChart = [...dadosContagem].sort((a, b) => a.mesAno.localeCompare(b.mesAno)); // ASC para gráfico
        const labels = sortedDataForChart.map(d => d.mesAno);
        const valores = sortedDataForChart.map(d => d.quantidade);
        return {
            labels,
            datasets: [{
                label: 'Nº de Agendamentos',
                data: valores,
                backgroundColor: valores.map((_, i) => backgroundColors[i % backgroundColors.length]),
                borderColor: valores.map((_, i) => borderColors[i % borderColors.length]),
                borderWidth: 1,
                borderRadius: 4, // Adiciona um leve arredondamento às barras
                barPercentage: 0.7, // Ajusta a largura das barras
                categoryPercentage: 0.8, // Ajusta o espaçamento entre grupos de barras
            }]
        };
    }, [dadosContagem]);

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: { display: false }, // Uma série, legenda não é crucial
            title: {
                display: true,
                text: 'Agendamentos por Mês/Ano',
                color: '#e2e8f0', // Cor do título para tema escuro
                font: { size: 16 as number, weight: 'bold' as 'bold' },
                padding: {bottom: 15}
            },
            tooltip: {
                backgroundColor: 'rgba(0,0,0,0.7)',
                titleFont: { size: 13 as number },
                bodyFont: { size: 12 as number },
                padding: 8,
                cornerRadius: 3
            }
        },
        scales: {
            x: {
                ticks: { color: '#94a3b8' }, // Cor dos labels do eixo X
                grid: { display: false }
            },
            y: {
                beginAtZero: true,
                ticks: { color: '#94a3b8', stepSize: Math.max(1, Math.ceil(Math.max(...(chartData.datasets[0].data.map(v => Number(v))), 1) / 6)) },
                grid: { color: 'rgba(100, 116, 139, 0.2)' } // Cor das linhas de grade do eixo Y
            }
        }
    };

    const getLayoutClasses = () => viewMode === 'both' ? 'grid grid-cols-1 lg:grid-cols-3 gap-6' : 'flex flex-col gap-6';

    const getSectionClasses = (sec: 'table' | 'graph'): string => {
        // Ambas as seções usarão o mesmo fundo escuro agora
        const baseClasses = 'bg-slate-800 p-4 rounded-lg shadow-md';
        if (viewMode === 'table') return sec === 'table' ? `w-full ${baseClasses}` : 'hidden';
        if (viewMode === 'graph') return sec === 'graph' ? `w-full ${baseClasses}` : 'hidden';
        // both
        return sec === 'table'
            ? `lg:col-span-1 ${baseClasses} flex flex-col` // Tabela ocupa 1/3 no modo "ambos"
            : `lg:col-span-2 ${baseClasses}`;              // Gráfico ocupa 2/3 no modo "ambos"
    };

    return (
        <>
            <NavBar active="relatorio-contagem-mensal" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-6 text-center gap-2">
                    <MdInsertChart className="text-4xl text-sky-400" />
                    Relatório: Contagem Mensal de Agendamentos
                </h1>

                <div className="mb-6 flex flex-wrap justify-center gap-3">
                    <button onClick={() => setViewMode('both')} className={`flex items-center px-4 py-1.5 text-sm rounded-md transition-colors shadow-sm ${ viewMode === 'both' ? 'bg-sky-500 text-white font-semibold' : 'bg-slate-700 text-slate-200 hover:bg-slate-600' }`} aria-label="Mostrar Tabela e Gráfico"><MdList className="mr-1" /> Ambos</button>
                    <button onClick={() => setViewMode('table')} className={`flex items-center px-4 py-1.5 text-sm rounded-md transition-colors shadow-sm ${ viewMode === 'table' ? 'bg-sky-500 text-white font-semibold' : 'bg-slate-700 text-slate-200 hover:bg-slate-600' }`} aria-label="Mostrar Apenas Tabela"><MdTableChart className="mr-1" /> Tabela</button>
                    <button onClick={() => setViewMode('graph')} className={`flex items-center px-4 py-1.5 text-sm rounded-md transition-colors shadow-sm ${ viewMode === 'graph' ? 'bg-sky-500 text-white font-semibold' : 'bg-slate-700 text-slate-200 hover:bg-slate-600' }`} aria-label="Mostrar Apenas Gráfico"><MdBarChart className="mr-1" /> Gráfico</button>
                </div>

                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />
                        {error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                            <span className="text-xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}

                {isLoading ? (
                    <div className='flex justify-center items-center py-10'>
                        <Loader2 className="h-8 w-8 animate-spin text-sky-400" />
                        <span className='ml-3 text-sky-300 text-lg'>Carregando relatório...</span>
                    </div>
                ) : (
                    <div className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-xl border border-slate-700">
                        {dadosContagem.length === 0 && !error ? (<p className="text-center text-slate-400 py-6">Nenhum dado encontrado para o período.</p>) : !error ? (
                            <div className={getLayoutClasses()}>
                                <div className={`${getSectionClasses('table')} flex flex-col`}>
                                    <h2 className="flex items-center text-lg mb-3 font-semibold text-sky-300 flex-shrink-0 border-b border-slate-700 pb-2">
                                        <MdList className="mr-2" /> Dados Mensais (Recentes Primeiro)
                                    </h2>
                                    <div className="flex-grow overflow-y-auto max-h-96">
                                        <table className="w-full text-sm text-left">
                                            <thead className="sticky top-0 bg-slate-700 text-xs text-slate-300 uppercase z-10">
                                            <tr>
                                                <th scope="col" className="px-4 py-2"> <div className="flex items-center gap-1"> <MdCalendarToday size={14}/> Mês/Ano </div> </th>
                                                <th scope="col" className="px-4 py-2 text-right"> Quantidade </th>
                                            </tr>
                                            </thead>
                                            <tbody className="divide-y divide-slate-700">
                                            {dadosContagem.map(item => (
                                                <tr key={item.mesAno} className="hover:bg-slate-700/50">
                                                    <td className="px-4 py-2 text-slate-300">{item.mesAno}</td>
                                                    <td className="px-4 py-2 font-medium text-slate-100 text-right">{item.quantidade}</td>
                                                </tr>
                                            ))}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                                <div className={getSectionClasses('graph')}>
                                    <div className="relative h-80 md:h-96 lg:h-[450px]"> {/* Altura ajustável */}
                                        <Bar data={chartData} options={chartOptions} />
                                    </div>
                                </div>
                            </div>
                        ) : null}
                    </div>
                )}
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\relatorio\financeiro-pagamentos\page.tsx   |   componente RelatorioFinanceiroPagamentosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/relatorio/financeiro-pagamentos/page.tsx
"use client";

import React, { useState, useEffect, useMemo } from 'react';
import NavBar from '@/components/nav-bar';
import { Bar, Pie } from 'react-chartjs-2'; // Pie adicionado
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    BarController,
    BarElement,
    LineController,
    LineElement,
    PointElement,
    ArcElement,     // Necessário para Pie/Doughnut
    Title as ChartTitle,
    Tooltip,
    Legend,
    Filler
} from 'chart.js';
import {
    MdAttachMoney, MdTrendingUp, MdPieChart, MdFilterList, MdErrorOutline, MdAssessment, MdCalendarToday, MdSummarize
} from 'react-icons/md';
import { DollarSign, Users, BarChartHorizontalBig, Activity, Palette, CheckCircle, AlertCircle, Loader2 } from 'lucide-react';

ChartJS.register(
    CategoryScale, LinearScale, BarController, BarElement,
    LineController, LineElement, PointElement, ArcElement, // ArcElement registrado
    ChartTitle, Tooltip, Legend, Filler
);

interface EstatisticasPagamentosDto {
    totalOperacoes: number;
    valorTotalArrecadado: number;
    ticketMedio: number;
}
interface PagamentosPorTipoDto {
    tipoPagamento: string;
    quantidade: number;
    valorTotal: number;
}
interface EvolucaoMensalValorDto {
    mesAno: string;
    valorTotal: number;
}
type ViewModePagamentos = 'resumo' | 'porTipo' | 'evolucaoValor';

const chartBackgroundColors = [
    'rgba(54, 162, 235, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(255, 206, 86, 0.8)',
    'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)', 'rgba(255, 99, 132, 0.8)',
    'rgba(100, 116, 139, 0.8)', 'rgba(239, 68, 68, 0.8)', 'rgba(59, 130, 246, 0.8)',
    'rgba(16, 185, 129, 0.8)', 'rgba(245, 158, 11, 0.8)', 'rgba(139, 92, 246, 0.8)'
]; // Alpha aumentado para melhor visualização em Pie
const chartBorderColors = chartBackgroundColors.map(color => color.replace(/0\.8/, '1'));

export default function RelatorioFinanceiroPagamentosPage() {
    const [viewMode, setViewMode] = useState<ViewModePagamentos>('resumo');
    const [dataInicio, setDataInicio] = useState(() => new Date(new Date().getFullYear(), 0, 1).toISOString().split('T')[0]);
    const [dataFim, setDataFim] = useState(() => new Date().toISOString().split('T')[0]);

    const [estatisticas, setEstatisticas] = useState<EstatisticasPagamentosDto | null>(null);
    const [pagamentosPorTipo, setPagamentosPorTipo] = useState<PagamentosPorTipoDto[]>([]);
    const [evolucaoValor, setEvolucaoValor] = useState<EvolucaoMensalValorDto[]>([]);

    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const fetchData = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const queryParams = new URLSearchParams({ dataInicio, dataFim }).toString();
            let fetchError = null;

            try {
                const statsRes = await fetch(`http://localhost:8080/rest/relatorios/pagamentos/estatisticas?${queryParams}`);
                if (!statsRes.ok) {
                    const errorData = await statsRes.json().catch(() => ({ message: `Estatísticas: ${statsRes.statusText} (status ${statsRes.status})` }));
                    throw new Error(errorData.message);
                }
                const statsData = await statsRes.json();
                setEstatisticas(statsData);
            } catch (e: any) {
                console.error("Erro ao buscar estatísticas:", e);
                fetchError = e.message || "Erro ao buscar estatísticas.";
                setEstatisticas(null);
            }

            try {
                const tipoRes = await fetch(`http://localhost:8080/rest/relatorios/pagamentos/por-tipo?${queryParams}`);
                if (!tipoRes.ok) {
                    const errorData = await tipoRes.json().catch(() => ({ message: `Pagamentos por Tipo: ${tipoRes.statusText} (status ${tipoRes.status})` }));
                    throw new Error(errorData.message);
                }
                const tipoData = await tipoRes.json();
                setPagamentosPorTipo(tipoData || []);
            } catch (e: any) {
                console.error("Erro ao buscar pagamentos por tipo:", e);
                fetchError = fetchError ? `${fetchError}\n${e.message}` : (e.message || "Erro ao buscar pagamentos por tipo.");
                setPagamentosPorTipo([]);
            }

            try {
                const evolucaoRes = await fetch(`http://localhost:8080/rest/relatorios/pagamentos/evolucao-mensal-valor?${queryParams}`);
                if (!evolucaoRes.ok) {
                    const errorData = await evolucaoRes.json().catch(() => ({ message: `Evolução Mensal: ${evolucaoRes.statusText} (status ${evolucaoRes.status})` }));
                    throw new Error(errorData.message);
                }
                const evolucaoData = await evolucaoRes.json();
                const sortedEvolucaoData = (evolucaoData || []).sort((a: EvolucaoMensalValorDto, b: EvolucaoMensalValorDto) => a.mesAno.localeCompare(b.mesAno));
                setEvolucaoValor(sortedEvolucaoData);
            } catch (e: any) {
                console.error("Erro ao buscar evolução mensal:", e);
                fetchError = fetchError ? `${fetchError}\n${e.message}` : (e.message || "Erro ao buscar evolução mensal.");
                setEvolucaoValor([]);
            }
            if (fetchError) { setError(fetchError); }
        } catch (err: any) {
            console.error("Falha geral ao buscar dados do relatório:", err);
            setError(err.message || "Erro desconhecido ao buscar dados.");
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [dataInicio, dataFim]);

    const handleFilterSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        fetchData();
    };

    const formatCurrency = (value: number | undefined | null): string => {
        if (value === null || value === undefined) return 'R$ 0,00';
        return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    };

    const pagamentosPorTipoChartData = useMemo(() => {
        const labels = pagamentosPorTipo.map(p => p.tipoPagamento);
        const dataValues = pagamentosPorTipo.map(p => p.valorTotal);
        const dataQuantidades = pagamentosPorTipo.map(p => p.quantidade);
        return {
            labels,
            datasets: [
                {
                    type: 'bar' as const,
                    label: 'Valor Total (R$)',
                    data: dataValues,
                    backgroundColor: labels.map((_, i) => chartBackgroundColors[i % chartBackgroundColors.length]),
                    borderColor: labels.map((_, i) => chartBorderColors[i % chartBorderColors.length]),
                    borderWidth: 1,
                    yAxisID: 'yValor',
                    order: 1
                },
                {
                    type: 'bar' as const,
                    label: 'Quantidade',
                    data: dataQuantidades,
                    backgroundColor: labels.map((_, i) => chartBackgroundColors[(i + Math.floor(chartBackgroundColors.length / 2)) % chartBackgroundColors.length].replace('0.8', '0.6')),
                    borderColor: labels.map((_, i) => chartBorderColors[(i + Math.floor(chartBorderColors.length / 2)) % chartBorderColors.length]),
                    borderWidth: 1,
                    yAxisID: 'yQuantidade',
                    order: 2
                }
            ]
        };
    }, [pagamentosPorTipo]);

    // NOVO: Dados para o Gráfico de Pizza (Distribuição por Quantidade)
    const pagamentosPorTipoPizzaChartData = useMemo(() => {
        const labels = pagamentosPorTipo.map(p => p.tipoPagamento);
        const dataQuantidades = pagamentosPorTipo.map(p => p.quantidade);
        return {
            labels,
            datasets: [{
                label: 'Quantidade por Forma de Pagamento',
                data: dataQuantidades,
                backgroundColor: labels.map((_, i) => chartBackgroundColors[i % chartBackgroundColors.length]),
                borderColor: labels.map((_, i) => chartBorderColors[i % chartBorderColors.length]),
                borderWidth: 1,
            }]
        };
    }, [pagamentosPorTipo]);

    const evolucaoValorChartData = useMemo(() => {
        const labels = evolucaoValor.map(e => e.mesAno);
        const dataValues = evolucaoValor.map(e => e.valorTotal);
        return {
            labels,
            datasets: [{
                type: 'bar' as const,
                label: 'Valor Total Arrecadado (R$)',
                data: dataValues,
                backgroundColor: labels.map((_, i) => chartBackgroundColors[i % chartBackgroundColors.length]),
                borderColor: labels.map((_, i) => chartBorderColors[i % chartBorderColors.length]),
                borderWidth: 1
            }]
        };
    }, [evolucaoValor]);

    const chartOptionsBase = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top' as const,
                labels: { color: '#e2e8f0', boxWidth: 15, padding:15 }
            },
            tooltip: {
                mode: 'index' as const,
                intersect: false,
                backgroundColor: 'rgba(0,0,0,0.8)',
                titleFont: { size: 14 as number },
                bodyFont: { size: 12 as number },
                padding: 10,
                cornerRadius: 4
            }
        },
        scales: { x: { ticks: { color: '#94a3b8' }, grid: { display: false } } }
    };

    const pagamentosPorTipoChartOptions = {
        ...chartOptionsBase,
        plugins: {
            ...chartOptionsBase.plugins,
            title: { display: true, text: 'Pagamentos por Forma (Valor e Quantidade)', color: '#e2e8f0', font: { size: 16 as number, weight: 'bold' as 'bold' }, padding: {bottom: 15} }
        },
        scales: {
            ...chartOptionsBase.scales,
            x: { ...chartOptionsBase.scales.x, stacked: false },
            yValor: {
                type: 'linear' as const,
                display: true,
                position: 'left' as const,
                title: { display: true, text: 'Valor Total (R$)', color: '#94a3b8', font: {size: 12 as number, weight: 'bold' as 'bold'}},
                ticks: { color: '#94a3b8', callback: function(value: any) { return 'R$ ' + Number(value).toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2 }); } },
                grid: { color: 'rgba(100, 116, 139, 0.2)' },
                stacked: false
            },
            yQuantidade: {
                type: 'linear' as const,
                display: true,
                position: 'right' as const,
                title: { display: true, text: 'Quantidade de Pagamentos', color: '#94a3b8', font: {size: 12 as number, weight: 'bold' as 'bold'}},
                ticks: { color: '#94a3b8', stepSize: pagamentosPorTipo.length > 0 ? Math.max(1, Math.ceil(Math.max(...(pagamentosPorTipo.map(p => p.quantidade)), 1) / 5)) : 1 },
                grid: { drawOnChartArea: false },
                stacked: false
            },
        }
    };

    // NOVO: Opções para o Gráfico de Pizza
    const pizzaChartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom' as const,
                labels: {
                    color: '#e2e8f0',
                    boxWidth: 12,
                    padding: 20,
                    font: { size: 11 as number}
                }
            },
            title: {
                display: true,
                text: 'Distribuição por Quantidade', // Título mais simples para o espaço
                color: '#cbd5e1', // Cor mais suave para subtítulo
                font: { size: 14 as number, weight: 'normal' as 'normal' },
                padding: { top: 0, bottom: 10 }
            },
            tooltip: {
                callbacks: {
                    label: function(context: any) {
                        let label = context.label || '';
                        if (context.parsed !== null) {
                            if (label) { label += ': '; }
                            label += context.parsed;
                        }
                        return label;
                    }
                }
            }
        }
    };

    const evolucaoValorChartOptions = {
        ...chartOptionsBase,
        plugins: {
            ...chartOptionsBase.plugins,
            legend: { display: false },
            title: { display: true, text: 'Evolução Mensal do Valor Arrecadado', color: '#e2e8f0', font: { size: 16 as number, weight: 'bold' as 'bold'}, padding: {bottom: 15} }
        },
        scales: {
            ...chartOptionsBase.scales,
            y: {
                beginAtZero: true,
                ticks: { color: '#94a3b8', callback: function(value: any) { return 'R$ ' + Number(value).toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2 }); } },
                grid: { color: 'rgba(100, 116, 139, 0.2)' }
            }
        }
    };


    return (
        <>
            <NavBar active="relatorio-financeiro-pagamentos" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-6 text-center gap-2">
                    <MdAssessment className="text-4xl text-sky-400" />
                    Relatório Financeiro de Pagamentos
                </h1>

                <form onSubmit={handleFilterSubmit} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md flex flex-wrap items-end gap-4 justify-center">
                    <div className="flex items-center gap-2">
                        <label htmlFor="dataInicio" className="text-sm text-slate-300 whitespace-nowrap"><MdCalendarToday className="inline mr-1"/>De:</label>
                        <input type="date" id="dataInicio" value={dataInicio} onChange={e => setDataInicio(e.target.value)} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"/>
                    </div>
                    <div className="flex items-center gap-2">
                        <label htmlFor="dataFim" className="text-sm text-slate-300 whitespace-nowrap"><MdCalendarToday className="inline mr-1"/>Até:</label>
                        <input type="date" id="dataFim" value={dataFim} onChange={e => setDataFim(e.target.value)} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"/>
                    </div>
                    <button type="submit" disabled={isLoading} className={`p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}>
                        <MdFilterList size={20}/> Aplicar Filtros
                    </button>
                </form>

                <div className="mb-6 flex flex-wrap justify-center gap-3">
                    {(['resumo', 'porTipo', 'evolucaoValor'] as ViewModePagamentos[]).map(mode => (
                        <button
                            key={mode}
                            onClick={() => setViewMode(mode)}
                            className={`flex items-center px-4 py-2 text-sm rounded-md transition-colors shadow-sm ${ viewMode === mode ? 'bg-sky-500 text-white font-semibold' : 'bg-slate-700 text-slate-200 hover:bg-slate-600' }`}
                        >
                            {mode === 'resumo' && <><MdSummarize className="mr-2"/>Resumo Geral</>}
                            {mode === 'porTipo' && <><MdPieChart className="mr-2"/>Formas de Pagamento</>}
                            {mode === 'evolucaoValor' && <><MdTrendingUp className="mr-2"/>Evolução Mensal (Valor)</>}
                        </button>
                    ))}
                </div>

                {isLoading && (
                    <div className='flex justify-center items-center py-10'>
                        <Loader2 className="h-8 w-8 animate-spin text-sky-400" />
                        <span className='ml-3 text-sky-300 text-lg'>Carregando dados do relatório...</span>
                    </div>
                )}
                {error && !isLoading && (
                    <div className="text-center text-red-400 py-4 bg-red-900/30 border border-red-700 rounded-md p-4 max-w-2xl mx-auto">
                        <p className="flex items-center justify-center gap-2"><MdErrorOutline size={22}/> Erro ao carregar relatório: {error}</p>
                        <button onClick={fetchData} className="mt-3 px-4 py-1.5 bg-sky-600 hover:bg-sky-700 rounded text-white text-sm">
                            Tentar Novamente
                        </button>
                    </div>
                )}

                {!isLoading && !error && (
                    <div className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-xl border border-slate-700">
                        {viewMode === 'resumo' && (
                            <section>
                                <h2 className="flex items-center text-xl font-semibold mb-6 text-sky-300 border-b border-slate-700 pb-3 gap-2">
                                    <MdSummarize size={24}/> Resumo Geral de Pagamentos
                                </h2>
                                {estatisticas && pagamentosPorTipo.length > 0 && (
                                    <div className="mb-8 p-4 bg-slate-800/50 rounded-lg shadow-inner">
                                        <div className="relative h-64 md:h-72">
                                            <Pie options={pizzaChartOptions} data={pagamentosPorTipoPizzaChartData} />
                                        </div>
                                    </div>
                                )}
                                {estatisticas && pagamentosPorTipo.length === 0 && !isLoading && (
                                    <p className="text-center text-slate-400 py-3 my-4 text-sm bg-slate-800/30 rounded-md">
                                        (Dados insuficientes para o gráfico de distribuição por forma de pagamento no período)
                                    </p>
                                )}
                                {estatisticas ? (
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                                        <div className="bg-slate-800 p-5 rounded-lg shadow">
                                            <p className="text-3xl lg:text-4xl font-bold text-green-400">{formatCurrency(estatisticas.valorTotalArrecadado)}</p>
                                            <p className="text-sm text-slate-400 mt-1">Valor Total Arrecadado</p>
                                        </div>
                                        <div className="bg-slate-800 p-5 rounded-lg shadow">
                                            <p className="text-3xl lg:text-4xl font-bold text-sky-400">{estatisticas.totalOperacoes}</p>
                                            <p className="text-sm text-slate-400 mt-1">Total de Pagamentos Registrados</p>
                                        </div>
                                        <div className="bg-slate-800 p-5 rounded-lg shadow">
                                            <p className="text-3xl lg:text-4xl font-bold text-amber-400">{formatCurrency(estatisticas.ticketMedio)}</p>
                                            <p className="text-sm text-slate-400 mt-1">Ticket Médio por Pagamento</p>
                                        </div>
                                    </div>
                                ) : (
                                    <p className="text-center text-slate-400 py-10">Nenhum dado para o resumo no período selecionado.</p>
                                )}
                            </section>
                        )}

                        {viewMode === 'porTipo' && pagamentosPorTipo.length > 0 && (
                            <section>
                                <h2 className="flex items-center text-xl font-semibold mb-4 text-sky-300 border-b border-slate-700 pb-2 gap-2">
                                    <BarChartHorizontalBig size={24}/> Detalhamento por Forma de Pagamento
                                </h2>
                                <div className="relative h-[450px] md:h-[500px]">
                                    <Bar options={pagamentosPorTipoChartOptions} data={pagamentosPorTipoChartData} />
                                </div>
                            </section>
                        )}
                        {viewMode === 'porTipo' && pagamentosPorTipo.length === 0 && !isLoading && (
                            <p className="text-center text-slate-400 py-10">Nenhum dado de pagamento por tipo para o período selecionado.</p>
                        )}

                        {viewMode === 'evolucaoValor' && evolucaoValor.length > 0 && (
                            <section>
                                <h2 className="flex items-center text-xl font-semibold mb-4 text-sky-300 border-b border-slate-700 pb-2 gap-2">
                                    <Activity size={24}/> Evolução Mensal do Valor Arrecadado
                                </h2>
                                <div className="relative h-80 md:h-96">
                                    <Bar options={evolucaoValorChartOptions} data={evolucaoValorChartData} />
                                </div>
                            </section>
                        )}
                        {viewMode === 'evolucaoValor' && evolucaoValor.length === 0 && !isLoading && (
                            <p className="text-center text-slate-400 py-10">Nenhum dado de evolução mensal para o período selecionado.</p>
                        )}
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\relatorio\historico-cliente\page.tsx   |   componente RelatorioHistoricoClientePage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/relatorio/historico-cliente/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import NavBar from '@/components/nav-bar';
import { useRouter } from 'next/navigation';

// --- Ícones Lucide (Verifique se ListChecks está aqui) ---
import {
    History, Search, User, ScanSearch, Hash, CalendarDays, ClipboardList, Car,
    ListFilter, AlertCircle, Loader2, UserCheck, ListChecks, // <<< CONFIRME QUE ESTÁ AQUI
    ListX
} from 'lucide-react';
import { MdErrorOutline } from 'react-icons/md'; // Mantido para erro

// --- Interfaces ---
interface ClienteInfoDTO {
    idCli: number;
    idEndereco: number;
    nome: string;
    sobrenome: string;
    numeroDocumento: string;
    getNomeCompleto?(): string;
}
interface HistoricoAgendamentoClienteDTO {
    dataAgendamento: string; // Formato YYYY-MM-DD da API
    observacao: string | null;
    veiculoPlaca: string | null;
}
interface AgendamentoHistorico { // Interface para dados formatados
    dataAgendamento: string; // Formatada DD/MM/YYYY ou 'N/A'
    observacao: string;
    veiculoPlaca: string;
}
type TipoBuscaCliente = 'nome' | 'documento' | 'idCliente';

// Helper para adicionar getNomeCompleto
const addGetNomeCompleto = (cliente: ClienteInfoDTO): ClienteInfoDTO => ({
    ...cliente,
    getNomeCompleto() { return `${this.nome} ${this.sobrenome}`.trim(); }
});

// Helper para formatar data
const formatarData = (dataString: string | null | undefined): string => {
    if (!dataString) return '-';
    try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
    catch (e) { console.error("Erro formatar data:", dataString, e); return 'Inválida'; }
};

// Helper para tratar erro fetch
const tratarErroFetch = (err: any): string => {
    if (err instanceof TypeError && err.message === 'Failed to fetch') {
        return "Não foi possível conectar ao servidor. Verifique a API e a rede.";
    }
    // Verifica se é um erro JSON vindo do throw new Error no try do fetch
    if (err.message && (err.message.startsWith("Erro HTTP") || err.message.includes("inválido"))) {
        return err.message; // Já formatado
    }
    if (err.message) {
        return err.message; // Outras mensagens de erro
    }
    return "Ocorreu um erro desconhecido.";
};


export default function RelatorioHistoricoClientePage() {
    // --- Estados ---
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaCliente>('nome');
    const [termoBuscaCliente, setTermoBuscaCliente] = useState('');
    const [clientesEncontrados, setClientesEncontrados] = useState<ClienteInfoDTO[]>([]);
    const [isBuscandoCliente, setIsBuscandoCliente] = useState(false);
    const [clienteSelecionado, setClienteSelecionado] = useState<ClienteInfoDTO | null>(null);
    const [historico, setHistorico] = useState<AgendamentoHistorico[]>([]);
    const [isLoadingHistorico, setIsLoadingHistorico] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const router = useRouter();
    // --------------------------------

    // Placeholder
    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'nome': return 'Digite nome ou sobrenome…';
            case 'documento': return 'Digite CPF ou CNPJ…';
            case 'idCliente': return 'Digite Código do Cliente…';
            default: return '';
        }
    };

    // --- buscarClientes ---
    const buscarClientes = async (e: FormEvent) => {
        e.preventDefault();
        setIsBuscandoCliente(true);
        setError(null);
        setClientesEncontrados([]);
        setClienteSelecionado(null);
        setHistorico([]);

        if (!termoBuscaCliente.trim()) {
            setError("Insira um termo para busca.");
            setIsBuscandoCliente(false);
            return;
        }

        const params = new URLSearchParams();
        // Usar nome correto do parâmetro da API
        if (tipoBusca === 'idCliente') {
            params.append('idCliente', termoBuscaCliente.trim());
        } else if (tipoBusca === 'documento') {
            params.append('documento', termoBuscaCliente.trim());
        } else {
            params.append('nome', termoBuscaCliente.trim());
        }

        const apiUrl = `http://localhost:8080/rest/clientes/buscar?${params}`;
        console.info("Buscando clientes:", apiUrl);

        try {
            const resp = await fetch(apiUrl);
            if (!resp.ok) {
                if (resp.status === 400) throw new Error("Critério de busca inválido ou não fornecido.");
                if (resp.status === 404 || resp.status === 204) {
                    setError("Nenhum cliente encontrado para este critério.");
                    setClientesEncontrados([]);
                    return; // Sai da função se 204 ou 404
                }
                // Tenta ler corpo do erro para outras falhas
                let errorMsg = `Erro HTTP ${resp.status}`;
                try {
                    const errorData = await resp.json();
                    errorMsg = errorData.message || errorMsg;
                } catch (jsonError) {
                    errorMsg = `${errorMsg}: ${resp.statusText || 'Erro desconhecido'}`;
                }
                throw new Error(errorMsg);
            }

            // Se OK (200), tenta ler JSON. Pode ser []
            const data: ClienteInfoDTO[] = await resp.json();
            setClientesEncontrados(data.map(addGetNomeCompleto));
            if (data.length === 0) {
                setError("Nenhum cliente encontrado para este critério.");
            }

        } catch (err: any) {
            setError(tratarErroFetch(err));
            setClientesEncontrados([]);
        } finally {
            setIsBuscandoCliente(false);
        }
    };

    // --- fetchHistorico (COM A CORREÇÃO DO .json()) ---
    const fetchHistorico = async (idCli: number, idEnd: number) => {
        setIsLoadingHistorico(true);
        setError(null); // Limpa erro anterior ao buscar histórico
        setHistorico([]);
        const apiUrl = `http://localhost:8080/rest/relatorios/historico-cliente/${idCli}/${idEnd}`;
        console.info("Buscando histórico em:", apiUrl);
        try {
            const resp = await fetch(apiUrl);

            if (!resp.ok) {
                if (resp.status === 404) throw new Error(`Cliente ID ${idCli}/${idEnd} não encontrado para histórico.`);
                if (resp.status === 400) throw new Error("ID inválido para buscar histórico.");
                let errorMsg = `Erro HTTP ${resp.status}`;
                try { const errorData = await resp.json(); errorMsg = errorData.message || errorMsg; } catch (jsonError) { errorMsg = `${errorMsg}: ${resp.statusText || 'Erro desconhecido'}`; }
                throw new Error(errorMsg);
            }

            const responseBody = await resp.text();

            if (!responseBody) {
                console.info("Nenhum histórico encontrado (corpo da resposta vazio).");
                setHistorico([]);
                return;
            }

            const data: HistoricoAgendamentoClienteDTO[] = JSON.parse(responseBody);

            data.sort((a, b) => (b.dataAgendamento || '').localeCompare(a.dataAgendamento || ''));

            const fmt = data.map(dto => ({
                dataAgendamento: formatarData(dto.dataAgendamento),
                observacao: dto.observacao || '-',
                veiculoPlaca: dto.veiculoPlaca || 'N/A'
            }));
            setHistorico(fmt);
        } catch (err: any) {
            if (err instanceof SyntaxError) { console.error("Erro ao parsear JSON:", err); setError("Formato de resposta inválido do servidor ao buscar histórico."); }
            else { setError(tratarErroFetch(err)); }
            setHistorico([]);
        } finally {
            setIsLoadingHistorico(false);
        }
    };

    // --- handleSelecionarCliente ---
    const handleSelecionarCliente = (c: ClienteInfoDTO) => {
        setError(null);
        setClienteSelecionado(c);
        setClientesEncontrados([]);
        fetchHistorico(c.idCli, c.idEndereco);
    };

    // --- JSX ---
    return (
        <>
            <NavBar active="relatorio-historico-cliente" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título */}
                <h1 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-8 text-center gap-2">
                    <History className="h-8 w-8 text-sky-400" />
                    Relatório: Histórico de Agendamentos por Cliente
                </h1>

                {/* Formulário de Busca */}
                <form onSubmit={buscarClientes} className="mb-8 p-4 md:p-6 bg-slate-800 rounded-lg shadow-md flex flex-col sm:flex-row gap-4 items-end max-w-4xl mx-auto">
                    {/* Select Tipo Busca */}
                    <div className="flex-shrink-0 w-full sm:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300 flex items-center gap-1">
                            <ListFilter size={16} /> Buscar por:
                        </label>
                        <select
                            id="tipoBusca" value={tipoBusca}
                            onChange={e => {
                                setTipoBusca(e.target.value as TipoBuscaCliente);
                                setTermoBuscaCliente(''); setClientesEncontrados([]);
                                setClienteSelecionado(null); setHistorico([]); setError(null);
                            }}
                            className="w-full sm:w-40 p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"
                        >
                            <option value="nome">Nome</option>
                            <option value="documento">Documento</option>
                            <option value="idCliente">Código</option>
                        </select>
                    </div>
                    {/* Input Termo */}
                    <div className="flex-grow w-full">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300 flex items-center gap-1">
                            {tipoBusca === 'nome' ? <User size={16} /> : tipoBusca === 'documento' ? <ScanSearch size={16} /> : <Hash size={16} />}
                            Termo:
                        </label>
                        <input
                            id="termoBusca" type={tipoBusca === 'idCliente' ? 'number' : 'text'}
                            value={termoBuscaCliente} onChange={e => setTermoBuscaCliente(e.target.value)}
                            placeholder={getPlaceholder()} required
                            className="w-full p-2 h-10 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"
                        />
                    </div>
                    {/* Botão Buscar */}
                    <button type="submit" disabled={isBuscandoCliente} className={`flex-shrink-0 w-full sm:w-auto h-10 px-5 py-2 rounded text-white font-semibold flex items-center justify-center gap-2 transition-opacity ${isBuscandoCliente ? 'bg-sky-800 cursor-not-allowed opacity-70' : 'bg-sky-600 hover:bg-sky-700'}`}>
                        <Search size={18} />
                        {isBuscandoCliente ? 'Buscando...' : 'Buscar Cliente'}
                    </button>
                </form>

                {/* Mensagem de Erro Principal */}
                {error && !clienteSelecionado && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />
                        {error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                            <span className="text-xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}

                {/* Loading da Busca de Clientes */}
                {isBuscandoCliente && <p className="text-center text-sky-300 py-4">Buscando clientes...</p>}

                {/* Lista de Seleção de Clientes */}
                {!isBuscandoCliente && clientesEncontrados.length > 0 && !clienteSelecionado && (
                    <div className="mb-8 max-w-3xl mx-auto bg-slate-700/80 backdrop-blur-sm p-4 rounded-lg shadow-md border border-slate-600">
                        <h3 className="text-lg mb-3 font-semibold text-white flex items-center gap-2">
                            {/* Ícone ListChecks agora deve funcionar */}
                            <ListChecks size={20}/> Selecione um Cliente Encontrado:
                        </h3>
                        <ul className="space-y-2 max-h-60 overflow-y-auto pr-2">
                            {clientesEncontrados.map(c => (
                                <li
                                    key={`${c.idCli}-${c.idEndereco}`}
                                    onClick={() => handleSelecionarCliente(c)}
                                    className="p-3 bg-slate-800 hover:bg-sky-700 cursor-pointer rounded flex justify-between items-center text-sm transition-colors duration-150 shadow-sm"
                                    title={`Clique para ver histórico (ID Cliente: ${c.idCli}, ID Endereço: ${c.idEndereco})`}
                                >
                                    <span className='flex items-center gap-2 text-slate-100'>
                                        <User size={16} className='text-slate-400'/>
                                        {c.getNomeCompleto?.()}
                                    </span>
                                    <span className="text-xs text-slate-400 flex items-center gap-1">
                                         <Hash size={14}/>{c.idCli} <span className='mx-1'>|</span> <ScanSearch size={14}/> {c.numeroDocumento}
                                    </span>
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {/* Seção do Histórico */}
                {clienteSelecionado && (
                    <section className="mt-8 bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                        {/* Exibe o erro do histórico aqui se ocorrer */}
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <MdErrorOutline className="inline mr-2" />
                                Erro ao carregar histórico: {error}
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                    <span className="text-xl" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        )}

                        {/* Nome do Cliente Selecionado */}
                        <h2 className="flex items-center text-xl md:text-2xl font-semibold mb-5 text-sky-300 border-b border-slate-700 pb-3 gap-2">
                            <UserCheck size={24} /> Histórico de: <span className="text-white">{clienteSelecionado.getNomeCompleto?.()}</span> <span className="text-sm text-slate-400">(ID: {clienteSelecionado.idCli})</span>
                        </h2>

                        {/* Loading do Histórico */}
                        {isLoadingHistorico ? (
                            <div className='flex justify-center items-center py-10'>
                                <Loader2 className="h-8 w-8 animate-spin text-sky-400" />
                                <span className='ml-3 text-sky-300'>Carregando histórico...</span>
                            </div>
                        ) : (
                            <>
                                {/* Mensagem ou Grid de Cards */}
                                {historico.length === 0 && !error ? (
                                    <p className="text-center text-slate-400 py-6 flex items-center justify-center gap-2">
                                        <ListX size={20}/> Nenhum histórico de agendamento encontrado para este cliente.
                                    </p>
                                ) : (
                                    // Grid de Cards para Histórico
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-[60vh] overflow-y-auto pr-2 pb-2">
                                        {historico.map((item, idx) => (
                                            <div key={idx} className="bg-slate-800 rounded-lg shadow-md border border-slate-700 flex flex-col overflow-hidden hover:border-sky-600 transition-colors duration-200">
                                                {/* Header Card Histórico */}
                                                <div className="bg-slate-700/50 p-3 flex justify-between items-center text-xs border-b border-slate-600">
                                                    <span className="flex items-center gap-1 font-semibold text-sky-300">
                                                        <CalendarDays size={14} /> {item.dataAgendamento}
                                                    </span>
                                                    <span className="flex items-center gap-1 text-slate-400 font-mono bg-slate-600 px-1.5 py-0.5 rounded">
                                                        <Car size={14} /> {item.veiculoPlaca}
                                                    </span>
                                                </div>
                                                {/* Corpo Card Histórico */}
                                                <div className="p-3 flex-grow">
                                                    <h4 className="flex items-center text-sm font-semibold mb-1 text-slate-200 gap-1">
                                                        <ClipboardList size={16} className="text-amber-400 flex-shrink-0"/> Observação
                                                    </h4>
                                                    <p className="text-xs text-slate-300 break-words">
                                                        {item.observacao}
                                                    </p>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </>
                        )}
                    </section>
                )}

                {/* Mensagem inicial */}
                {!clienteSelecionado && !isBuscandoCliente && !error && clientesEncontrados.length === 0 && (
                    <div className="text-center text-slate-400 mt-10 bg-slate-800/50 p-6 rounded-lg max-w-md mx-auto border border-slate-700">
                        <Search size={40} className="mx-auto mb-4 text-sky-500" />
                        <p>
                            Utilize a busca acima para encontrar um cliente e visualizar seu histórico de agendamentos.
                        </p>
                    </div>
                )}
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\relatorio\listar\page.tsx   |   componente RelatorioAgendamentosFuturosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/relatorio/agendamentos-futuros/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link'; // Link pode não ser necessário aqui, a menos que link para detalhes
import NavBar from '@/components/nav-bar';

// --- Interfaces (podem ser as mesmas da listagem) ---
interface AgendamentoParaLista { id: number; dataAgendamento: string; observacao: string; }
interface PaginatedAgendaResponse { content: AgendamentoApiResponseDto[]; totalPages: number; totalElements: number; number: number; size: number; }
interface AgendamentoApiResponseDto { id: number; dataAgendamento: string; observacao: string | null; }
// ----------------------------------------------------

export default function RelatorioAgendamentosFuturosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(15); // Pode aumentar o tamanho para relatórios

    // --- Função para buscar agendamentos futuros paginados ---
    const fetchAgendamentosFuturos = async (page = 0) => {
        setIsLoading(true);
        setError(null);

        const today = new Date().toISOString().split('T')[0]; // Pega data de hoje no formato AAAA-MM-DD

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'dataAgendamento,asc', // Ordenar por data ascendente
            dataInicio: today // <<< FILTRO PRINCIPAL DESTE RELATÓRIO
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.info("Buscando agendamentos futuros:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 400) {
                    const errorData = await response.json().catch(() => ({ message: "Requisição inválida (400)." }));
                    throw new Error(errorData.message || `Erro HTTP ${response.status}`);
                }
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }

            if (response.status === 204) { // No Content
                setAgendamentos([]); setTotalPages(0); setCurrentPage(0);
                console.info("Nenhum agendamento futuro encontrado.");
                return;
            }

            const data: PaginatedAgendaResponse = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                observacao: dto.observacao || '',
            }));

            setAgendamentos(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);

        } catch (err: any) {
            setError(err.message || "Falha ao carregar relatório de agendamentos futuros.");
            setAgendamentos([]); setTotalPages(0);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchAgendamentosFuturos(currentPage);
    }, [currentPage, pageSize]);

    // Funções de Paginação
    const handlePreviousPage = () => { if (currentPage > 0) { fetchAgendamentosFuturos(currentPage - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { fetchAgendamentosFuturos(currentPage + 1); } };

    return (
        <>
            <NavBar active="relatorio"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Relatório: Agendamentos Futuros</h1>

                {/* Mensagens */}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {/* Tabela de Agendamentos */}
                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando relatório...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Agendada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                {/* Adicionar colunas de Cliente/Veículo se implementar no backend */}
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {agendamentos.length === 0 ? (
                                <tr><td colSpan={3} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento futuro encontrado.</td></tr> // Ajustar colSpan se adicionar colunas
                            ) : (
                                agendamentos.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-lg truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        {/* Adicionar tds de Cliente/Veículo aqui */}
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Controles de Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        {/* ... botões de paginação ... */}
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Anterior
                        </button>
                        <span className="text-slate-300">
                             Página {currentPage + 1} de {totalPages}
                         </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Próxima
                        </button>
                    </div>
                )}
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\relatorio\page.tsx   |   componente RelatoriosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/relatorio/page.tsx
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho se necessário

export default function RelatoriosPage() {
    return (
        <>
            <NavBar active="relatorio"/> {/* Marca "Relatório" como ativo aqui */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-8 text-center">Central de Relatórios</h1>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {/* Card para Agendamentos Futuros */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Agendamentos Futuros</h2>
                        <p className="text-slate-300 mb-4">Visualize os próximos agendamentos registrados.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/agendamentos-futuros">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Contagem Mensal (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Contagem Mensal</h2>
                        <p className="text-slate-300 mb-4">Veja a quantidade de agendamentos por mês.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/contagem-mensal">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Histórico por Cliente (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Histórico por Cliente</h2>
                        <p className="text-slate-300 mb-4">Consulte o histórico de agendamentos de um cliente.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/historico-cliente">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Serviços Agendados (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Serviços Agendados</h2>
                        <p className="text-slate-300 mb-4">Detalhes dos serviços e diagnósticos agendados.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/servicos-agendados">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Adicione mais cards para outros relatórios aqui */}

                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\relatorio\servicos-agendados\page.tsx   |   componente RelatorioServicosAgendadosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// app/relatorio/servicos-agendados/page.tsx
"use client";

import { useState, useEffect } from 'react';
import NavBar from '@/components/nav-bar';

// --- Imports para Gráfico ---
import { Bar } from 'react-chartjs-2';
import {
    Chart as ChartJS, CategoryScale, LinearScale, BarElement,
    Title as ChartTitle, Tooltip, Legend
} from 'chart.js';

// --- Ícones Lucide ---
import {
    CalendarDays, Hash, AlertTriangle, Stethoscope, Car, ListX, BarChart3, ListChecks,
    ChevronLeft, ChevronRight, Loader2
} from 'lucide-react';
import { MdErrorOutline } from 'react-icons/md'; // Para erro

// --- Registrar componentes Chart.js ---
ChartJS.register(CategoryScale, LinearScale, BarElement, ChartTitle, Tooltip, Legend);

// --- Interfaces ---
interface ServicoAgendado {
    agendaId: number;
    dataAgendamento: string; // Formatada
    veiculoPlaca: string | null;
    descricaoProblema: string | null;
    diagnostico: string | null;
}
interface PaginatedServicosResponse {
    content: ServicoAgendadoDto[];
    totalPages: number;
    number: number;
    size: number;
}
interface ServicoAgendadoDto {
    agendaId: number;
    dataAgendamento: string; // Formato sadde-MM-DD
    veiculoPlaca: string | null;
    descricaoProblema: string | null;
    diagnostico: string | null;
}
// --- Interface para Contagem Mensal ---
interface ContagemMensalDto {
    mesAno: string; // Formato "YYYY-MM"
    quantidade: number;
}
// ----------------

// Helper para tratar erro fetch
const tratarErroFetch = (err: any): string => {
    if (err instanceof TypeError && err.message === 'Failed to fetch') {
        return "Não foi possível conectar ao servidor. Verifique a API e a rede.";
    }
    if (err.message && (err.message.startsWith("Erro HTTP") || err.message.includes("inválido") || err.message.includes("Endpoint"))) {
        return err.message;
    }
    return err.message || "Ocorreu um erro desconhecido.";
};

// Helper para formatar data
const formatarData = (dataString: string | null | undefined): string => {
    if (!dataString) return '-';
    try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
    catch (e) { console.error("Erro formatar data:", dataString, e); return 'Inválida'; }
};


export default function RelatorioServicosAgendadosPage() {
    // --- Estados para Serviços Agendados ---
    const [servicos, setServicos] = useState<ServicoAgendado[]>([]);
    const [isLoadingServicos, setIsLoadingServicos] = useState(true);
    const [errorServicos, setErrorServicos] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(12); // Pode ajustar para layout de cards

    // --- Estados para Contagem Mensal / Gráfico ---
    const [dadosContagem, setDadosContagem] = useState<ContagemMensalDto[]>([]);
    const [isLoadingContagem, setIsLoadingContagem] = useState(true);
    const [errorContagem, setErrorContagem] = useState<string | null>(null);

    // --- Fetch Serviços Agendados ---
    const fetchServicos = async (page = 0) => {
        setIsLoadingServicos(true);
        setErrorServicos(null);
        const today = new Date().toISOString().split('T')[0];
        const params = new URLSearchParams({
            page: page.toString(), size: pageSize.toString(),
            sort: 'dataAgendamento,asc', dataInicio: today
        });
        const apiUrl = `http://localhost:8080/rest/relatorios/servicos-agendados?${params.toString()}`;
        console.info("[Serviços] Buscando:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) { /* ... tratamento de erro ... */ throw new Error(`Erro HTTP ${response.status}`); }
            if (response.status === 204) { setServicos([]); setTotalPages(0); setCurrentPage(page); return; }

            const data: PaginatedServicosResponse = await response.json();
            const formatados: ServicoAgendado[] = data.content.map(dto => ({
                agendaId: dto.agendaId,
                dataAgendamento: formatarData(dto.dataAgendamento),
                veiculoPlaca: dto.veiculoPlaca || '-',
                descricaoProblema: dto.descricaoProblema || '-',
                diagnostico: dto.diagnostico || 'Pendente'
            }));
            setServicos(formatados); setTotalPages(data.totalPages); setCurrentPage(data.number);
        } catch (err: any) {
            setErrorServicos(tratarErroFetch(err));
            setServicos([]); setTotalPages(0);
        } finally {
            setIsLoadingServicos(false);
        }
    };

    // --- Fetch Contagem Mensal ---
    const fetchContagemMensal = async () => {
        setIsLoadingContagem(true);
        setErrorContagem(null);
        const apiUrl = "http://localhost:8080/rest/relatorios/contagem-agendamentos-mensal";
        console.info("[Contagem] Buscando:", apiUrl);
        try {
            const resp = await fetch(apiUrl);
            if (!resp.ok) { /* ... tratamento de erro ... */ throw new Error(`Erro HTTP ${resp.status}`); }
            if (resp.status === 204) { setDadosContagem([]); return; }
            const data: ContagemMensalDto[] = await resp.json();
            data.sort((a, b) => a.mesAno.localeCompare(b.mesAno)); // Ordena para o gráfico
            setDadosContagem(data);
        } catch (err: any) {
            setErrorContagem(tratarErroFetch(err));
            setDadosContagem([]);
        } finally {
            setIsLoadingContagem(false);
        }
    };

    // --- useEffect para buscar ambos os dados ---
    useEffect(() => {
        fetchServicos(currentPage);
        fetchContagemMensal();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [currentPage, pageSize]); // Roda quando a página ou tamanho mudar


    // --- Configuração do Gráfico ---
    const labels = dadosContagem.map(d => d.mesAno);
    const valores = dadosContagem.map(d => d.quantidade);
    const backgroundColors = [ // Lista de cores (igual ao contagem-mensal)
        'rgba(54, 162, 235, 0.7)', 'rgba(75, 192, 192, 0.7)',
        'rgba(255, 206, 86, 0.7)', 'rgba(153, 102, 255, 0.7)',
        'rgba(255, 159, 64, 0.7)', 'rgba(255, 99, 132, 0.7)',
        'rgba(100, 116, 139, 0.7)', 'rgba(239, 68, 68, 0.7)',
        'rgba(59, 130, 246, 0.7)',  'rgba(16, 185, 129, 0.7)',
        'rgba(245, 158, 11, 0.7)',  'rgba(139, 92, 246, 0.7)'
    ];
    const borderColors = backgroundColors.map(color => color.replace(/0\.7/, '1'));
    const chartData = {
        labels,
        datasets: [{
            label: 'Nº de Agendamentos (Total Mensal)', // Label mais específico
            data: valores,
            backgroundColor: valores.map((_, i) => backgroundColors[i % backgroundColors.length]), // Cores cíclicas
            borderColor: valores.map((_, i) => borderColors[i % borderColors.length]),
            borderWidth: 1
        }]
    };
    const chartOptions = { // Opções (igual ao contagem-mensal)
        responsive: true, maintainAspectRatio: false,
        plugins: { legend: { display: false }, title: { display: true, text: 'Volume Total de Agendamentos por Mês', color: '#e2e8f0', font: { size: 16 } } },
        scales: { x: { ticks: { color: '#94a3b8' }, grid: { display: false } }, y: { beginAtZero: true, ticks: { color: '#94a3b8', stepSize: Math.max(1, Math.ceil(Math.max(...valores, 1) / 6)) }, grid: { color: 'rgba(100, 116, 139, 0.2)' } } }
    };
    // ----------------------------

    // --- Funções de Paginação ---
    const handlePreviousPage = () => { if (currentPage > 0) { setCurrentPage(prev => prev - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { setCurrentPage(prev => prev + 1); } };
    // -------------------------

    return (
        <>
            <NavBar active="relatorio-servicos-agendados"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título Principal */}
                <h1 className="text-2xl md:text-3xl font-bold mb-8 text-center flex justify-center items-center gap-2">
                    <Stethoscope className="h-8 w-8 text-sky-400" />
                    Relatório: Serviços Agendados (A partir de hoje)
                </h1>

                {/* <<< Seção do Gráfico Mensal ADICIONADA >>> */}
                <section className="mb-8 bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                    <h2 className="flex items-center text-xl font-semibold mb-4 text-sky-400 border-b border-slate-700 pb-2 gap-2">
                        <BarChart3 size={24}/> Volume Total de Agendamentos (Mensal)
                    </h2>
                    {errorContagem && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                            <MdErrorOutline className="inline mr-2" />
                            Erro ao carregar dados do gráfico: {errorContagem}
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setErrorContagem(null)} aria-label="Fechar">
                                <span className="text-xl" aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    )}
                    {isLoadingContagem ? (
                        <div className='flex justify-center items-center py-10'>
                            <Loader2 className="h-6 w-6 animate-spin text-sky-400" />
                            <span className='ml-3 text-sky-300'>Carregando gráfico...</span>
                        </div>
                    ) : (
                        <div className="relative h-64 md:h-72"> {/* Altura ajustada */}
                            {dadosContagem.length > 0 ? (
                                <Bar options={chartOptions} data={chartData} />
                            ) : (
                                <p className="text-center text-slate-400 flex items-center justify-center h-full">
                                    Nenhum dado de contagem mensal disponível para o gráfico.
                                </p>
                            )}
                        </div>
                    )}
                </section>
                {/* <<< Fim da Seção do Gráfico >>> */}

                {/* Seção Lista de Serviços Agendados */}
                <section className="bg-slate-900 p-4 md:p-6 rounded-lg shadow-lg border border-slate-700">
                    <h2 className="flex items-center text-xl font-semibold mb-4 text-sky-400 border-b border-slate-700 pb-2 gap-2">
                        <ListChecks size={24}/> Detalhes dos Serviços Agendados (A partir de hoje)
                    </h2>

                    {/* Erro específico dos serviços */}
                    {errorServicos && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                            <MdErrorOutline className="inline mr-2" />
                            Erro ao carregar lista de serviços: {errorServicos}
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setErrorServicos(null)} aria-label="Fechar">
                                <span className="text-xl" aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    )}

                    {/* Loading específico dos serviços */}
                    {isLoadingServicos ? (
                        <div className='flex justify-center items-center py-10'>
                            <Loader2 className="h-8 w-8 animate-spin text-sky-400" />
                            <span className='ml-3 text-sky-300'>Carregando serviços...</span>
                        </div>
                    ) : (
                        <>
                            {servicos.length === 0 && !errorServicos ? (
                                <p className="text-center text-slate-400 py-10 flex items-center justify-center gap-2">
                                    <ListX size={20}/> Nenhum serviço agendado encontrado a partir de hoje.
                                </p>
                            ) : (
                                // Grid de Cards para Serviços
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    {servicos.map((s) => (
                                        <div key={s.agendaId} className="bg-slate-800 rounded-lg shadow border border-slate-600 flex flex-col hover:border-sky-500 transition-colors duration-200">
                                            {/* Header */}
                                            <div className="p-3 flex justify-between items-center text-xs border-b border-slate-700 bg-slate-700/30 rounded-t-lg">
                                                <span className="flex items-center gap-1 font-semibold text-sky-300">
                                                    <Hash size={14} /> Agenda ID: {s.agendaId}
                                                </span>
                                                <span className="flex items-center gap-1 text-slate-400">
                                                    <CalendarDays size={14} /> {s.dataAgendamento}
                                                </span>
                                            </div>
                                            {/* Corpo */}
                                            <div className="p-3 space-y-2 text-sm flex-grow">
                                                <p className="flex items-center gap-1">
                                                    <Car size={16} className="text-slate-400 flex-shrink-0" />
                                                    <strong>Veículo:</strong>
                                                    <span className="ml-1 font-mono bg-slate-700 px-1.5 py-0.5 rounded text-xs">{s.veiculoPlaca}</span>
                                                </p>
                                                <div className="pt-1">
                                                    <p className="flex items-start gap-1 font-medium text-slate-300 mb-0.5">
                                                        <AlertTriangle size={16} className="text-amber-400 flex-shrink-0 mt-0.5" />
                                                        Problema Descrito:
                                                    </p>
                                                    <p className="text-xs text-slate-400 pl-5 break-words">{s.descricaoProblema}</p>
                                                </div>
                                                <div className="pt-1">
                                                    <p className="flex items-start gap-1 font-medium text-slate-300 mb-0.5">
                                                        <Stethoscope size={16} className="text-teal-400 flex-shrink-0 mt-0.5" />
                                                        Diagnóstico Preliminar:
                                                    </p>
                                                    <p className="text-xs text-slate-400 pl-5 break-words">{s.diagnostico}</p>
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}

                            {/* Controles de Paginação */}
                            {!isLoadingServicos && totalPages > 1 && (
                                <div className="flex justify-center items-center mt-6 pt-6 border-t border-slate-700 gap-3">
                                    <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                                        <ChevronLeft size={18}/> Anterior
                                    </button>
                                    <span className="text-slate-300 text-sm"> Página {currentPage + 1} de {totalPages} </span>
                                    <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                                        Próxima <ChevronRight size={18}/>
                                    </button>
                                </div>
                            )}
                        </>
                    )}
                </section> {/* Fim da Seção Lista de Serviços */}
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\alterar\[id]\page.tsx   |   componente AlterarVeiculoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/veiculo/alterar/[id]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o path

// Defina ou importe as interfaces aqui
interface VeiculoResponse { id: number; tipoVeiculo: string; renavam: string; placa: string; modelo: string; proprietario: string; montadora: string; cor: string; motor: string; anoFabricacao: string; }
interface VeiculoFormData { tipoVeiculo: string; renavam: string; placa: string; modelo: string; proprietario: string; montadora: string; cor: string; motor: string; anoFabricacao: string; }

// --- LISTA EXPANDIDA DE MONTADORAS (IDÊNTICA AO CADASTRO) ---
const montadoras = [
    "Agrale", "Aston Martin", "Audi", "Bentley", "BMW", "BYD",
    "CAOA Chery", "Chery", "Chevrolet", "Chrysler", "Citroën",
    "Dodge", "Effa", "Ferrari", "Fiat", "Ford",
    "GMC", "GWM", "Hafei", "Honda", "Hyundai",
    "Iveco", "Jac", "Jaguar", "Jeep", "Jinbei",
    "Kia", "Lamborghini", "Land Rover", "Lexus", "Lifan",
    "Maserati", "Mercedes-AMG", "Mercedes-Benz", "Mini", "Mitsubishi",
    "Nissan", "Peugeot", "Porsche",
    "RAM", "Renault", "Rolls-Royce",
    "Shineray", "SsangYong", "Subaru", "Suzuki",
    "Toyota", "Troller",
    "Volkswagen", "Volvo",
    "Outra"
].sort();
// -------------------------------------------------------------

// Opções de exemplo para outros selects (IDÊNTICO AO CADASTRO)
const tiposVeiculo = ["Carro", "Moto", "Caminhão", "Ônibus", "Utilitário", "Outro"];
const cores = ["Preto", "Branco", "Prata", "Cinza", "Vermelho", "Azul", "Verde", "Amarelo", "Marrom", "Bege", "Dourado", "Laranja", "Roxo", "Vinho", "Outra"];

export default function AlterarVeiculoPage() {
    const router = useRouter();
    const params = useParams();
    const id = params.id as string;

    const [formData, setFormData] = useState<VeiculoFormData>({
        tipoVeiculo: '', renavam: '', placa: '', modelo: '', proprietario: '',
        montadora: '', cor: '', motor: '', anoFabricacao: '',
    });
    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [originalData, setOriginalData] = useState<VeiculoResponse | null>(null);

    // Busca dados do veículo (sem alterações na lógica)
    useEffect(() => {
        if (!id) { setError("ID do veículo não fornecido."); setIsFetching(false); return; }
        const fetchVeiculo = async () => {
            setIsFetching(true); setError(null);
            const apiUrl = `http://localhost:8080/rest/veiculo/${id}`;
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) { throw new Error(`Erro ao buscar veículo ${id}: ${response.status}`); }
                const data: VeiculoResponse = await response.json();
                setOriginalData(data);
                setFormData({
                    tipoVeiculo: data.tipoVeiculo || '', renavam: data.renavam || '',
                    placa: data.placa || '', modelo: data.modelo || '',
                    proprietario: data.proprietario || '', montadora: data.montadora || '',
                    cor: data.cor || '', motor: data.motor || '',
                    anoFabricacao: data.anoFabricacao || '',
                });
            } catch (err: any) { setError(err.message || "Falha ao carregar dados."); }
            finally { setIsFetching(false); }
        };
        fetchVeiculo();
    }, [id]);

    // Handler genérico (sem alterações)
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    // Submete a atualização (sem alterações na lógica)
    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault(); setIsLoading(true); setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/${id}`;
        try {
            const response = await fetch(apiUrl, {
                method: 'PUT', headers: { 'Content-Type': 'application/json', },
                body: JSON.stringify(formData),
            });
            if (!response.ok) { throw new Error(`Erro ao atualizar veículo ${id}: ${response.status}`); }
            router.push('/veiculo/listar');
        } catch (err: any) { setError(err.message || "Falha ao atualizar."); }
        finally { setIsLoading(false); }
    };

    // Renderização condicional (sem alterações)
    if (isFetching) { /* ... JSX de carregando ... */
        return (
            <>
                <NavBar active="veiculo" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-sky-300">Carregando dados do veículo...</p>
                </main>
            </>
        );
    }
    if (error && !isFetching && !originalData) { /* ... JSX de erro ao carregar ... */
        return (
            <>
                <NavBar active="veiculo" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-2xl mx-auto text-center">
                        <h1 className="text-xl font-bold mb-4 text-red-400">Erro ao Carregar Veículo</h1>
                        <p className="mb-4 text-red-300">{error}</p>
                        <Link href="/veiculo/listar">
                            <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow">Voltar para Lista</button>
                        </Link>
                    </div>
                </main>
            </>
        );
    }

    // Renderização do formulário (com a lista de montadoras atualizada)
    return (
        <>
            <NavBar active="veiculo-alterar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-4xl mx-auto">
                    <h1 className="text-2xl md:text-3xl font-bold mb-8 text-center">Alterar Veículo (ID: {id})</h1>
                    {error && ( /* Erro do submit */
                        <div className="mb-4 text-red-400 bg-red-900/50 p-3 rounded border border-red-500 text-sm">{error}</div>
                    )}
                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* --- Seção: Detalhes do Veículo --- */}
                        <section>
                            <h2 className="text-xl font-semibold text-sky-300 mb-4 border-b border-slate-700 pb-2">Detalhes do Veículo</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                                <div>
                                    <label htmlFor="tipoVeiculo" className="block text-sm font-medium text-slate-300 mb-1">Tipo Veículo</label>
                                    <select id="tipoVeiculo" name="tipoVeiculo" value={formData.tipoVeiculo} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione o tipo</option>
                                        {tiposVeiculo.map(tipo => (<option key={tipo} value={tipo}>{tipo}</option>))}
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="modelo" className="block text-sm font-medium text-slate-300 mb-1">Modelo</label>
                                    <input type="text" id="modelo" name="modelo" value={formData.modelo} onChange={handleChange} required maxLength={100} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                {/* --- SELECT MONTADORA ATUALIZADO --- */}
                                <div>
                                    <label htmlFor="montadora" className="block text-sm font-medium text-slate-300 mb-1">Montadora</label>
                                    <select id="montadora" name="montadora" value={formData.montadora} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione a montadora</option>
                                        {montadoras.map(m => (<option key={m} value={m}>{m}</option>))}
                                    </select>
                                </div>
                                {/* ----------------------------------- */}
                                <div>
                                    <label htmlFor="anoFabricacao" className="block text-sm font-medium text-slate-300 mb-1">Ano Fabricação</label>
                                    <input type="date" id="anoFabricacao" name="anoFabricacao" value={formData.anoFabricacao} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div>
                                    <label htmlFor="cor" className="block text-sm font-medium text-slate-300 mb-1">Cor</label>
                                    <select id="cor" name="cor" value={formData.cor} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione a cor</option>
                                        {cores.map(c => (<option key={c} value={c}>{c}</option>))}
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="motor" className="block text-sm font-medium text-slate-300 mb-1">Motor</label>
                                    <input type="text" id="motor" name="motor" value={formData.motor} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                            </div>
                        </section>

                        {/* --- Seção: Identificação --- */}
                        <section>
                            <h2 className="text-xl font-semibold text-sky-300 mb-4 border-b border-slate-700 pb-2">Identificação</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                                <div>
                                    <label htmlFor="placa" className="block text-sm font-medium text-slate-300 mb-1">Placa</label>
                                    <input type="text" id="placa" name="placa" placeholder="AAA1234 ou ABC1D23" value={formData.placa} onChange={handleChange} required maxLength={7} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div>
                                    <label htmlFor="renavam" className="block text-sm font-medium text-slate-300 mb-1">Renavam</label>
                                    <input type="text" id="renavam" name="renavam" placeholder="Apenas números" value={formData.renavam} onChange={handleChange} required maxLength={13} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div className="md:col-span-2">
                                    <label htmlFor="proprietario" className="block text-sm font-medium text-slate-300 mb-1">Proprietário</label>
                                    <input type="text" id="proprietario" name="proprietario" value={formData.proprietario} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                            </div>
                        </section>

                        {/* Botões */}
                        <div className="flex justify-end gap-4 pt-6">
                            <Link href="/veiculo/listar"><button type="button" className="px-5 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow">Cancelar</button></Link>
                            <button type="submit" disabled={isLoading || isFetching} className={`px-5 py-2 font-semibold rounded-md shadow ${isLoading || isFetching ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}>{isLoading ? 'Atualizando...' : 'Atualizar Veículo'}</button>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
} // <<< FIM DO ARQUIVO

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\buscar\page.tsx   |   componente BuscarVeiculoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: src/app/veiculo/buscar/page.tsx (Refatorado com Cards e Novos Filtros) ---
'use client';

import React, { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar'; // Ajuste o path se necessário
// Importando Ícones (Adicionado Filter)
import { Car, Hash, Palette, Calendar, User, Building, Settings, Info, Search, Edit3, Trash2, ListChecks, ScanLine as ScanLicense, Filter } from 'lucide-react';
import { MdBadge, MdErrorOutline } from 'react-icons/md';

// --- Interfaces ---
interface VeiculoResponse {
    id: number;
    tipoVeiculo: string;
    renavam: string;
    placa: string;
    modelo: string;
    proprietario: string;
    montadora: string;
    cor: string;
    motor: string;
    anoFabricacao: string;
}

// <<< Tipo de busca ATUALIZADO >>>
type SearchField = 'placa' | 'proprietario' | 'renavam';

export default function BuscarVeiculoPage() {
    const router = useRouter();
    const [searchField, setSearchField] = useState<SearchField>('placa'); // Inicia com 'placa'
    const [searchValue, setSearchValue] = useState('');

    const [todosVeiculos, setTodosVeiculos] = useState<VeiculoResponse[]>([]); // Nome corrigido
    const [resultadosBusca, setResultadosBusca] = useState<VeiculoResponse[]>([]);
    const [isLoading, setIsLoading] = useState(false); // Loading inicial
    const [isSearching, setIsSearching] = useState(false); // Loading da busca/filtro
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);

    // --- Fetch inicial de todos os veículos ---
    const fetchTodasVeiculos = async () => {
        if (todosVeiculos.length > 0 && !isLoading) return;
        setIsLoading(true); setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/all`;
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) { let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`; try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {} throw new Error(errorMsg); }
            if (response.status === 204) { setTodosVeiculos([]); }
            else { const data: VeiculoResponse[] = await response.json(); setTodosVeiculos(data || []); }
            console.log(`Carregados ${todosVeiculos.length} veículos para busca local.`);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados base de veículos."); console.error("Erro:", err); setTodosVeiculos([]);
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchTodasVeiculos(); }, []);

    // Handlers do formulário
    const handleFieldChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setSearchField(e.target.value as SearchField);
        setSearchValue(''); setError(null); setResultadosBusca([]); setHasSearched(false);
    };
    const handleValueChange = (e: React.ChangeEvent<HTMLInputElement>) => { setSearchValue(e.target.value); };

    // --- Lógica de busca (CLIENT-SIDE FILTERING ATUALIZADA) ---
    const handleSearch = (event?: FormEvent<HTMLFormElement>) => {
        if (event) event.preventDefault();
        setIsSearching(true); setHasSearched(true); setError(null); setResultadosBusca([]);

        if (todosVeiculos.length === 0 && !isLoading) {
            fetchTodasVeiculos().then(() => performSearch());
            return;
        }
        performSearch();
    };

    const performSearch = () => {
        const query = searchValue.trim().toLowerCase();
        console.log(`Filtrando ${todosVeiculos.length} veículos por ${searchField} contendo '${query}'`);

        if (!query) { // Se a busca for vazia, mostra nada
            setResultadosBusca([]); setIsSearching(false); return;
        }

        let resultados: VeiculoResponse[] = [];
        switch (searchField) {
            case 'placa':
                // Busca case-insensitive e remove caracteres não alfanuméricos da placa para comparação flexível
                const placaQuery = query.replace(/[^a-z0-9]/gi, '');
                resultados = todosVeiculos.filter(v => v.placa?.replace(/[^a-z0-9]/gi, '').toLowerCase().includes(placaQuery));
                break;
            case 'proprietario':
                resultados = todosVeiculos.filter(v => v.proprietario?.toLowerCase().includes(query));
                break;
            // <<< REMOVIDO CASO 'modelo' >>>
            case 'renavam': // <<< ADICIONADO CASO 'renavam' >>>
                // Busca case-insensitive e remove caracteres não numéricos do renavam
                const renavamQuery = query.replace(/\D/g, '');
                resultados = todosVeiculos.filter(v => v.renavam?.replace(/\D/g, '').includes(renavamQuery));
                break;
            default:
                resultados = [];
        }
        console.log(`Encontrados ${resultados.length} resultados.`);
        setResultadosBusca(resultados);
        setIsSearching(false);
    };
    // --- Fim da Lógica de Busca ---

    // Navegação para delete (simulada)
    const navigateToDelete = (id: number) => {
        if (window.confirm(`Tem certeza que deseja excluir o veículo ID: ${id}?`)) {
            alert(`Exclusão do veículo ${id} não implementada neste exemplo.`);
            // Implementar delete real aqui (API call + remover das listas 'todosVeiculos' e 'resultadosBusca')
        }
    };

    // Helper para formatar data
    const formatarData = (dataString: string | null | undefined): string => {
        if (!dataString) return '-';
        try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { return 'Inválida'; }
    };

    // Placeholder dinâmico ATUALIZADO
    const getPlaceholder = (): string => {
        switch (searchField) {
            case 'placa': return 'Digite parte da placa...';
            case 'proprietario': return 'Digite parte do nome...';
            case 'renavam': return 'Digite parte do renavam...'; // Placeholder para Renavam
            default: return 'Digite o termo...';
        }
    }

    return (
        <>
            <NavBar active="veiculo-buscar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-8 gap-2"> <Search size={28} className="text-sky-400"/> Buscar Veículos </h1>

                {/* Formulário de Busca ATUALIZADO */}
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-4xl mx-auto mb-8">
                    <form onSubmit={handleSearch}>
                        <div className="flex flex-wrap items-end gap-4">
                            {/* Select Tipo de Busca ATUALIZADO */}
                            <div className="flex-shrink-0 w-full sm:w-auto">
                                <label htmlFor="searchField" className="flex items-center gap-1 block text-sm font-medium text-slate-300 mb-1"><Filter size={16}/>Buscar por:</label>
                                <select
                                    id="searchField" name="searchField" value={searchField}
                                    onChange={handleFieldChange}
                                    className="w-full sm:w-48 h-10 px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
                                >
                                    <option value="placa">Placa</option>
                                    <option value="proprietario">Proprietário</option>
                                    <option value="renavam">Renavam</option> {/* Removido Modelo, Adicionado Renavam */}
                                </select>
                            </div>
                            {/* Input Termo de Busca */}
                            <div className="flex-grow min-w-[200px]">
                                <label htmlFor="searchValue" className="block text-sm font-medium text-slate-300 mb-1">Termo:</label>
                                <input
                                    type="text" id="searchValue" name="searchValue"
                                    value={searchValue} onChange={handleValueChange}
                                    required={searchField === 'placa' || searchField === 'renavam'} // Placa e Renavam podem requerer valor
                                    placeholder={getPlaceholder()}
                                    className="w-full h-10 px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
                                />
                            </div>
                            {/* Botão Buscar */}
                            <div className="flex-shrink-0">
                                <button type="submit" disabled={isLoading || isSearching} className={`h-10 px-5 py-2 font-semibold rounded-md shadow flex items-center justify-center ${isLoading || isSearching ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}>
                                    <Search size={18} className="mr-2"/> {isSearching ? 'Buscando...' : 'Buscar'}
                                </button>
                            </div>
                        </div>
                        {error && ( <p className="mt-3 text-sm text-red-400 flex items-center gap-1"><MdErrorOutline/>{error}</p> )}
                    </form>
                </div>

                {/* Loading Inicial */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando dados base...</p>}

                {/* <<< Área de Resultados com Cards >>> */}
                {!isLoading && hasSearched && (
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold mb-4 text-center text-sky-300">Resultados da Busca</h2>
                        {isSearching ? (
                            <p className="text-center text-sky-300 py-10">Filtrando...</p>
                        ) : resultadosBusca.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum veículo encontrado para os critérios informados.</p>
                        ) : (
                            // Grid Layout para os Cards (Multi-coluna)
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {resultadosBusca.map((veiculo) => { // Mapeia sobre resultadosBusca
                                    const isIdValid = veiculo.id !== null && veiculo.id !== undefined;
                                    return (
                                        // Card Individual (Estrutura idêntica à da ListarVeiculosPage)
                                        <div key={isIdValid ? veiculo.id : `invalid-${Math.random()}`} className={`bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300 ${!isIdValid ? 'opacity-50' : ''}`}>
                                            {/* Header do Card */}
                                            <div className="bg-slate-700 p-3 flex justify-between items-center text-sm"> <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {isIdValid ? veiculo.id : 'Inválido'} </span> <span className="flex items-center gap-1 text-slate-400"> <Car size={16} /> {veiculo.tipoVeiculo || '-'} </span> </div>
                                            {/* Corpo do Card */}
                                            <div className="p-4 space-y-2 flex-grow text-sm">
                                                <p title={veiculo.placa}><strong><MdBadge className="inline -mt-1 mr-1"/> Placa:</strong> <span className="font-mono bg-slate-700 px-1 rounded">{veiculo.placa || '-'}</span></p>
                                                <p title={veiculo.modelo}><strong><Info size={16} className="inline -mt-1 mr-1"/> Modelo:</strong> {veiculo.modelo || '-'} ({veiculo.montadora || '-'})</p>
                                                <p><strong><Palette size={16} className="inline -mt-1 mr-1"/> Cor:</strong> {veiculo.cor || '-'}</p>
                                                <p><strong><Calendar size={16} className="inline -mt-1 mr-1"/> Ano:</strong> {formatarData(veiculo.anoFabricacao)}</p>
                                                <p><strong><Settings size={16} className="inline -mt-1 mr-1"/> Motor:</strong> {veiculo.motor || '-'}</p>
                                                <p><strong><Hash size={16} className="inline -mt-1 mr-1"/> Renavam:</strong> {veiculo.renavam || '-'}</p>
                                                <p title={veiculo.proprietario}><strong><User size={16} className="inline -mt-1 mr-1"/> Proprietário:</strong> {veiculo.proprietario || '-'}</p>
                                            </div>
                                            {/* Footer do Card (Ações) */}
                                            <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                                {isIdValid ? (
                                                    <>
                                                        <Link href={`/veiculo/alterar/${veiculo.id}`}> <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1"> <Edit3 size={14} /> Editar </button> </Link>
                                                        <button onClick={() => navigateToDelete(veiculo.id)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1"> <Trash2 size={14} /> Deletar </button>
                                                    </>
                                                ) : ( <span className="text-xs text-red-400 italic">ID Inválido</span> )}
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< Fim da Área de Resultados >>> */}

                {/* Botão Voltar para Lista Completa (Opcional) */}
                <div className="mt-8 text-center">
                    <Link href="/veiculo/listar"> <button className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow"> Voltar para Lista Completa </button> </Link>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\cadastrar\page.tsx   |   componente CadastrarVeiculoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/veiculo/cadastrar/page.tsx
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation'; // Importar useRouter
import Link from 'next/link'; // Importar Link
import NavBar from '@/components/nav-bar'; // <<< 1. IMPORTAR A NAVBAR
import {
    Car,
    Hash,
    ScanLine as ScanLicense,
    Palette,
    Calendar,
    User,
    Building,
    ListChecks,
    Settings,
    Info
} from 'lucide-react';

interface VeiculoFormData {
    tipoVeiculo: string;
    renavam: string;
    placa: string;
    modelo: string;
    proprietario: string;
    montadora: string;
    cor: string;
    motor: string;
    anoFabricacao: string;
}

const tiposVeiculo = [
    "Carro","Moto","Caminhão","Ônibus","Utilitário","Outro"
];

const cores = [
    "Preto","Branco","Prata","Cinza","Vermelho","Azul","Verde","Amarelo","Marrom","Bege","Dourado","Laranja","Roxo","Vinho","Outra"
];

const montadorasPorTipo: Record<string, string[]> = {
    Carro: [
        "Acura","Agrale","Alfa Romeo","Aston Martin","Audi","BAIC","Bentley","BMW","Bugatti","Buick","CAOA Chery","Cadillac",
        "Changan","Chery","Chevrolet","Chrysler","Citroën","Daihatsu","Dodge","DS Automobiles","Effa","Ferrari","Fiat","Ford",
        "Geely","Genesis","GMC","GWM","Hafei","Honda","Hyundai","Infiniti","Iveco","Jac","Jaguar","Jeep","Jinbei","Kia","Koenigsegg",
        "Lamborghini","Land Rover","Lexus","Lifan","Li Auto","Lincoln","Lucid","Lotus","Mahindra","Maserati","McLaren","Mazda","Mercedes-AMG",
        "Mercedes-Benz","Mini","Mitsubishi","NIO","Nissan","Oldsmobile","Opel","Peugeot","Polestar","Pontiac","Porsche","RAM","Renault",
        "Rivian","Rolls-Royce","Saab","Seat","Shineray","Skoda","SsangYong","Subaru","Suzuki","Tata","Tesla","Toyota","Troller","UAZ","Vauxhall",
        "Volkswagen","Volvo","XPeng","Yugo","MG","Outra"
    ].sort(),
    Moto: [
        "Aprilia","Bajaj","Benelli","Bimota","Cagiva","CFMoto","Ducati","Gas Gas","Harley-Davidson","Hero MotoCorp","Husqvarna","Indian Motorcycle",
        "Kawasaki","KTM","Kymco","Malaguti","Moto Guzzi","MV Agusta","Norton","Piaggio","Rieju","Royal Enfield","Sherco","SYM","TVS Motor Company",
        "Ural","Vespa","Yamaha","Outra"
    ].sort(),
    Caminhão: [
        "Agrale","Ashok Leyland","BharatBenz","BYD","DAF","Dongfeng","Eicher","FAW","Foton","Freightliner","Hino","International","Isuzu","Iveco",
        "KAMAZ","Kenworth","Mack Trucks","MAN","Mahindra","Mercedes-Benz Trucks","Mitsubishi Fuso","Navistar","Nikola","Peterbilt","Renault Trucks",
        "Scania","Shacman","Sinotruk","Sterling","Tata Motors","Tesla","Volvo Trucks","Western Star","Outra"
    ].sort(),
    Ônibus: [
        "Alexander Dennis","Blue Bird","Busscar","Caio","Comil","Federal Coach","Gillig","Irizar","Isuzu","Marcopolo","Mascarello","McCoy Miller",
        "Mercedes-Benz","MCI","Neoplan","Neobus","New Flyer","Nova Bus","Prevost","Scania","Setra","Thomas Built Buses","Van Hool","Volvo","Wrightbus",
        "Volkswagen","Outra"
    ].sort(),
    Utilitário: [
        "BYD","Chevrolet","Citroën","Daihatsu","Dongfeng","Fiat","Ford","Foton","GMC","GWM","Hyundai","Iveco","Isuzu","JAC Motors","Mahindra","Maxus",
        "Mercedes-Benz","Mitsubishi Fuso","Nissan","Opel","Peugeot","Renault","RAM","Toyota","UAZ","Vauxhall","Volkswagen","Volvo","Outra"
    ].sort(),
    Outro: ["Outra"]
};

const motoresPorTipo: Record<string, string[]> = {
    Carro: [
        "1.0 Aspirado","1.0 Turbo","1.0 TSI","1.2 Aspirado","1.2 16V Aspirado","1.2 Turbo","1.4 Aspirado","1.4 8V","1.4 16V","1.4 Turbo","1.5 Aspirado",
        "1.5 16V","1.5 Turbo","1.6 Aspirado","1.6 16V","1.6 Turbo","1.8 Aspirado","1.8 16V","1.8 Turbo","2.0 Aspirado","2.0 16V","2.0 Turbo","2.0 Bi-Turbo",
        "2.0 TFSI","2.0 TDI","2.0 HDi","2.0 Diesel","2.2 TDI","2.5 Turbo","3.0 Aspirado","3.0 V6","3.0 Turbo","3.0 Bi-Turbo","3.3 V6 Twin Turbo","4.0 V8",
        "4.2 V8","5.0 V8","5.0 V8 32V","5.5 V8","6.2 V8","V6","V8","W12","V12","Turbodiesel","Turbo Diesel","Aspirado Diesel","Gasolina","Álcool","Flex",
        "Flex 1.0","Flex 1.4","Flex 1.6","Flex 2.0","GNV","Elétrico","Híbrido","Plug-in Hybrid","Mild Hybrid","Micro Hybrid","Fuel Cell","Hidrogenio","Outro"
    ],
    Moto: [
        "50cc","80cc","100cc","125cc","150cc","160cc","200cc","250cc","300cc","350cc","400cc","450cc","500cc","600cc","650cc","700cc","750cc","800cc","900cc",
        "1000cc","1200cc","1300cc","1400cc","1500cc","Dois Tempos","Quatro Tempos","Elétrico","Híbrido","Single-Cylinder","Parallel Twin","V-Twin","Inline-Triple",
        "Inline-Four","Boxer","Rotary","Outro"
    ],
    Caminhão: [
        "Diesel 3.0L","Diesel 4.0L","Diesel 5.9L","Diesel 6.7L","Diesel 8.3L","Diesel 10.8L","Diesel 12.0L","Gasolina 5.0L","GNV","GNL","Híbrido","Elétrico","Turbo Diesel",
        "Injeção Direta","Common Rail","Euro V","Euro VI","Hidrogêncio","Outro"
    ],
    Ônibus: [
        "Diesel Traseiro","Diesel Dianteiro","Diesel Intercooler","Turbodiesel","Common Rail","Diesel Euro III","Diesel Euro V","Diesel Euro VI","GNV","Biometano","Biodiesel",
        "HVO Diesel","Elétrico","Híbrido","Fuel Cell","Trolleybus","Outro"
    ],
    Utilitário: [
        "1.3 Turbo","1.4","1.4 Turbo","1.6","1.6 Turbo","2.0","2.2","2.2 Turbo","2.8 Diesel","3.0 Diesel","Álcool","Biodiesel","Biometano","Common Rail","Diesel","Diesel Euro V",
        "Flex","Flex 1.0","Flex 1.4","Flex 1.5","Flex 1.6","Fuel Cell","GNV","Gasolina","Gasolina 1.0","Gasolina 1.3","Gasolina 1.4","Gasolina 1.5","Gasolina 1.6","Micro Hybrid",
        "Mild Hybrid","Plug-in Hybrid","Turbo Diesel","Turbo Diesel Intercooler","Elétrico","Híbrido","Outro"
    ],
    Outro: ["Outro"]
};

export default function CadastrarVeiculoPage() {
    const router = useRouter();
    const [formData, setFormData] = useState<VeiculoFormData>({
        tipoVeiculo: '',
        renavam: '',
        placa: '',
        modelo: '',
        proprietario: '',
        montadora: '',
        cor: '',
        motor: '',
        anoFabricacao: '',
    });
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        if (name === 'tipoVeiculo') {
            setFormData(prev => ({
                ...prev,
                tipoVeiculo: value,
                montadora: '',
                motor: '',
                modelo: ''
            }));
        } else {
            setFormData(prev => ({ ...prev, [name]: value }));
        }
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);
        try {
            const res = await fetch('http://localhost:8080/rest/veiculo', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
            });
            if (!res.ok) {
                const data = await res.json().catch(() => null);
                throw new Error(data?.message || `Erro HTTP ${res.status}`);
            }
            router.push('/veiculo/listar');
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    const listaMontadoras = formData.tipoVeiculo
        ? montadorasPorTipo[formData.tipoVeiculo] || []
        : [];
    const listaMotores = formData.tipoVeiculo
        ? motoresPorTipo[formData.tipoVeiculo] || []
        : [];

    return (
        <div className="min-h-screen bg-[#012A46] text-white flex flex-col">
            {/* Menu de navegação */}
            <NavBar active="veiculo-cadastrar" />

            <header className="bg-slate-800 py-4 px-6">
                <h1 className="text-xl font-bold flex items-center">
                    <Car className="mr-2 text-sky-400" /> Sistema de Veículos
                </h1>
            </header>

            <main className="container mx-auto px-4 py-8 flex-grow">
                <div className="bg-slate-900 p-6 rounded-lg shadow-lg max-w-4xl mx-auto">
                    <h1 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-8 gap-2">
                        <Car size={30} className="text-sky-400" /> Cadastrar Novo Veículo
                    </h1>
                    {error && (
                        <div className="mb-4 text-red-400 bg-red-900/50 p-3 rounded text-sm">
                            {error}
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* Detalhes do Veículo */}
                        <section>
                            <h2 className="flex items-center text-xl font-semibold text-sky-400 mb-4 border-b border-slate-700 pb-2 gap-2">
                                <ListChecks size={22} /> Detalhes do Veículo
                            </h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                                {/* Tipo de Veículo */}
                                <div>
                                    <label htmlFor="tipoVeiculo" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <Car size={16} /> Tipo de Veículo
                                    </label>
                                    <select
                                        id="tipoVeiculo"
                                        name="tipoVeiculo"
                                        value={formData.tipoVeiculo}
                                        onChange={handleChange}
                                        required
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 h-10"
                                    >
                                        <option value="" disabled>Selecione...</option>
                                        {tiposVeiculo.map(tv => (
                                            <option key={tv} value={tv}>{tv}</option>
                                        ))}
                                    </select>
                                </div>

                                {/* Montadora */}
                                <div>
                                    <label htmlFor="montadora" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <Building size={16} /> Montadora
                                    </label>
                                    <select
                                        id="montadora"
                                        name="montadora"
                                        value={formData.montadora}
                                        onChange={handleChange}
                                        required
                                        disabled={!formData.tipoVeiculo}
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 disabled:opacity-50 h-10"
                                    >
                                        <option value="" disabled>
                                            {formData.tipoVeiculo ? 'Selecione...' : 'Escolha o tipo'}
                                        </option>
                                        {listaMontadoras.map(m => (
                                            <option key={m} value={m}>{m}</option>
                                        ))}
                                    </select>
                                </div>

                                {/* Modelo */}
                                <div>
                                    <label htmlFor="modelo" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <Info size={16} /> Modelo
                                    </label>
                                    <input
                                        type="text"
                                        id="modelo"
                                        name="modelo"
                                        value={formData.modelo}
                                        onChange={handleChange}
                                        required
                                        maxLength={100}
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 h-10"
                                    />
                                </div>

                                {/* Ano de Fabricação */}
                                <div>
                                    <label htmlFor="anoFabricacao" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <Calendar size={16} /> Ano de Fabricação
                                    </label>
                                    <input
                                        type="date"
                                        id="anoFabricacao"
                                        name="anoFabricacao"
                                        value={formData.anoFabricacao}
                                        onChange={handleChange}
                                        required
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 h-10"
                                    />
                                </div>

                                {/* Cor */}
                                <div>
                                    <label htmlFor="cor" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <Palette size={16} /> Cor
                                    </label>
                                    <select
                                        id="cor"
                                        name="cor"
                                        value={formData.cor}
                                        onChange={handleChange}
                                        required
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 h-10"
                                    >
                                        <option value="" disabled>Selecione...</option>
                                        {cores.map(c => (
                                            <option key={c} value={c}>{c}</option>
                                        ))}
                                    </select>
                                </div>

                                {/* Motor */}
                                <div>
                                    <label htmlFor="motor" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <Settings size={16} /> Motor
                                    </label>
                                    <select
                                        id="motor"
                                        name="motor"
                                        value={formData.motor}
                                        onChange={handleChange}
                                        required
                                        disabled={!formData.tipoVeiculo}
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 disabled:opacity-50 h-10"
                                    >
                                        <option value="" disabled>
                                            {formData.tipoVeiculo ? 'Selecione...' : 'Escolha o tipo'}
                                        </option>
                                        {listaMotores.map(m => (
                                            <option key={m} value={m}>{m}</option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                        </section>

                        {/* Identificação */}
                        <section>
                            <h2 className="flex items-center text-xl font-semibold text-sky-400 mb-4 border-b border-slate-700 pb-2 gap-2">
                                <ScanLicense size={22} /> Identificação
                            </h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                                {/* Placa */}
                                <div>
                                    <label htmlFor="placa" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <Hash size={16} /> Placa
                                    </label>
                                    <input
                                        type="text"
                                        id="placa"
                                        name="placa"
                                        placeholder="AAA1234 ou ABC1D23"
                                        value={formData.placa}
                                        onChange={handleChange}
                                        required
                                        maxLength={7}
                                        pattern="[A-Z]{3}[0-9][A-Z][0-9]{2}|[A-Z]{3}[0-9]{4}"
                                        title="Formato AAA1234 ou ABC1D23"
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 h-10 font-mono uppercase"
                                    />
                                </div>

                                {/* Renavam */}
                                <div>
                                    <label htmlFor="renavam" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <Hash size={16} /> Renavam
                                    </label>
                                    <input
                                        type="text"
                                        id="renavam"
                                        name="renavam"
                                        placeholder="Apenas números"
                                        inputMode="numeric"
                                        pattern="[0-9]{11}"
                                        title="O Renavam deve conter exatamente 11 dígitos numéricos"
                                        maxLength={11}
                                        required
                                        value={formData.renavam}
                                        onChange={handleChange}
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 h-10"
                                    />
                                </div>

                                {/* Proprietário */}
                                <div className="md:col-span-2">
                                    <label htmlFor="proprietario" className="flex items-center gap-1 mb-1 text-sm font-medium text-slate-300">
                                        <User size={16} /> Proprietário
                                    </label>
                                    <input
                                        type="text"
                                        id="proprietario"
                                        name="proprietario"
                                        value={formData.proprietario}
                                        onChange={handleChange}
                                        required
                                        maxLength={50}
                                        className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 h-10"
                                    />
                                </div>
                            </div>
                        </section>

                        {/* Botões */}
                        <div className="flex justify-end gap-4 pt-6">
                            <button
                                type="button"
                                className="px-5 py-2 bg-slate-600 hover:bg-slate-700 rounded-md text-white"
                                onClick={() => window.history.back()}
                            >
                                Cancelar
                            </button>
                            <button
                                type="submit"
                                disabled={isLoading}
                                className={`px-5 py-2 rounded-md font-semibold ${isLoading ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}
                            >
                                {isLoading ? 'Salvando...' : 'Salvar Veículo'}
                            </button>
                        </div>
                    </form>
                </div>
            </main>
        </div>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\deletar\[id]\page.tsx   |   componente DeletarVeiculoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/veiculo/deletar/[id]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o path

// Defina ou importe a interface aqui
interface VeiculoResponse {
    id: number;
    tipoVeiculo: string;
    renavam: string;
    placa: string;
    modelo: string;
    proprietario: string;
    montadora: string;
    cor: string;
    motor: string;
    anoFabricacao: string;
}

export default function DeletarVeiculoPage() {
    const router = useRouter();
    const params = useParams();
    const id = params.id as string;

    const [veiculo, setVeiculo] = useState<VeiculoResponse | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // Busca dados para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID do veículo não fornecido.");
            setIsFetching(false);
            return;
        }
        const fetchVeiculo = async () => {
            setIsFetching(true);
            setError(null);
            const apiUrl = `http://localhost:8080/rest/veiculo/${id}`; // Endpoint GET por ID
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) {
                    let errorMsg = `Erro ao buscar veículo ${id}: ${response.status}`;
                    try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                    throw new Error(errorMsg);
                }
                const data: VeiculoResponse = await response.json();
                setVeiculo(data);
            } catch (err: any) {
                setError(err.message || "Falha ao carregar dados do veículo para exclusão.");
                console.error("Erro ao buscar veículo:", err);
                setVeiculo(null);
            } finally {
                setIsFetching(false);
            }
        };
        fetchVeiculo();
    }, [id]);

    // Executa a exclusão
    const handleDelete = async () => {
        if (!id) { setError("ID inválido para exclusão."); return; }
        setIsLoading(true);
        setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/${id}`; // Endpoint DELETE
        try {
            const response = await fetch(apiUrl, { method: 'DELETE' });
            if (!response.ok) {
                let errorMsg = `Erro ${response.status} ao deletar veículo.`;
                if(response.status === 404) errorMsg = "Veículo não encontrado para exclusão.";
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                throw new Error(errorMsg);
            }
            if (response.status === 204) { // No Content = Sucesso
                console.log('Veículo deletado com sucesso!');
                router.push('/veiculo/listar');
            } else {
                console.warn("Resposta inesperada após DELETE:", response.status);
                router.push('/veiculo/listar');
            }
        } catch (err: any) {
            setError(err.message || "Falha ao deletar veículo.");
            console.error("Erro ao deletar veículo:", err);
        } finally {
            setIsLoading(false);
        }
    };

    // Renderização condicional
    if (isFetching) {
        return (
            <>
                <NavBar active="veiculo" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-sky-300">Carregando dados para confirmação...</p>
                </main>
            </>
        );
    }
    if (!veiculo) { // Erro ao buscar
        return (
            <>
                <NavBar active="veiculo" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-lg mx-auto text-center">
                        <h1 className="text-xl font-bold mb-4 text-red-400">Erro</h1>
                        <p className="mb-4 text-red-300">{error || "Não foi possível carregar os dados do veículo."}</p>
                        <Link href="/veiculo/listar">
                            <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow">Voltar para Lista</button>
                        </Link>
                    </div>
                </main>
            </>
        );
    }

    // Página de confirmação
    return (
        <>
            <NavBar active="veiculo" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-lg mx-auto">
                    <h1 className="text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">Confirmar Exclusão</h1>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o veículo abaixo? Esta ação não pode ser desfeita.</p>
                    <div className="mb-6 p-4 bg-slate-800 rounded border border-slate-700 text-sm">
                        <p><strong>ID:</strong> {veiculo.id}</p>
                        <p><strong>Placa:</strong> {veiculo.placa}</p>
                        <p><strong>Modelo:</strong> {veiculo.modelo}</p>
                        <p><strong>Proprietário:</strong> {veiculo.proprietario}</p>
                    </div>
                    {error && (
                        <div className="mb-4 text-red-400 bg-red-900/50 p-3 rounded border border-red-500 text-sm">{error}</div>
                    )}
                    <div className="flex justify-center gap-4">
                        <Link href="/veiculo/listar">
                            <button type="button" className="px-5 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow" disabled={isLoading}>Cancelar</button>
                        </Link>
                        <button
                            onClick={handleDelete}
                            disabled={isLoading}
                            className={`px-5 py-2 font-semibold rounded-md shadow ${isLoading ? 'bg-red-800 cursor-not-allowed' : 'bg-red-600 hover:bg-red-700'}`}
                        >
                            {isLoading ? 'Excluindo...' : 'Excluir Veículo'}
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
} // <<< FIM DO ARQUIVO - Sem chaves extras

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\listar\page.tsx   |   componente ListarVeiculosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: src/app/veiculo/listar/page.tsx (COM ORDENAÇÃO POR ID) ---
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar'; // Ajuste o path se necessário
// Importando Ícones Lucide e React-Icons
import { Car, Hash, Palette, Calendar, User, Building, Settings, Info, CirclePlus, Search, Edit3, Trash2, ListChecks, ScanLine as ScanLicense } from 'lucide-react';
import { MdBadge, MdErrorOutline } from 'react-icons/md'; // Usando MdBadge para placa/renavam

// --- Interface ---
interface VeiculoResponse {
    id: number;
    tipoVeiculo: string;
    renavam: string;
    placa: string;
    modelo: string;
    proprietario: string;
    montadora: string;
    cor: string;
    motor: string;
    anoFabricacao: string; // Espera-se formatar na exibição
}

export default function ListarVeiculosPage() {
    const [veiculos, setVeiculos] = useState<VeiculoResponse[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const router = useRouter();

    // --- Fetch dos veículos ---
    useEffect(() => {
        const fetchVeiculos = async () => {
            setIsLoading(true); setError(null);
            const apiUrl = `http://localhost:8080/rest/veiculo/all`;
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) { let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`; try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {} throw new Error(errorMsg); }
                if (response.status === 204) {
                    setVeiculos([]);
                } else {
                    const data: VeiculoResponse[] = await response.json();
                    // <<< ORDENAÇÃO POR ID ADICIONADA AQUI >>>
                    const sortedData = (data || []).sort((a, b) => a.id - b.id); // Ordena por ID ascendente
                    setVeiculos(sortedData); // <<< Usa os dados ordenados
                }
            } catch (err: any) { setError(err.message || "Falha ao carregar veículos."); console.error("Erro ao buscar veículos:", err); setVeiculos([]);
            } finally { setIsLoading(false); }
        };
        fetchVeiculos();
    }, []); // Roda apenas na montagem

    // --- Navegação para delete ---
    const navigateToDelete = (id: number) => {
        if (!id && id !== 0) { console.error("Tentativa de navegar para deletar com ID inválido:", id); setError("Não é possível deletar: ID do veículo inválido na lista."); return; }
        if (window.confirm(`Tem certeza que deseja excluir o veículo ID: ${id}?`)) {
            alert(`Exclusão do veículo ${id} não implementada neste exemplo.`);
            // Implementar a lógica real de exclusão aqui (chamar API, etc.)
            // Ex: router.push(`/veiculo/deletar/${id}`);
        }
    };

    // Helper para formatar data
    const formatarData = (dataString: string | null | undefined): string => {
        if (!dataString) return '-';
        try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { return 'Inválida'; }
    };

    return (
        <>
            <NavBar active="veiculo-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho e Botões */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left"> <Car size={28} className="text-sky-400" /> Lista de Veículos Cadastrados</h1>
                    <div className="flex gap-2 flex-wrap justify-center">
                        <Link href="/veiculo/cadastrar"> <button className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md shadow whitespace-nowrap"> <CirclePlus size={18} /> Novo Veículo </button> </Link>
                        <Link href="/veiculo/buscar"> <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md shadow whitespace-nowrap"> <Search size={18} /> Buscar Veículo </button> </Link>
                    </div>
                </div>

                {/* Mensagens */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando veículos...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 max-w-3xl mx-auto" role="alert"><MdErrorOutline className="inline mr-2" />{error}<button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {/* <<< Lista de Cards >>> */}
                {!isLoading && !error && (
                    <div>
                        {veiculos.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum veículo cadastrado.</p>
                        ) : (
                            // Grid Layout para os Cards
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {/* Mapeia sobre os veículos JÁ ORDENADOS */}
                                {veiculos.map((veiculo) => {
                                    const isIdValid = veiculo.id !== null && veiculo.id !== undefined;
                                    return (
                                        // Card Individual
                                        <div key={isIdValid ? veiculo.id : `invalid-${Math.random()}`} className={`bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300 ${!isIdValid ? 'opacity-50' : ''}`}>
                                            {/* Header do Card */}
                                            <div className="bg-slate-700 p-3 flex justify-between items-center text-sm">
                                                <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {isIdValid ? veiculo.id : 'Inválido'} </span>
                                                <span className="flex items-center gap-1 text-slate-400"> <Car size={16} /> {veiculo.tipoVeiculo || '-'} </span>
                                            </div>

                                            {/* Corpo do Card */}
                                            <div className="p-4 space-y-2 flex-grow text-sm">
                                                <p title={veiculo.modelo}><strong><Info size={16} className="inline -mt-1 mr-1"/> Modelo:</strong> {veiculo.modelo || '-'} ({veiculo.montadora || '-'})</p>
                                                <p title={veiculo.placa}><strong><MdBadge className="inline -mt-1 mr-1"/> Placa:</strong> <span className="font-mono bg-slate-700 px-1 rounded">{veiculo.placa || '-'}</span></p>
                                                <p><strong><Palette size={16} className="inline -mt-1 mr-1"/> Cor:</strong> {veiculo.cor || '-'}</p>
                                                <p><strong><Calendar size={16} className="inline -mt-1 mr-1"/> Ano:</strong> {formatarData(veiculo.anoFabricacao)}</p>
                                                <p><strong><Settings size={16} className="inline -mt-1 mr-1"/> Motor:</strong> {veiculo.motor || '-'}</p>
                                                <p><strong><Hash size={16} className="inline -mt-1 mr-1"/> Renavam:</strong> {veiculo.renavam || '-'}</p>
                                                <p title={veiculo.proprietario}><strong><User size={16} className="inline -mt-1 mr-1"/> Proprietário:</strong> {veiculo.proprietario || '-'}</p>
                                            </div>

                                            {/* Footer do Card (Ações) */}
                                            <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2">
                                                {isIdValid ? (
                                                    <>
                                                        <Link href={`/veiculo/alterar/${veiculo.id}`}>
                                                            <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1"> <Edit3 size={14} /> Editar </button>
                                                        </Link>
                                                        <button onClick={() => navigateToDelete(veiculo.id)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1"> <Trash2 size={14} /> Deletar </button>
                                                    </>
                                                ) : ( <span className="text-xs text-red-400 italic">ID Inválido</span> )}
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< Fim da Lista de Cards >>> */}
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// components\LeafletMap.tsx   |   componente defaultIcon
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

'use client'; // Importante para componentes que usam hooks do React e interagem com o browser

import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

// Correção do ícone do Leaflet
const defaultIcon = new L.Icon({
    iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
    iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
    shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
});

// Tipagem das propriedades do componente
interface LeafletMapProps {
    position: [number, number]; // Latitude, Longitude
    zoom?: number;
    markerText?: string;
    style?: React.CSSProperties;
}

const LeafletMap: React.FC<LeafletMapProps> = ({
                                                   position,
                                                   zoom = 16,
                                                   markerText = "Nossa Localização",
                                                   style = { height: '100%', width: '100%' }
                                               }) => {
    const [isClient, setIsClient] = useState(false);

    // Garante que o componente só é montado no ambiente do navegador
    useEffect(() => {
        setIsClient(typeof window !== 'undefined');
    }, []);

    // Se não estivermos no ambiente do navegador, retorna null
    if (!isClient) return null;

    return (
        <MapContainer center={position} zoom={zoom} style={style}>
            <TileLayer
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            <Marker position={position} icon={defaultIcon}>
                {markerText && <Popup>{markerText}</Popup>}
            </Marker>
        </MapContainer>
    );
};

export default LeafletMap;

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// components\forms\TabbedForm.tsx   |   componente TabbedForm
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/components/forms/TabbedForm.tsx
"use client";

import React, { ReactNode } from 'react';
import { Tab } from '@headlessui/react';

export interface AppTab {
    label: string;
    content: ReactNode;
    icon?: ReactNode;
    disabled?: boolean;
}

interface TabbedFormProps {
    tabs: AppTab[];
    selectedIndex?: number;
    onChange?: (index: number) => void;
}

const TabbedForm: React.FC<TabbedFormProps> = ({ tabs, selectedIndex, onChange }) => {
    return (
        <div className="w-full">
            <Tab.Group selectedIndex={selectedIndex} onChange={onChange}>
                {/* Container das Abas - Removemos a borda inferior daqui */}
                <Tab.List className="flex space-x-1 px-1 sm:px-2">
                    {tabs.map((tabItem) => (
                        <Tab
                            key={tabItem.label}
                            disabled={tabItem.disabled}
                            className={({ selected }) =>
                                `
                  px-3 sm:px-5 py-2.5 text-xs sm:text-sm font-medium focus:outline-none flex items-center gap-2 whitespace-nowrap
                  rounded-t-md                           // Cantos superiores arredondados
                  transition-colors duration-150
                  relative                                // Para posicionamento do pseudo-elemento ou borda
                  group                                   // Para hover nos separadores (opcional)

                  ${tabItem.disabled
                                    ? 'text-slate-600 cursor-not-allowed' // Estilo desabilitado
                                    : selected
                                        ? 'bg-slate-800 text-sky-300 shadow-sm' // ABA ATIVA: Fundo mais claro (ajuste a cor), texto destacado
                                        : 'bg-slate-900/50 text-slate-400 hover:bg-slate-700/70 hover:text-sky-200' // ABA INATIVA: Fundo escuro, hover sutil
                                }

                  /* Separador sutil à direita (exceto último) */
                  ${!tabItem.disabled && 'border-r border-slate-700/50 last:border-r-0'}
                `
                            }
                        >
                            {tabItem.icon}
                            {tabItem.label}
                        </Tab>
                    ))}
                    {/* Espaço vazio para preencher a linha abaixo das abas, exceto sob a ativa */}
                    <div className="flex-grow border-b border-slate-700"></div>
                </Tab.List>

                {/* Painéis de Conteúdo */}
                <Tab.Panels className="mt-[-1px]"> {/* Leve sobreposição para conectar */}
                    {tabs.map((tabItem, idx) => (
                        <Tab.Panel
                            key={idx}
                            // Fundo um pouco mais claro para conectar com a aba ativa
                            className="rounded-b-lg rounded-tr-lg bg-slate-800 p-3 sm:p-5 focus:outline-none border border-t-0 border-slate-700"
                        >
                            {tabItem.content}
                        </Tab.Panel>
                    ))}
                </Tab.Panels>
            </Tab.Group>
        </div>
    );
};

export default TabbedForm;

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// components\nav-bar.tsx   |   componente NavBar
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/components/nav-bar.tsx
"use client";

import Link from 'next/link';
import { useState } from 'react';
import {
    MdHome, MdPeople, MdDirectionsCar, MdBuild, MdSchedule, MdBarChart,
    MdPayment, MdContactMail, MdList, MdAddCircleOutline, MdSearch,
    MdDescription, MdEventNote, MdTrendingUp, MdPersonSearch, MdAssessment
} from 'react-icons/md';
// Importando ícones Lucide para Peças e Orçamento (se não estiverem já importados)
import { ListChecks, Package } from 'lucide-react';

interface NavBarProps {
    active:
        | "inicio"
        | "clientes" | "clientes-listar" | "clientes-cadastrar" | "clientes-buscar" | "clientes-alterar" | "clientes-deletar"
        | "veiculo" | "veiculo-listar" | "veiculo-cadastrar" | "veiculo-buscar" | "veiculo-alterar" | "veiculo-deletar"
        | "oficinaOnline" | "oficinaOnline-listar" | "oficinaOnline-cadastrar" | "oficinaOnline-buscar" | "oficinaOnline-alterar" | "oficinaOnline-deletar"
        | "agendamento" | "agendamento-listar" | "agendamento-cadastrar" | "agendamento-buscar" | "agendamento-alterar" | "agendamento-deletar"
        | "orcamento" | "orcamento-listar" | "orcamento-gerar" | "orcamento-buscar" | "orcamento-alterar" | "orcamento-deletar"
        // --- Peças Adicionado ---
        | "pecas" | "pecas-listar" | "pecas-cadastrar" | "pecas-buscar" | "pecas-alterar" | "pecas-deletar"
        // ------------------------
        | "pagamento" | "pagamento-listar" | "pagamento-cadastrar" | "pagamento-buscar" | "pagamento-alterar" | "pagamento-deletar"
        | "relatorio" | "relatorio-agendamentos-futuros" | "relatorio-contagem-mensal" | "relatorio-historico-cliente"
        | "relatorio-cliente-completo" | "relatorio-servicos-agendados"
        | "relatorio-financeiro-pagamentos"
        | "contato";
}

// Adicionado 'pecas' ao tipo
type OpenMenuType = null | 'clientes' | 'veiculo' | 'oficina' | 'agendamento' | 'orcamento' | 'pecas' | 'pagamento' | 'relatorio';

export default function NavBar({ active }: NavBarProps) {
    const baseLinkClass = "flex items-center px-1 pb-1 transition-colors duration-200 ease-in-out";
    const activeLinkClass = "text-sky-100 font-semibold border-b-2 border-sky-300";
    const inactiveLinkClass = "text-slate-300 hover:text-sky-200";
    const [openMenu, setOpenMenu] = useState<OpenMenuType>(null);

    const toggleMenu = (menu: OpenMenuType) => {
        setOpenMenu(current => (current === menu ? null : menu));
    };

    const getItemClass = (section: string): string => {
        if (active === section || (active && active.startsWith(section + "-"))) {
            return `${baseLinkClass} ${activeLinkClass}`;
        }
        return `${baseLinkClass} ${inactiveLinkClass}`;
    };

    return (
        <nav className="flex justify-between items-center p-4 md:p-6 bg-gradient-to-r from-[#075985] to-[#012A46] text-white shadow-md relative z-50">
            <Link href="/inicio" onClick={() => setOpenMenu(null)}>
                <h1 className="flex items-center text-xl md:text-2xl font-bold cursor-pointer hover:text-sky-200 transition-colors">
                    <MdBuild className="inline-block mr-2 text-2xl" />
                    Oficina On-line
                </h1>
            </Link>

            <ul className="flex flex-wrap gap-3 md:gap-5 text-sm md:text-base items-center">
                {/* Início */}
                <li><Link href="/inicio" className={getItemClass("inicio")} onClick={() => setOpenMenu(null)}><MdHome className="mr-1" /> Início</Link></li>

                {/* Clientes */}
                <li className="relative">
                    <button type="button" onClick={() => toggleMenu('clientes')} className={`${getItemClass("clientes")} cursor-pointer`}><MdPeople className="mr-1" /> Clientes</button>
                    {openMenu === 'clientes' && ( <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10"> <li><Link href="/clientes/listar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdList />Listar</Link></li> <li><Link href="/clientes/cadastrar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdAddCircleOutline/>Cadastrar</Link></li> <li><Link href="/clientes/buscar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdSearch/>Buscar</Link></li> </ul> )}
                </li>

                {/* Veículo */}
                <li className="relative">
                    <button type="button" onClick={() => toggleMenu('veiculo')} className={`${getItemClass("veiculo")} cursor-pointer`}><MdDirectionsCar className="mr-1" /> Veículo</button>
                    {openMenu === 'veiculo' && ( <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10"> <li><Link href="/veiculo/listar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdList />Listar</Link></li> <li><Link href="/veiculo/cadastrar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdAddCircleOutline/>Cadastrar</Link></li> <li><Link href="/veiculo/buscar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdSearch/>Buscar</Link></li> </ul> )}
                </li>

                {/* Oficina Online */}
                <li className="relative">
                    <button type="button" onClick={() => toggleMenu('oficina')} className={`${getItemClass("oficinaOnline")} cursor-pointer`}><MdBuild className="mr-1" /> Oficina On-line</button>
                    {openMenu === 'oficina' && ( <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10"> <li><Link href="/oficinaOnline/listar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdList />Listar</Link></li> <li><Link href="/oficinaOnline/cadastrar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdAddCircleOutline/>Novo Diag.</Link></li> <li><Link href="/oficinaOnline/buscar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdSearch/>Buscar</Link></li> </ul> )}
                </li>

                {/* Peças (NOVO MENU ADICIONADO) */}
                <li className="relative">
                    <button type="button" onClick={() => toggleMenu('pecas')} className={`${getItemClass("pecas")} cursor-pointer`}>
                        <Package className="mr-1" /> Peças {/* Ícone Lucide */}
                    </button>
                    {openMenu === 'pecas' && (
                        <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10">
                            <li><Link href="/pecas/listar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdList />Listar</Link></li>
                            <li><Link href="/pecas/cadastrar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdAddCircleOutline/>Cadastrar</Link></li>
                            <li><Link href="/pecas/buscar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdSearch/>Buscar</Link></li>
                        </ul>
                    )}
                </li>

                {/* Agendamento */}
                <li className="relative">
                    <button type="button" onClick={() => toggleMenu('agendamento')} className={`${getItemClass("agendamento")} cursor-pointer`}><MdSchedule className="mr-1" /> Agendamento</button>
                    {openMenu === 'agendamento' && ( <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10"> <li><Link href="/agendamento/listar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdList />Listar</Link></li> <li><Link href="/agendamento/cadastrar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdAddCircleOutline/>Novo</Link></li> <li><Link href="/agendamento/buscar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdSearch/>Buscar</Link></li> </ul> )}
                </li>

                {/* Orçamento (Já estava ajustado) */}
                <li className="relative">
                    <button type="button" onClick={() => toggleMenu('orcamento')} className={`${getItemClass("orcamento")} cursor-pointer`}>
                        <MdDescription className="mr-1" /> Orçamento
                    </button>
                    {openMenu === 'orcamento' && (
                        <ul className="absolute left-0 mt-2 w-56 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10">
                            <li><Link href="/orcamento/listar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdList /> Listar Orçamentos</Link></li>
                            <li><Link href="/orcamento/gerar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><ListChecks /> Gerar Orçamento</Link></li>
                            <li><Link href="/orcamento/buscar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdSearch /> Buscar Orçamento</Link></li>
                        </ul>
                    )}
                </li>

                {/* Pagamento */}
                <li className="relative">
                    <button type="button" onClick={() => toggleMenu('pagamento')} className={`${getItemClass("pagamento")} cursor-pointer`}>
                        <MdPayment className="mr-1" /> Pagamento
                    </button>
                    {openMenu === 'pagamento' && (
                        <ul className="absolute left-0 mt-2 w-56 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10">
                            <li><Link href="/pagamento/listar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdList /> Listar Registros</Link></li>
                            <li><Link href="/pagamento/cadastrar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdAddCircleOutline /> Registrar Pagamento</Link></li>
                            <li><Link href="/pagamento/buscar" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdSearch /> Buscar Pagamento</Link></li>
                        </ul>
                    )}
                </li>

                {/* Relatório */}
                <li className="relative">
                    <button type="button" onClick={() => toggleMenu('relatorio')} className={`${getItemClass("relatorio")} cursor-pointer`}><MdBarChart className="mr-1" /> Relatório</button>
                    {openMenu === 'relatorio' && (
                        <ul className="absolute right-0 sm:left-auto mt-2 w-64 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10">
                            <li><Link href="/relatorio/agendamentos-futuros" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdEventNote /> Agendamentos Futuros</Link></li>
                            <li><Link href="/relatorio/contagem-mensal" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdTrendingUp /> Contagem Mensal</Link></li>
                            <li><Link href="/relatorio/historico-cliente" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdPersonSearch /> Histórico Cliente</Link></li>
                            <li><Link href="/relatorio/servicos-agendados" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdEventNote /> Serviços Agendados</Link></li>
                            <li><Link href="/relatorio/cliente-completo" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdPersonSearch /> Cliente Completo</Link></li>
                            <li><Link href="/relatorio/financeiro-pagamentos" className="flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors" onClick={() => setOpenMenu(null)}><MdAssessment /> Financeiro Pagamentos</Link></li>
                        </ul>
                    )}
                </li>

                {/* Contato */}
                <li><Link href="/contato" className={getItemClass("contato")} onClick={() => setOpenMenu(null)}><MdContactMail className="mr-1" /> Contato</Link></li>
            </ul>

            <img
                className="w-10 h-10 md:w-12 md:h-12 rounded-full border-2 border-sky-200"
                src="https://avatars.githubusercontent.com/u/4350623?v=4" // Seu avatar
                alt="Avatar do usuário"
            />

            {/* Animação do Menu Dropdown */}
            <style jsx>{`
                @keyframes fade-in-down {
                    from { opacity: 0; transform: translateY(-10px); }
                    to   { opacity: 1; transform: translateY(0); }
                }
                .animate-fade-in-down { animation: fade-in-down 0.2s ease-out forwards; }
            `}</style>
        </nav>
    );
}

