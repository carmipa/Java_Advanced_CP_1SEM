// Script: converte-arquivos-tsx-em-txt-unico
// Data de criação do arquivo de saída: 2025-05-12 17:01:30

// Estrutura de diretórios do projeto:
src/
    app/
        box/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
        clientes/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
            listar/
        inicio/
        patio/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
            listar/
        veiculo/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
        zona/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
    components/
        forms/
    types/
    utils/

// Arquivos .tsx encontrados (caminho relativo):
// app\box\alterar\[id]\page.tsx
// app\box\buscar\page.tsx
// app\box\cadastrar\page.tsx
// app\box\deletar\[id]\page.tsx
// app\box\listar\page.tsx
// app\clientes\alterar\[id]\page.tsx
// app\clientes\buscar\page.tsx
// app\clientes\cadastrar\page.tsx
// app\clientes\deletar\page.tsx
// app\clientes\listar\page.tsx
// app\inicio\page.tsx
// app\layout.tsx
// app\page.tsx
// app\patio\alterar\[id]\page.tsx
// app\patio\buscar\page.tsx
// app\patio\cadastrar\page.tsx
// app\patio\deletar\page.tsx
// app\patio\listar\page.tsx
// app\veiculo\alterar\[id]\page.tsx
// app\veiculo\buscar\page.tsx
// app\veiculo\cadastrar\page.tsx
// app\veiculo\deletar\[id]\page.tsx
// app\veiculo\listar\page.tsx
// app\zona\alterar\[id]\page.tsx
// app\zona\buscar\page.tsx
// app\zona\cadastrar\page.tsx
// app\zona\deletar\[id]\page.tsx
// app\zona\listar\page.tsx
// components\forms\TabbedForm.tsx
// components\nav-bar.tsx

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\box\alterar\[id]\page.tsx   |   componente AlterarBoxPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Tag, Calendar, Text, Info, Loader2, AlertCircle } from 'lucide-react';

// Interfaces dos DTOs
import { BoxRequestDto, BoxResponseDto } from '@/types/box';
import { BoxService } from '@/utils/api';

export default function AlterarBoxPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    // Converte o ID da URL para número. O App Router passa `params.id` como string.
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    // Estado para os dados do formulário. Começa vazio ou com valores default.
    const [formData, setFormData] = useState<BoxRequestDto>({
        nome: '', status: '', dataEntrada: '', dataSaida: '', observacao: ''
    });
    const [isLoading, setIsLoading] = useState(false); // Para controlar o estado de submissão (salvando...)
    const [isFetching, setIsFetching] = useState(true); // Para controlar o carregamento inicial dos dados do box
    const [error, setError] = useState<string | null>(null); // Para exibir mensagens de erro
    const [success, setSuccess] = useState<string | null>(null); // Para exibir mensagens de sucesso

    // Efeito para buscar os dados do box quando o componente é montado ou o ID muda
    useEffect(() => {
        if (!id) {
            setError("ID do box não fornecido na URL.");
            setIsFetching(false); // Para o estado de carregamento inicial
            return;
        }
        const fetchBoxData = async () => {
            setIsFetching(true); // Ativa o estado de carregamento inicial
            setError(null); // Limpa erros anteriores
            try {
                // Chama o serviço para buscar o box pelo ID
                const data: BoxResponseDto = await BoxService.getById(id);
                // Preenche o formulário com os dados recebidos
                setFormData({
                    nome: data.nome,
                    status: data.status,
                    dataEntrada: data.dataEntrada,
                    dataSaida: data.dataSaida,
                    observacao: data.observacao || '', // Garante que observacao não seja null
                });
            } catch (err: any) {
                // Captura e exibe erros durante o fetch inicial
                setError(err.response?.data?.message || err.message || "Falha ao carregar dados do box.");
                console.error("Erro detalhado no fetch inicial:", err);
            } finally {
                setIsFetching(false); // Desativa o estado de carregamento inicial
            }
        };
        fetchBoxData();
    }, [id]); // A dependência `id` garante que este efeito roda quando o ID na URL está disponível ou muda

    // Handler para mudanças nos inputs do formulário
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    // Handler para o envio do formulário de atualização
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (id === null) { // Verifica se o ID é válido antes de tentar atualizar
            setError("ID do box inválido para atualização.");
            return;
        }
        setIsLoading(true); // Ativa o estado de submissão
        setError(null); // Limpa mensagens de erro anteriores
        setSuccess(null); // Limpa mensagens de sucesso anteriores

        try {
            // Chama o serviço para atualizar o box
            const updatedBox: BoxResponseDto = await BoxService.update(id, formData);
            setSuccess(`Box "${updatedBox.nome}" (ID: ${updatedBox.idBox}) atualizado com sucesso!`);
            // Após sucesso, redireciona para a página de listagem
            setTimeout(() => {
                setSuccess(null);
                router.push('/box/listar'); // Caminho para a página de listagem
            }, 2000); // Espera 2 segundos para a mensagem de sucesso ser lida
        } catch (err: any) {
            // Captura e exibe erros durante a atualização
            setError(err.response?.data?.message || err.message || 'Falha ao atualizar box.');
            console.error("Erro detalhado na atualização:", err);
        } finally {
            setIsLoading(false); // Desativa o estado de submissão
        }
    };

    // Renderização condicional para o estado de carregamento inicial
    if (isFetching) {
        return (
            <>
                <NavBar active="boxes-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados do box...</p>
                    </div>
                </main>
            </>
        );
    }

    // Renderização condicional para erro no carregamento inicial ou se o box não for encontrado
    // `!formData.nome || formData.nome === ''` verifica se o formulário não foi preenchido (dados não carregados)
    if (error && !isFetching && (!formData.nome || formData.nome === '')) {
        return (
            <>
                <NavBar active="boxes-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-900 p-8 rounded-lg shadow-xl text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <p className="text-red-400 text-lg mb-6">{error}</p>
                        <Link href="/box/listar" className="px-6 py-3 bg-sky-600 text-white rounded-md shadow hover:bg-sky-700">Voltar para Lista</Link>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="boxes-alterar" /> {/* Marca 'boxes-alterar' como ativo */}
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdEdit className="text-3xl text-sky-400" /> Alterar Box (ID: {id})
                    </h1>

                    {/* Mensagens de Erro e Sucesso */}
                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    {/* Formulário de Alteração */}
                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div>
                            <label htmlFor="nome" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Tag size={16} /> Nome:
                            </label>
                            <input
                                type="text"
                                id="nome"
                                name="nome"
                                value={formData.nome}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div>
                            <label htmlFor="status" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Info size={16} /> Status:
                            </label>
                            <select
                                id="status"
                                name="status"
                                value={formData.status}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            >
                                <option value="L">Livre</option>
                                <option value="O">Ocupado</option>
                            </select>
                        </div>

                        <div>
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Entrada:
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Saída:
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading || isFetching ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading || isFetching} // Desabilita se estiver carregando dados ou enviando
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/box/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            {/* Estilos globais para input de data */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\box\buscar\page.tsx   |   componente BuscarAgendamentosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// --- Arquivo: app/agendamento/buscar/page.tsx (Refatorado SEM ID, COM Cards) ---
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
// Importando Ícones
import { Calendar, Hash, ClipboardList, Edit3, Trash2, Search as SearchIcon, Filter, ChevronLeft, ChevronRight } from 'lucide-react';
import { MdSearch, MdEdit, MdDelete, MdErrorOutline, MdFindInPage } from 'react-icons/md';

// --- Interfaces ---
interface AgendamentoParaLista {
    id: number;
    dataAgendamento: string;
    observacao: string;
}

interface PaginatedAgendaResponse {
    content: AgendamentoApiResponseDto[];
    totalPages: number;
    totalElements: number; // Não usado, mas pode ser útil
    number: number; // Página atual (base 0)
    size: number;
}

interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string; // Esperado format<x_bin_438>-MM-DD
    observacao: string | null;
}
// ------------------

// <<< Tipo de busca ATUALIZADO (SEM 'id') >>>
type TipoBuscaAgendamento = 'observacao' | 'dataInicio' | 'dataFim';

export default function BuscarAgendamentosPage() {
    const [resultadosBusca, setResultadosBusca] = useState<AgendamentoParaLista[]>([]);
    // <<< Default voltou para 'observacao' >>>
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaAgendamento>('observacao');
    const [termoBusca, setTermoBusca] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // Estados de Paginação
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize] = useState(12); // Ajustado para cards

    const router = useRouter();

    // Helper para formatar data
    const formatarData = (dataString: string | null | undefined): string => {
        if (!dataString) return '-';
        try { return new Date(dataString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
        catch (e) { console.error("Erro formatar data:", dataString, e); return 'Inválida'; }
    };

    // --- Função de Busca ATUALIZADA (sem lógica de ID) ---
    const handleSearch = async (event?: FormEvent<HTMLFormElement>, page = 0) => {
        if (event) event.preventDefault();
        setIsSearching(true);
        setBuscaRealizada(true);
        setError(null);
        if (page === 0) { setResultadosBusca([]); setCurrentPage(0); }
        else { setCurrentPage(page); }

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'dataAgendamento,desc' // <<< Voltando a ordenar por Data DESC (ou 'asc' se preferir) >>>
        });

        // Adiciona o parâmetro de filtro correto
        const termo = termoBusca.trim();
        if (termo) {
            if (tipoBusca === 'dataInicio' || tipoBusca === 'dataFim') {
                if (/^\d{4}-\d{2}-\d{2}$/.test(termo)) {
                    params.append(tipoBusca, termo);
                } else {
                    setError("Formato de data inválido. Use AAAA-MM-DD.");
                    setIsSearching(false); setBuscaRealizada(false); setResultadosBusca([]);
                    return;
                }
            } else if (tipoBusca === 'observacao') { // Agora trata observacao
                params.append('observacao', termo); // Envia parâmetro 'observacao'
            }
            // Lógica para 'id' removida
        } else if (tipoBusca !== 'observacao' && tipoBusca !== 'dataInicio' && tipoBusca !== 'dataFim') {
            // Adicionar validação se algum campo for obrigatório (nenhum é agora)
            // setError("Termo de busca é obrigatório para este tipo.");
            // setIsSearching(false); setBuscaRealizada(false); setResultadosBusca([]);
            // return;
        }

        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.log("Buscando agendamentos:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`;
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                throw new Error(errorMsg);
            }

            if (response.status === 204) {
                setResultadosBusca([]); setTotalPages(0); setCurrentPage(page); return;
            }

            const data: PaginatedAgendaResponse = await response.json();
            // Ordenação feita pela API agora (sort=dataAgendamento,desc)
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: formatarData(dto.dataAgendamento),
                observacao: dto.observacao || '',
            }));
            setResultadosBusca(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);

        } catch (err: any) {
            setError(err.message || "Falha ao buscar agendamentos.");
            setResultadosBusca([]); setTotalPages(0); setCurrentPage(0);
            console.error("Erro:", err);
        } finally {
            setIsSearching(false);
        }
    };

    // Funções de Paginação
    const handlePreviousPage = () => { if (currentPage > 0) handleSearch(undefined, currentPage - 1); };
    const handleNextPage = () => { if (currentPage < totalPages - 1) handleSearch(undefined, currentPage + 1); };

    // Placeholder dinâmico ATUALIZADO
    const getPlaceholder = () => {
        switch (tipoBusca) {
            // case 'id': return 'Digite o ID exato...'; // Removido
            case 'dataInicio': return 'Data Início (AAAA-MM-DD)...';
            case 'dataFim': return 'Data Fim (AAAA-MM-DD)...';
            case 'observacao': return 'Digite parte da observação...'; // Default agora é observação
            default: return '';
        }
    };

    // Navegação para delete (simulada)
    const navigateToDelete = (id: number) => {
        if (!id || isNaN(id)) { setError("ID inválido para exclusão."); return; }
        if (window.confirm(`Tem certeza que deseja excluir o Agendamento ID: ${id}?`)) {
            alert(`Exclusão do Agendamento ${id} não implementada.`);
        }
    };

    return (
        <>
            <NavBar active="agendamento" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center gap-2 text-3xl font-bold mb-6 text-center">
                    <MdFindInPage className="text-4xl text-sky-400" /> Buscar Agendamentos
                </h1>

                {/* Formulário de Busca ATUALIZADO */}
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-4xl mx-auto mb-8">
                    <form onSubmit={handleSearch}>
                        <div className="flex flex-wrap items-end gap-4">
                            {/* Select Tipo de Busca ATUALIZADO */}
                            <div className="flex-shrink-0 w-full sm:w-auto">
                                <label htmlFor="tipoBusca" className="flex items-center gap-1 block text-sm font-medium mb-1 text-slate-300"><Filter size={16}/>Buscar por:</label>
                                <select
                                    id="tipoBusca" name="tipoBusca"
                                    className="w-full sm:w-48 h-10 px-3 py-2 bg-slate-800 border border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
                                    value={tipoBusca}
                                    onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaAgendamento); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); setError(null); }}
                                >
                                    {/* <<< Opção ID Removida >>> */}
                                    <option value="observacao">Observação</option>
                                    <option value="dataInicio">Data Início</option>
                                    <option value="dataFim">Data Fim</option> {/* Mantido Data Fim */}
                                </select>
                            </div>
                            {/* Input Termo de Busca */}
                            <div className="flex-grow min-w-[200px]">
                                <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo:</label>
                                <input
                                    // Muda tipo dinamicamente
                                    type={tipoBusca.includes('data') ? 'date' : 'text'}
                                    id="termoBusca" name="termoBusca"
                                    className="w-full h-10 px-3 py-2 bg-slate-800 border border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
                                    value={termoBusca} onChange={(e) => setTermoBusca(e.target.value)}
                                    placeholder={getPlaceholder()}
                                    required // Agora todos os campos podem ser required
                                />
                            </div>
                            {/* Botão Buscar */}
                            <div className="flex-shrink-0">
                                <button type="submit" disabled={isSearching} className={`h-10 px-5 py-2 font-semibold rounded-md shadow flex items-center justify-center ${isSearching ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}>
                                    <SearchIcon size={18} className="mr-2"/> {isSearching ? 'Buscando...' : 'Buscar'}
                                </button>
                            </div>
                        </div>
                        {error && ( <p className="mt-3 text-sm text-red-400 flex items-center gap-1"><MdErrorOutline/>{error}</p> )}
                    </form>
                </div>

                {/* Mensagem Loading Inicial (removida pois busca é ativa) */}

                {/* <<< Área de Resultados com Cards >>> */}
                {buscaRealizada && ( // Mostra resultados apenas após busca
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold mb-4 text-center text-sky-300">Resultados da Busca</h2>
                        {isSearching ? (
                            <p className="text-center text-sky-300 py-10">Buscando...</p>
                        ) : resultadosBusca.length === 0 ? (
                            <p className="text-center text-slate-400 py-10">Nenhum agendamento encontrado para os critérios informados.</p>
                        ) : (
                            // Grid Layout para os Cards
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {resultadosBusca.map((agendamento) => (
                                    <div key={agendamento.id} className="bg-slate-800 rounded-lg shadow-lg border border-slate-700 flex flex-col overflow-hidden hover:shadow-sky-700/20 transition-shadow duration-300">
                                        {/* Header */}
                                        <div className="bg-slate-700 p-3 flex justify-between items-center text-sm"> <span className="flex items-center gap-1 font-semibold text-sky-300"> <Hash size={16} /> ID: {agendamento.id} </span> <span className="flex items-center gap-1 text-slate-400"> <Calendar size={16} /> {agendamento.dataAgendamento} </span> </div>
                                        {/* Corpo */}
                                        <div className="p-4 space-y-3 flex-grow"> <div> <h3 className="flex items-center text-base font-semibold mb-1 text-slate-200 gap-1"> <ClipboardList size={18} className="text-amber-400"/> Observação </h3> <p className="text-sm text-slate-300 break-words max-h-28 overflow-y-auto pr-1"> {agendamento.observacao || '-'} </p> </div> </div>
                                        {/* Footer */}
                                        <div className="bg-slate-900 p-3 mt-auto border-t border-slate-700 flex justify-end gap-2"> <Link href={`/agendamento/alterar/${agendamento.id}`}> <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-xs font-medium gap-1"> <Edit3 size={14} /> Editar </button> </Link> <button onClick={() => navigateToDelete(agendamento.id)} className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-xs font-medium gap-1"> <Trash2 size={14} /> Deletar </button> </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )}
                {/* <<< Fim da Área de Resultados >>> */}

                {/* Paginação */}
                {buscaRealizada && !isSearching && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-8 gap-3">
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1"> <ChevronLeft size={18}/> Anterior </button>
                        <span className="text-slate-300 text-sm"> Página {currentPage + 1} de {totalPages} </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-3 py-1.5 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1"> Próxima <ChevronRight size={18}/> </button>
                    </div>
                )}

                {/* Botão Voltar */}
                <div className="mt-8 text-center"> <Link href="/agendamento/listar"> <button className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow"> Voltar para Lista Completa </button> </Link> </div>

            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\box\cadastrar\page.tsx   |   componente CadastrarBoxPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdAddCircleOutline, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Tag, Calendar, Text, Info } from 'lucide-react';

// Interfaces dos DTOs
import { BoxRequestDto, BoxResponseDto } from '@/types/box';
import { BoxService } from '@/utils/api';

export default function CadastrarBoxPage() {
    const router = useRouter();
    const today = new Date().toISOString().split('T')[0]; // Data de hoje no formato YYYY-MM-DD

    // Estado inicial para o formulário
    const initialState: BoxRequestDto = {
        nome: '',
        status: 'L', // 'L' (Livre) ou 'O' (Ocupado)
        dataEntrada: today,
        dataSaida: today,
        observacao: '',
    };

    const [formData, setFormData] = useState<BoxRequestDto>(initialState);
    const [isLoading, setIsLoading] = useState(false); // Para controlar o estado de submissão (salvando...)
    const [error, setError] = useState<string | null>(null); // Para exibir mensagens de erro
    const [success, setSuccess] = useState<string | null>(null); // Para exibir mensagens de sucesso

    // Handler para mudanças nos inputs do formulário
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    // Handler para o envio do formulário
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault(); // Evita o recarregamento padrão da página
        setIsLoading(true); // Ativa o estado de loading
        setError(null); // Limpa mensagens de erro anteriores
        setSuccess(null); // Limpa mensagens de sucesso anteriores

        try {
            // Chama o serviço para criar um novo box
            const createdBox: BoxResponseDto = await BoxService.create(formData);
            setSuccess(`Box "${createdBox.nome}" (ID: ${createdBox.idBox}) cadastrado com sucesso!`);
            setFormData(initialState); // Limpa o formulário após o sucesso
            setTimeout(() => setSuccess(null), 5000); // Limpa a mensagem de sucesso após 5 segundos
        } catch (err: any) {
            // Captura a mensagem de erro do backend (se disponível) ou uma mensagem genérica
            setError(err.response?.data?.message || err.message || 'Falha ao cadastrar box.');
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false); // Desativa o estado de loading
        }
    };

    return (
        <>
            <NavBar active="boxes-cadastrar" /> {/* Marca 'boxes-cadastrar' como ativo na NavBar */}
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdAddCircleOutline className="text-3xl text-sky-400" /> Novo Box
                    </h1>

                    {/* Mensagens de Erro e Sucesso */}
                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    {/* Formulário de Cadastro */}
                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div>
                            <label htmlFor="nome" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Tag size={16} /> Nome:
                            </label>
                            <input
                                type="text"
                                id="nome"
                                name="nome"
                                value={formData.nome}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div>
                            <label htmlFor="status" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Info size={16} /> Status:
                            </label>
                            <select
                                id="status"
                                name="status"
                                value={formData.status}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            >
                                <option value="L">Livre</option>
                                <option value="O">Ocupado</option>
                            </select>
                        </div>

                        <div>
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Entrada:
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Saída:
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Box'}
                            </button>
                            <Link href="/box/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            {/* Estilos globais para input de data */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\box\deletar\[id]\page.tsx   |   componente DeletarBoxPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/deletar/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdInfoOutline } from 'react-icons/md';
import { Trash2, AlertCircle, Loader2 } from 'lucide-react';

// Interfaces dos DTOs
import { BoxResponseDto } from '@/types/box';
import { BoxService } from '@/utils/api';

export default function DeletarBoxPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [boxInfo, setBoxInfo] = useState<BoxResponseDto | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true); // Para carregar os dados do box a ser deletado
    const [isDeleting, setIsDeleting] = useState(false); // Para o estado de deleção (excluindo...)
    const [error, setError] = useState<string | null>(null);

    // Função para formatar a data para exibição
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Efeito para buscar os dados do box para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID do box não fornecido na URL.");
            setIsLoadingInfo(false);
            return;
        }
        const fetchBoxData = async () => {
            setIsLoadingInfo(true);
            setError(null); // Limpa erros anteriores
            try {
                const data: BoxResponseDto = await BoxService.getById(id);
                setBoxInfo(data);
            } catch (err: any) {
                // Se for 404, indica que o recurso não foi encontrado (talvez já deletado)
                if (err.response && err.response.status === 404) {
                    setError(`Box com ID ${id} não encontrado(a) ou já foi excluído(a).`);
                } else {
                    setError(err.response?.data?.message || err.message || "Falha ao carregar dados do box para exclusão.");
                }
                console.error("Erro detalhado no fetch de deleção:", err);
                setBoxInfo(null); // Garante que o info esteja vazio em caso de erro
            } finally {
                setIsLoadingInfo(false);
            }
        };
        fetchBoxData();
    }, [id]);

    // Handler para confirmar a deleção
    const handleConfirmDelete = async () => {
        if (id === null || !boxInfo) { // Verifica se o ID é válido e se os dados do box foram carregados
            setError("Não é possível excluir: ID inválido ou dados do box não carregados.");
            return;
        }
        setIsDeleting(true); // Ativa o estado de deleção
        setError(null); // Limpa erros anteriores

        try {
            await BoxService.delete(id);
            console.log(`Box ID ${id} excluído com sucesso.`);
            // Redireciona para a página de listagem após o sucesso
            router.push('/box/listar?deleted=true'); // Adiciona query param para possível mensagem de sucesso na lista
        } catch (err: any) {
            // Captura e exibe erros durante a deleção
            setError(err.response?.data?.message || err.message || "Falha ao excluir box.");
            console.error("Erro detalhado na deleção:", err);
        } finally {
            setIsDeleting(false); // Desativa o estado de deleção
        }
    };

    // Handler para cancelar a deleção (volta para a lista)
    const handleCancel = () => {
        router.push('/box/listar');
    };

    // Renderização condicional para o estado de carregamento inicial dos dados do box
    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="boxes-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-center text-sky-300 py-10 text-xl flex items-center gap-2">
                        <Loader2 className="h-6 w-6 animate-spin" /> Carregando dados para confirmação...
                    </p>
                </main>
            </>
        );
    }

    // Renderização condicional para erro no carregamento inicial ou box não encontrado
    if (error && !boxInfo) {
        return (
            <>
                <NavBar active="boxes-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" /> Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    // Renderização da página de confirmação de deleção
    return (
        <>
            <NavBar active="boxes-deletar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o seguinte box? Esta ação não pode ser desfeita.</p>

                    {boxInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID do Box:</strong> {boxInfo.idBox}</p>
                            <p><strong>Nome:</strong> {boxInfo.nome}</p>
                            <p><strong>Status:</strong> {boxInfo.status === 'L' ? 'Livre' : 'Ocupado'}</p>
                            <p><strong>Data Entrada:</strong> {formatDate(boxInfo.dataEntrada)}</p>
                            <p><strong>Data Saída:</strong> {formatDate(boxInfo.dataSaida)}</p>
                            <p><strong>Observação:</strong> {boxInfo.observacao || '-'}</p>
                        </div>
                    )}

                    {error && ( // Exibe erro se ocorrer durante a tentativa de exclusão
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever size={20} /> Sim, Excluir</>)}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel size={20} /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\box\listar\page.tsx   |   componente ListarBoxesPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/listar/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { BoxService } from '@/utils/api';
import NavBar from '@/components/nav-bar';
import {
    MdList, MdAdd, MdSearch, MdErrorOutline, MdEdit, MdDelete,
    MdFilterList, MdCalendarToday, MdInfo, MdCheckCircle
} from 'react-icons/md';
import { Hash } from 'lucide-react';

// Interfaces dos DTOs e Filtro
import { BoxResponseDto, BoxFilter } from '@/types/box';

export default function ListarBoxesPage() {
    const [boxes, setBoxes] = useState<BoxResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    // Estado para os filtros
    const [filter, setFilter] = useState<BoxFilter>({
        nome: '',
        status: '',
        dataEntradaInicio: '',
        dataEntradaFim: '',
        dataSaidaInicio: '',
        dataSaidaFim: '',
        observacao: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            // Adiciona 'T00:00:00Z' e 'timeZone: 'UTC'' para garantir que a data seja interpretada corretamente
            // e formatada para a localidade do usuário sem problemas de fuso horário inesperados.
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Função para buscar os boxes da API com filtros
    const fetchBoxes = async (e?: FormEvent) => {
        if (e) e.preventDefault(); // Previne recarregamento da página se for submit de form

        setIsLoading(true);
        setError(null);
        setSuccessMessage(null); // Limpa mensagens de sucesso anteriores ao buscar

        try {
            // Chama o serviço com os parâmetros de filtro. O Axios (ou fetch com URLSearchParams)
            // converterá o objeto `filter` em query parameters para a URL.
            const data = await BoxService.getAll(filter);
            setBoxes(data);
        } catch (err: any) {
            // Erros do Axios geralmente vêm em `err.response.data.message` ou `err.message`
            setError(err.response?.data?.message || err.message || 'Erro ao carregar boxes. Tente novamente.');
            console.error("Erro detalhado:", err);
            setBoxes([]); // Limpa a lista em caso de erro
        } finally {
            setIsLoading(false);
        }
    };

    // Efeito para carregar os boxes na montagem do componente (e aplicar filtros)
    // O fetch inicial é feito com os valores de filtro vazios do estado inicial.
    useEffect(() => {
        fetchBoxes();
    }, []); // Array de dependências vazio para rodar apenas uma vez na montagem. O botão "Aplicar Filtros" chamará `WorkspaceBoxes` manualmente.

    // Handler para mudanças nos inputs de filtro
    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    // Handler para deleção de um box
    const handleDelete = async (id: number, nomeBox: string) => {
        if (window.confirm(`Tem certeza que deseja deletar o Box "${nomeBox}" (ID: ${id})?`)) {
            setIsLoading(true); // Mostra loading enquanto deleta (afeta a tabela inteira)
            setError(null); // Limpa erro anterior
            try {
                await BoxService.delete(id);
                setSuccessMessage(`Box "${nomeBox}" (ID: ${id}) deletado com sucesso!`);
                fetchBoxes(); // Recarrega a lista após a exclusão
                setTimeout(() => setSuccessMessage(null), 5000); // Limpa a mensagem de sucesso
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar box.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="boxes-listar" /> {/* Certifique-se de que 'boxes-listar' está definido na sua NavBarProps */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left">
                        <MdList className="text-3xl text-sky-400" /> Lista de Boxes
                    </h1>
                    <Link href="/box/cadastrar"> {/* Caminho para a página de cadastro */}
                        <button className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                            <MdAdd size={18} /> Novo Box
                        </button>
                    </Link>
                </div>

                {/* Formulário de Filtros */}
                <form onSubmit={fetchBoxes} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md flex flex-wrap gap-4 items-end">
                    <div>
                        <label htmlFor="nome" className="text-sm text-slate-300 block mb-1">Nome:</label>
                        <input
                            type="text"
                            id="nome"
                            name="nome"
                            value={filter.nome}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Parte do nome"
                        />
                    </div>
                    <div>
                        <label htmlFor="status" className="text-sm text-slate-300 block mb-1">Status:</label>
                        <select
                            id="status"
                            name="status"
                            value={filter.status}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white min-w-[100px]"
                        >
                            <option value="">Todos</option>
                            <option value="L">Livre</option>
                            <option value="O">Ocupado</option>
                        </select>
                    </div>
                    <div>
                        <label htmlFor="dataEntradaInicio" className="text-sm text-slate-300 block mb-1">Entrada (Início):</label>
                        <input
                            type="date"
                            id="dataEntradaInicio"
                            name="dataEntradaInicio"
                            value={filter.dataEntradaInicio}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"
                        />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaFim" className="text-sm text-slate-300 block mb-1">Entrada (Fim):</label>
                        <input
                            type="date"
                            id="dataEntradaFim"
                            name="dataEntradaFim"
                            value={filter.dataEntradaFim}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"
                        />
                    </div>
                    {/* Você pode adicionar mais campos de filtro aqui conforme o BoxFilter.java (ex: dataSaidaInicio, dataSaidaFim, observacao) */}
                    <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                        <MdSearch size={20} /> Aplicar Filtros
                    </button>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando boxes...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}
                {successMessage && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-green-400 bg-green-900/50 p-4 pr-10 rounded border border-green-500" role="alert">
                        <MdCheckCircle className="inline mr-2" />{successMessage}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-green-400 hover:text-green-200" onClick={() => setSuccessMessage(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Boxes */}
                {!isLoading && !error && boxes.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhum box encontrado para os critérios informados.</p>
                )}
                {!isLoading && boxes.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Status</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Entrada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Saída</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {boxes.map((box) => (
                                <tr key={box.idBox} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{box.idBox}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{box.nome}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{box.status === 'L' ? 'Livre' : 'Ocupado'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(box.dataEntrada)}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(box.dataSaida)}</td>
                                    <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={box.observacao || ''}>{box.observacao || '-'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/box/alterar/${box.idBox}`}> {/* Caminho para a página de alteração */}
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(box.idBox, box.nome)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
            {/* Estilos globais para input de data */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\alterar\[id]\page.tsx   |   componente AlterarClientePage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import {
    MdEdit, MdPerson, MdBadge, MdCalendarToday, MdWork, MdPhone, MdEmail, MdLocationOn, MdHome,
    MdErrorOutline, MdCheckCircle, MdInfo, MdSave, MdArrowBack
} from 'react-icons/md';
import { User, Mail, MapPin, Tag, Calendar, Briefcase, Loader2, AlertCircle } from 'lucide-react';

// Interfaces dos DTOs
import { ClienteRequestDto, ClienteResponseDto, EnderecoRequestDto, ContatoRequestDto } from '@/types/cliente';
import { ClienteService } from '@/utils/api';

// Função auxiliar para limpar máscaras
const cleanMaskedValue = (value: string): string =>
    value.replace(/\D/g, '');

export default function AlterarClientePage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [formData, setFormData] = useState<ClienteRequestDto>({
        sexo: 'M', nome: '', sobrenome: '', dataNascimento: '', cpf: '',
        profissao: '', estadoCivil: 'Solteiro',
        enderecoRequestDto: { cep: '', numero: 0, complemento: '', observacao: '' },
        contatoRequestDto: { email: '', ddd: 0, ddi: 0, telefone1: '', celular: '', outro: '', observacao: '' },
    });

    const [tipoDocumentoDisplay, setTipoDocumentoDisplay] = useState("CPF"); // 'CPF' | 'CNPJ'

    const [isLoading, setIsLoading] = useState(false); // Para submissão
    const [isFetching, setIsFetching] = useState(true); // Para carregar dados iniciais
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Busca inicial dos dados do cliente
    useEffect(() => {
        if (!id) {
            setError("ID do cliente não fornecido na URL.");
            setIsFetching(false);
            return;
        }
        const fetchData = async () => {
            setIsFetching(true);
            setError(null);
            try {
                const data: ClienteResponseDto = await ClienteService.getById(id);

                setFormData({
                    sexo: data.sexo || 'M',
                    nome: data.nome || '',
                    sobrenome: data.sobrenome || '',
                    dataNascimento: data.dataNascimento ? data.dataNascimento.split('T')[0] : '', // Formata para input type="date"
                    cpf: data.cpf || '',
                    profissao: data.profissao || '',
                    estadoCivil: data.estadoCivil as ClienteRequestDto['estadoCivil'] || 'Solteiro',
                    enderecoRequestDto: {
                        idEndereco: data.enderecoResponseDto?.idEndereco, // Importante para o backend saber qual endereço atualizar
                        cep: data.enderecoResponseDto?.cep || '',
                        numero: data.enderecoResponseDto?.numero || 0,
                        complemento: data.enderecoResponseDto?.complemento || '',
                        observacao: data.enderecoResponseDto?.observacao || '',
                        // Campos de ViaCEP preenchidos pelo backend não são enviados aqui
                    },
                    contatoRequestDto: {
                        idContato: data.contatoResponseDto?.idContato, // Importante para o backend saber qual contato atualizar
                        email: data.contatoResponseDto?.email || '',
                        ddd: data.contatoResponseDto?.ddd || 0,
                        ddi: data.contatoResponseDto?.ddi || 0,
                        telefone1: data.contatoResponseDto?.telefone1 || '',
                        telefone2: data.contatoResponseDto?.telefone2 || '',
                        telefone3: data.contatoResponseDto?.telefone3 || '',
                        celular: data.contatoResponseDto?.celular || '',
                        outro: data.contatoResponseDto?.outro || '',
                        observacao: data.contatoResponseDto?.observacao || '',
                    },
                });
                // Ajusta o tipo de documento para exibir corretamente no campo de máscara
                setTipoDocumentoDisplay(data.cpf?.length === 11 ? "CPF" : "CNPJ");

            } catch (err: any) {
                setError(err.response?.data?.message || err.message || "Falha ao carregar dados para edição.");
                console.error("Erro detalhado no fetch inicial:", err);
            } finally {
                setIsFetching(false);
            }
        };
        fetchData();
    }, [id]);

    // Handler genérico para campos do formData
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        // Lidar com campos aninhados usando split de nome (ex: 'enderecoRequestDto.cep')
        if (name.includes('.')) {
            const [parent, child] = name.split('.');
            setFormData(prev => ({
                ...prev,
                [parent]: {
                    ...((prev as any)[parent] || {}),
                    [child]: value
                }
            }));
        } else {
            setFormData(prev => ({ ...prev, [name]: value }));
        }
    };

    // Handler para o envio do formulário atualizado
    const handleUpdate = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (id === null) {
            setError("ID do cliente inválido para salvar.");
            return;
        }

        setIsLoading(true);
        setError(null);
        setSuccess(null);

        // Limpeza e conversão de valores para envio
        const clienteDataToSend: ClienteRequestDto = {
            ...formData,
            cpf: cleanMaskedValue(formData.cpf),
            contatoRequestDto: {
                ...formData.contatoRequestDto,
                celular: cleanMaskedValue(formData.contatoRequestDto.celular),
                ddd: parseInt(formData.contatoRequestDto.ddd.toString(), 10) || 0,
                ddi: parseInt(formData.contatoRequestDto.ddi.toString(), 10) || 0,
            },
            enderecoRequestDto: {
                ...formData.enderecoRequestDto,
                cep: cleanMaskedValue(formData.enderecoRequestDto.cep),
                numero: parseInt(formData.enderecoRequestDto.numero.toString(), 10) || 0,
            }
        };

        console.log("Enviando payload para ATUALIZAR Cliente:", JSON.stringify(clienteDataToSend, null, 2));

        try {
            const updatedCliente: ClienteResponseDto = await ClienteService.update(id, clienteDataToSend);
            setSuccess(`✅ Cliente "${updatedCliente.nome} ${updatedCliente.sobrenome}" (ID: ${updatedCliente.idCliente}) atualizado com sucesso!`);
            setTimeout(() => { setSuccess(null); router.push('/clientes/listar'); }, 2000);
        } catch (err: any) {
            setError(`❌ ${err.response?.data?.message || err.message || 'Falha ao salvar alterações.'}`);
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    if (isFetching) {
        return (
            <>
                <NavBar active="clientes-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados do cliente...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !isFetching && (!formData.nome || formData.nome === '')) { // Erro grave ao carregar dados iniciais
        return (
            <>
                <NavBar active="clientes-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-900 p-8 rounded-lg shadow-xl text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <p className="text-red-400 text-lg mb-6">{error}</p>
                        <Link href="/clientes/listar" className="px-6 py-3 bg-sky-600 text-white rounded-md shadow hover:bg-sky-700">Voltar para Lista</Link>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="clientes-alterar" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-6">
                        <MdEdit className="mr-2 text-3xl" />
                        Alterar Cliente (ID: {id})
                    </h2>

                    {error && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500" role="alert">
                            <span className="block sm:inline">{error}</span>
                            <button
                                type="button"
                                className="absolute top-0 right-0 px-4 py-3 text-red-400 hover:text-red-200"
                                onClick={() => setError(null)}
                                aria-label="Fechar"
                            >
                                <span className="text-2xl">&times;</span>
                            </button>
                        </div>
                    )}

                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleUpdate}>
                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Nome */}
                                <div>
                                    <label htmlFor="nome" className="block mb-1 flex items-center gap-1">
                                        <User size={16} /> Nome:
                                    </label>
                                    <input
                                        id="nome"
                                        type="text"
                                        name="nome"
                                        value={formData.nome}
                                        onChange={handleChange}
                                        required
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Sobrenome */}
                                <div>
                                    <label htmlFor="sobrenome" className="block mb-1 flex items-center gap-1">
                                        <User size={16} /> Sobrenome:
                                    </label>
                                    <input
                                        id="sobrenome"
                                        type="text"
                                        name="sobrenome"
                                        value={formData.sobrenome}
                                        onChange={handleChange}
                                        required
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Sexo */}
                                <div>
                                    <label htmlFor="sexo" className="block mb-1 flex items-center gap-1">
                                        <MdInfo size={16} /> Sexo:
                                    </label>
                                    <select
                                        id="sexo"
                                        name="sexo"
                                        value={formData.sexo}
                                        onChange={handleChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    >
                                        <option value="M">Masculino</option>
                                        <option value="H">Feminino</option>
                                    </select>
                                </div>
                                {/* Data de Nascimento */}
                                <div>
                                    <label htmlFor="dataNascimento" className="block mb-1 flex items-center gap-1">
                                        <Calendar size={16} /> Nascimento:
                                    </label>
                                    <input
                                        type="date"
                                        id="dataNascimento"
                                        name="dataNascimento"
                                        value={formData.dataNascimento}
                                        onChange={handleChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 date-input-fix h-10"
                                    />
                                </div>
                                {/* Tipo de Documento (para máscara) */}
                                <div>
                                    <label htmlFor="tipoDocumentoDisplay" className="block mb-1 flex items-center gap-1">
                                        <MdBadge size={16} /> Documento:
                                    </label>
                                    <select
                                        id="tipoDocumentoDisplay"
                                        name="tipoDocumentoDisplay"
                                        value={tipoDocumentoDisplay}
                                        onChange={e => {
                                            setTipoDocumentoDisplay(e.target.value);
                                            setFormData(prev => ({ ...prev, cpf: '' }));
                                        }}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    >
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>
                                {/* Número do Documento (CPF) */}
                                <div>
                                    <label htmlFor="cpf" className="block mb-1 flex items-center gap-1">
                                        <MdBadge size={16} /> Número:
                                    </label>
                                    <IMaskInput
                                        id="cpf"
                                        name="cpf"
                                        mask={tipoDocumentoDisplay === 'CPF' ? cpfMask : cnpjMask}
                                        unmask={false}
                                        value={formData.cpf}
                                        onAccept={(value: string) => setFormData(prev => ({ ...prev, cpf: value }))}
                                        required
                                        placeholder={tipoDocumentoDisplay === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Profissão */}
                                <div>
                                    <label htmlFor="profissao" className="block mb-1 flex items-center gap-1">
                                        <Briefcase size={16} /> Profissão:
                                    </label>
                                    <input
                                        type="text"
                                        id="profissao"
                                        name="profissao"
                                        value={formData.profissao}
                                        onChange={handleChange}
                                        required
                                        maxLength={50}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Estado Civil */}
                                <div>
                                    <label htmlFor="estadoCivil" className="block mb-1 flex items-center gap-1">
                                        <MdInfo size={16} /> Estado Civil:
                                    </label>
                                    <select
                                        id="estadoCivil"
                                        name="estadoCivil"
                                        value={formData.estadoCivil}
                                        onChange={handleChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    >
                                        <option value="Solteiro">Solteiro</option>
                                        <option value="Casado">Casado</option>
                                        <option value="Divorciado">Divorciado</option>
                                        <option value="Viúvo">Viúvo</option>
                                        <option value="Separado">Separado</option>
                                        <option value="União Estável">União Estável</option>
                                    </select>
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Celular */}
                                <div>
                                    <label htmlFor="celular" className="block mb-1 flex items-center gap-1">
                                        <MdPhone size={16} /> Celular:
                                    </label>
                                    <IMaskInput
                                        id="celular"
                                        name="contatoRequestDto.celular"
                                        mask="(00) 00000-0000"
                                        unmask={false}
                                        value={formData.contatoRequestDto.celular}
                                        onAccept={(value: string) => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, celular: value }
                                        }))}
                                        required
                                        placeholder="(99) 99999-9999"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* E-mail */}
                                <div>
                                    <label htmlFor="email" className="block mb-1 flex items-center gap-1">
                                        <Mail size={16} /> E-mail:
                                    </label>
                                    <input
                                        type="email"
                                        id="email"
                                        name="contatoRequestDto.email"
                                        value={formData.contatoRequestDto.email}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, email: e.target.value }
                                        }))}
                                        required
                                        placeholder="exemplo@dominio.com"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* DDD */}
                                <div>
                                    <label htmlFor="ddd" className="block mb-1 text-sm font-medium text-slate-300 flex items-center gap-1">
                                        <MdPhone size={16} /> DDD:
                                    </label>
                                    <input
                                        type="number"
                                        id="ddd"
                                        name="contatoRequestDto.ddd"
                                        value={formData.contatoRequestDto.ddd === 0 ? '' : formData.contatoRequestDto.ddd}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, ddd: parseInt(e.target.value, 10) || 0 }
                                        }))}
                                        required
                                        min={11}
                                        max={99}
                                        placeholder="99"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* DDI */}
                                <div>
                                    <label htmlFor="ddi" className="block mb-1 text-sm font-medium text-slate-300 flex items-center gap-1">
                                        <MdPhone size={16} /> DDI:
                                    </label>
                                    <input
                                        type="number"
                                        id="ddi"
                                        name="contatoRequestDto.ddi"
                                        value={formData.contatoRequestDto.ddi === 0 ? '' : formData.contatoRequestDto.ddi}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, ddi: parseInt(e.target.value, 10) || 0 }
                                        }))}
                                        required
                                        min={1}
                                        max={999}
                                        placeholder="55"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Telefone 1 */}
                                <div className="md:col-span-2">
                                    <label htmlFor="telefone1" className="block mb-1 flex items-center gap-1">
                                        <MdPhone size={16} /> Telefone 1:
                                    </label>
                                    <input
                                        type="text"
                                        id="telefone1"
                                        name="contatoRequestDto.telefone1"
                                        value={formData.contatoRequestDto.telefone1}
                                        onChange={handleChange}
                                        required
                                        maxLength={20}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Telefone 2 (opcional) */}
                                <div>
                                    <label htmlFor="telefone2" className="block mb-1 text-sm font-medium text-slate-300 flex items-center gap-1">
                                        <MdPhone size={16} /> Telefone 2:
                                    </label>
                                    <input
                                        type="text"
                                        id="telefone2"
                                        name="contatoRequestDto.telefone2"
                                        value={formData.contatoRequestDto.telefone2 || ''}
                                        onChange={handleChange}
                                        maxLength={20}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Telefone 3 (opcional) */}
                                <div>
                                    <label htmlFor="telefone3" className="block mb-1 text-sm font-medium text-slate-300 flex items-center gap-1">
                                        <MdPhone size={16} /> Telefone 3:
                                    </label>
                                    <input
                                        type="text"
                                        id="telefone3"
                                        name="contatoRequestDto.telefone3"
                                        value={formData.contatoRequestDto.telefone3 || ''}
                                        onChange={handleChange}
                                        maxLength={20}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Outro Contato (opcional) */}
                                <div className="md:col-span-2">
                                    <label htmlFor="outro" className="block mb-1 flex items-center gap-1">
                                        <MdInfo size={16} /> Outro Contato:
                                    </label>
                                    <textarea
                                        id="outro"
                                        name="contatoRequestDto.outro"
                                        rows={2}
                                        value={formData.contatoRequestDto.outro || ''}
                                        onChange={handleChange}
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                {/* CEP */}
                                <div>
                                    <label htmlFor="cep" className="block mb-1 flex items-center gap-1">
                                        <MapPin size={16} /> CEP:
                                    </label>
                                    <IMaskInput
                                        id="cep"
                                        name="enderecoRequestDto.cep"
                                        mask="00000-000"
                                        unmask={false}
                                        value={formData.enderecoRequestDto.cep}
                                        onAccept={handleCepChange}
                                        required
                                        placeholder="00000-000"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Número da Casa */}
                                <div>
                                    <label htmlFor="numero" className="block mb-1 flex items-center gap-1">
                                        <MdHome size={16} /> Número:
                                    </label>
                                    <input
                                        type="number"
                                        id="numero"
                                        name="enderecoRequestDto.numero"
                                        value={formData.enderecoRequestDto.numero === 0 ? '' : formData.enderecoRequestDto.numero}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            enderecoRequestDto: { ...prev.enderecoRequestDto, numero: parseInt(e.target.value, 10) || 0 }
                                        }))}
                                        required
                                        min={1}
                                        max={9999999}
                                        placeholder="123"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Complemento (opcional) */}
                                <div>
                                    <label htmlFor="complemento" className="block mb-1 flex items-center gap-1">
                                        <MdHome size={16} /> Complemento:
                                    </label>
                                    <input
                                        type="text"
                                        id="complemento"
                                        name="enderecoRequestDto.complemento"
                                        value={formData.enderecoRequestDto.complemento || ''}
                                        onChange={handleChange}
                                        maxLength={60}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Observação (opcional) */}
                                <div className="md:col-span-3">
                                    <label htmlFor="observacaoEndereco" className="block mb-1 flex items-center gap-1">
                                        <Text size={16} /> Observação (Endereço):
                                    </label>
                                    <textarea
                                        id="observacaoEndereco"
                                        name="enderecoRequestDto.observacao"
                                        rows={2}
                                        value={formData.enderecoRequestDto.observacao || ''}
                                        onChange={handleChange}
                                        maxLength={200}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading || isFetching ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading || isFetching}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/clientes/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\buscar\page.tsx   |   componente BuscarClientesPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/buscar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdErrorOutline, MdEdit, MdDelete, MdFilterList, MdInfo, MdCalendarToday } from 'react-icons/md';
import { User, Mail, MapPin, Edit3, Trash2, Hash, Search as SearchIcon, Filter, Briefcase, CheckCircle } from 'lucide-react';

// Interfaces dos DTOs e Filtro
import { ClienteResponseDto, ClienteFilter } from '@/types/cliente';
import { ClienteService } from '@/utils/api';

export default function BuscarClientesPage() {
    const [clientes, setClientes] = useState<ClienteResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(false); // Para controlar o estado de busca
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false); // Para indicar se uma busca foi realizada

    // Estado para os filtros (corresponde a ClienteFilter.java)
    const [filter, setFilter] = useState<ClienteFilter>({
        nome: '',
        sobrenome: '',
        cpf: '',
        sexo: undefined,
        profissao: '',
        estadoCivil: undefined,
        dataCadastroInicio: '',
        dataCadastroFim: '',
        dataNascimentoInicio: '',
        dataNascimentoFim: '',
        enderecoCidade: '',
        enderecoEstado: '',
        contatoEmail: '',
        contatoCelular: '',
        veiculoPlaca: '',
        veiculoModelo: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Handler para mudanças nos inputs de filtro
    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    // Função para buscar os clientes da API com filtros
    const handleSearch = async (e: FormEvent) => {
        e.preventDefault();

        setIsLoading(true);
        setError(null);
        setClientes([]); // Limpa resultados anteriores
        setHasSearched(true); // Marca que uma busca foi realizada

        try {
            // Chama o serviço com os parâmetros de filtro
            const data = await ClienteService.getAll(filter);
            setClientes(data);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar clientes. Tente novamente.');
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async (id: number, nomeCliente: string) => {
        if (window.confirm(`Tem certeza que deseja deletar o cliente "${nomeCliente}" (ID: ${id})?`)) {
            setIsLoading(true); // Mostra loading
            setError(null); // Limpa erro anterior
            try {
                await ClienteService.delete(id);
                // Se a busca foi realizada, remove o item da lista de resultados também
                setClientes(prev => prev.filter(c => c.idCliente !== id));
                alert(`Cliente "${nomeCliente}" (ID: ${id}) deletado com sucesso!`); // Feedback simples
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar cliente.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="clientes-buscar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center">
                    <SearchIcon size={30} className="text-sky-400" /> Buscar Clientes
                </h1>

                {/* Formulário de Filtros Avançados */}
                <form onSubmit={handleSearch} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label htmlFor="nome" className="text-sm text-slate-300 block mb-1">Nome:</label>
                        <input type="text" id="nome" name="nome" value={filter.nome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome do cliente" />
                    </div>
                    <div>
                        <label htmlFor="sobrenome" className="text-sm text-slate-300 block mb-1">Sobrenome:</label>
                        <input type="text" id="sobrenome" name="sobrenome" value={filter.sobrenome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Sobrenome do cliente" />
                    </div>
                    <div>
                        <label htmlFor="cpf" className="text-sm text-slate-300 block mb-1">CPF:</label>
                        <input type="text" id="cpf" name="cpf" value={filter.cpf} onChange={handleFilterChange} maxLength={11} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Apenas números" />
                    </div>
                    <div>
                        <label htmlFor="sexo" className="text-sm text-slate-300 block mb-1">Sexo:</label>
                        <select id="sexo" name="sexo" value={filter.sexo} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white min-w-[100px]">
                            <option value="">Todos</option>
                            <option value="M">Masculino</option>
                            <option value="H">Feminino</option>
                        </select>
                    </div>
                    <div>
                        <label htmlFor="profissao" className="text-sm text-slate-300 block mb-1">Profissão:</label>
                        <input type="text" id="profissao" name="profissao" value={filter.profissao} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Profissão" />
                    </div>
                    <div>
                        <label htmlFor="estadoCivil" className="text-sm text-slate-300 block mb-1">Estado Civil:</label>
                        <select id="estadoCivil" name="estadoCivil" value={filter.estadoCivil} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white min-w-[150px]">
                            <option value="">Todos</option>
                            <option value="Solteiro">Solteiro</option>
                            <option value="Casado">Casado</option>
                            <option value="Divorciado">Divorciado</option>
                            <option value="Viúvo">Viúvo</option>
                            <option value="Separado">Separado</option>
                            <option value="União Estável">União Estável</option>
                        </select>
                    </div>
                    <div>
                        <label htmlFor="dataNascimentoInicio" className="text-sm text-slate-300 block mb-1">Nasc. (Início):</label>
                        <input type="date" id="dataNascimentoInicio" name="dataNascimentoInicio" value={filter.dataNascimentoInicio} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix" />
                    </div>
                    <div>
                        <label htmlFor="dataNascimentoFim" className="text-sm text-slate-300 block mb-1">Nasc. (Fim):</label>
                        <input type="date" id="dataNascimentoFim" name="dataNascimentoFim" value={filter.dataNascimentoFim} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix" />
                    </div>
                    <div>
                        <label htmlFor="enderecoCidade" className="text-sm text-slate-300 block mb-1">Cidade (End.):</label>
                        <input type="text" id="enderecoCidade" name="enderecoCidade" value={filter.enderecoCidade} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Cidade do endereço" />
                    </div>
                    <div>
                        <label htmlFor="contatoEmail" className="text-sm text-slate-300 block mb-1">Email (Contato):</label>
                        <input type="email" id="contatoEmail" name="contatoEmail" value={filter.contatoEmail} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Email do contato" />
                    </div>
                    <div>
                        <label htmlFor="veiculoPlaca" className="text-sm text-slate-300 block mb-1">Placa (Veículo):</label>
                        <input type="text" id="veiculoPlaca" name="veiculoPlaca" value={filter.veiculoPlaca} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Placa do veículo associado" />
                    </div>
                    <div className="md:col-span-3 flex justify-center">
                        <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                            <SearchIcon size={20} /> Buscar Clientes
                        </button>
                    </div>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Buscando clientes...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Resultados da Busca */}
                {!isLoading && hasSearched && clientes.length === 0 && !error && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhum cliente encontrado para os critérios informados.</p>
                )}
                {!isLoading && clientes.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">CPF</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.map((cliente) => (
                                <tr key={cliente.idCliente} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{cliente.idCliente}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{`${cliente.nome} ${cliente.sobrenome}`}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{cliente.cpf}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{cliente.contatoResponseDto?.email || '-'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{`${cliente.enderecoResponseDto?.cidade || '-'} / ${cliente.enderecoResponseDto?.estado || '-'}`}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/clientes/alterar/${cliente.idCliente}`}>
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(cliente.idCliente, `${cliente.nome} ${cliente.sobrenome}`)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\cadastrar\page.tsx   |   componente CadastrarClientePage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import {
    MdPersonAddAlt1, MdPerson, MdBadge, MdCalendarToday, MdWork, MdPhone, MdEmail, MdLocationOn, MdHome,
    MdErrorOutline, MdCheckCircle, MdInfo // Adicionando MdInfo para sexo
} from 'react-icons/md';
import { User, Mail, MapPin, Tag, Calendar, Briefcase } from 'lucide-react'; // Ícones Lucide

// Interfaces dos DTOs
import { ClienteRequestDto, EnderecoRequestDto, ContatoRequestDto } from '@/types/cliente';
import { ClienteService } from '@/utils/api';

// Função auxiliar para limpar máscaras (remover não-dígitos)
const cleanMaskedValue = (value: string): string => value.replace(/\D/g, '');

export default function CadastrarClientePage() {
    // --- Estados Iniciais ---
    const today = new Date().toISOString().split('T')[0];
    const initialState = {
        tipoCliente: "PF",
        nome: "",
        sobrenome: "",
        sexo: "M" as ClienteRequestDto['sexo'], // Explicitamente tipado
        dataNascimento: "",
        cpf: "", // CPF já é um campo no DTO
        profissao: "",
        estadoCivil: "Solteiro" as ClienteRequestDto['estadoCivil'], // Explicitamente tipado

        // Endereço aninhado
        enderecoRequestDto: {
            cep: "",
            numero: 0,
            complemento: "",
            observacao: "",
        },
        // Contato aninhado
        contatoRequestDto: {
            email: "",
            ddd: 0, // Padrão, pode ser ajustado
            ddi: 55, // Padrão para Brasil
            telefone1: "",
            telefone2: "",
            telefone3: "",
            celular: "",
            outro: "",
            observacao: "",
        },
    };

    // --- Variáveis de Estado ---
    const [formData, setFormData] = useState<ClienteRequestDto>({
        sexo: initialState.sexo,
        nome: initialState.nome,
        sobrenome: initialState.sobrenome,
        dataNascimento: initialState.dataNascimento,
        cpf: initialState.cpf,
        profissao: initialState.profissao,
        estadoCivil: initialState.estadoCivil,
        enderecoRequestDto: { ...initialState.enderecoRequestDto },
        contatoRequestDto: { ...initialState.contatoRequestDto },
    });

    // Para o tipo de documento (não está no DTO, apenas para controle do formulário)
    const [tipoDocumentoDisplay, setTipoDocumentoDisplay] = useState("CPF"); // 'CPF' | 'CNPJ'

    // Feedback da API
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // --- Limpa o formulário ---
    const resetForm = () => {
        setFormData({ ...initialState });
        setTipoDocumentoDisplay("CPF");
        setError(null);
    };

    // --- Envia para API ---
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        // Limpeza e conversão de valores
        const clienteDataToSend: ClienteRequestDto = {
            ...formData,
            cpf: cleanMaskedValue(formData.cpf), // Limpa o CPF
            contatoRequestDto: {
                ...formData.contatoRequestDto,
                celular: cleanMaskedValue(formData.contatoRequestDto.celular),
                // DDI e DDD já são números ou tratados como tal
            },
            enderecoRequestDto: {
                ...formData.enderecoRequestDto,
                cep: cleanMaskedValue(formData.enderecoRequestDto.cep),
                numero: parseInt(formData.enderecoRequestDto.numero.toString(), 10), // Garante que numero é um number
            }
        };

        console.log('Salvando cliente:', JSON.stringify(clienteDataToSend, null, 2));

        try {
            const response = await ClienteService.create(clienteDataToSend);
            setSuccess(`✅ Cliente "${response.nome} ${response.sobrenome}" (ID: ${response.idCliente}) cadastrado com sucesso!`);
            resetForm();
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(`❌ ${err.response?.data?.message || err.message || 'Falha ao cadastrar cliente.'}`);
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    // --- Busca CEP via ViaCEP (com o backend Java) ---
    // A chamada real à ViaCEP é feita pelo EnderecoService no backend.
    // No frontend, ao mudar o CEP, apenas atualizamos o campo e os campos derivados são preenchidos após a criação/atualização no backend.
    // Se você quiser preencher logradouro, bairro, cidade, estado no frontend ANTES de enviar para o backend,
    // precisaria de um serviço de frontend para a ViaCEP, ou um endpoint proxy no backend.
    // Por agora, vamos apenas garantir que o CEP é enviado corretamente e que o backend fará o resto.
    const handleCepChange = async (value: string) => {
        const maskedCep = value;
        const newCep = cleanMaskedValue(maskedCep);

        setFormData(prev => ({
            ...prev,
            enderecoRequestDto: {
                ...prev.enderecoRequestDto,
                cep: maskedCep // Guarda o CEP formatado no estado
            }
        }));

        // Nota: Campos como logradouro, bairro, cidade, estado não são preenchidos aqui no frontend
        // ao digitar o CEP, pois o backend é quem consome a ViaCEP.
        // Eles aparecerão na tela de alteração/detalhes após o cadastro.
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    return (
        <>
            <NavBar active="clientes-cadastrar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center flex items-center justify-center">
                        <MdPersonAddAlt1 className="inline-block mr-2 text-3xl" />
                        Cadastrar Cliente
                    </h2>

                    {error && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500" role="alert">
                            <span className="block sm:inline">{error}</span>
                            <button
                                type="button"
                                className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200"
                                onClick={() => setError(null)}
                                aria-label="Fechar"
                            >
                                <span className="text-2xl">&times;</span>
                            </button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit}>
                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Nome */}
                                <div>
                                    <label htmlFor="nome" className="block mb-1 flex items-center gap-1">
                                        <User size={16} /> Nome:
                                    </label>
                                    <input
                                        id="nome"
                                        type="text"
                                        name="nome"
                                        value={formData.nome}
                                        onChange={handleChange}
                                        required
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Sobrenome */}
                                <div>
                                    <label htmlFor="sobrenome" className="block mb-1 flex items-center gap-1">
                                        <User size={16} /> Sobrenome:
                                    </label>
                                    <input
                                        id="sobrenome"
                                        type="text"
                                        name="sobrenome"
                                        value={formData.sobrenome}
                                        onChange={handleChange}
                                        required
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Sexo */}
                                <div>
                                    <label htmlFor="sexo" className="block mb-1 flex items-center gap-1">
                                        <MdInfo size={16} /> Sexo:
                                    </label>
                                    <select
                                        id="sexo"
                                        name="sexo"
                                        value={formData.sexo}
                                        onChange={handleChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    >
                                        <option value="M">Masculino</option>
                                        <option value="H">Feminino</option>
                                    </select>
                                </div>
                                {/* Data de Nascimento */}
                                <div>
                                    <label htmlFor="dataNascimento" className="block mb-1 flex items-center gap-1">
                                        <Calendar size={16} /> Nascimento:
                                    </label>
                                    <input
                                        type="date"
                                        id="dataNascimento"
                                        name="dataNascimento"
                                        value={formData.dataNascimento}
                                        onChange={handleChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 date-input-fix h-10"
                                    />
                                </div>
                                {/* Tipo de Documento (para máscara) */}
                                <div>
                                    <label htmlFor="tipoDocumentoDisplay" className="block mb-1 flex items-center gap-1">
                                        <MdBadge size={16} /> Documento:
                                    </label>
                                    <select
                                        id="tipoDocumentoDisplay"
                                        name="tipoDocumentoDisplay"
                                        value={tipoDocumentoDisplay}
                                        onChange={e => {
                                            setTipoDocumentoDisplay(e.target.value);
                                            setFormData(prev => ({ ...prev, cpf: '' })); // Limpa o CPF ao mudar o tipo
                                        }}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    >
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>
                                {/* Número do Documento (CPF) */}
                                <div>
                                    <label htmlFor="cpf" className="block mb-1 flex items-center gap-1">
                                        <MdBadge size={16} /> Número:
                                    </label>
                                    <IMaskInput
                                        id="cpf"
                                        name="cpf"
                                        mask={tipoDocumentoDisplay === 'CPF' ? cpfMask : cnpjMask}
                                        unmask={false}
                                        value={formData.cpf}
                                        onAccept={(value: string) => setFormData(prev => ({ ...prev, cpf: value }))}
                                        required
                                        placeholder={tipoDocumentoDisplay === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Profissão */}
                                <div>
                                    <label htmlFor="profissao" className="block mb-1 flex items-center gap-1">
                                        <Briefcase size={16} /> Profissão:
                                    </label>
                                    <input
                                        type="text"
                                        id="profissao"
                                        name="profissao"
                                        value={formData.profissao}
                                        onChange={handleChange}
                                        required
                                        maxLength={50}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Estado Civil */}
                                <div>
                                    <label htmlFor="estadoCivil" className="block mb-1 flex items-center gap-1">
                                        <MdInfo size={16} /> Estado Civil:
                                    </label>
                                    <select
                                        id="estadoCivil"
                                        name="estadoCivil"
                                        value={formData.estadoCivil}
                                        onChange={handleChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    >
                                        <option value="Solteiro">Solteiro</option>
                                        <option value="Casado">Casado</option>
                                        <option value="Divorciado">Divorciado</option>
                                        <option value="Viúvo">Viúvo</option>
                                        <option value="Separado">Separado</option>
                                        <option value="União Estável">União Estável</option>
                                    </select>
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Celular */}
                                <div>
                                    <label htmlFor="celular" className="block mb-1 flex items-center gap-1">
                                        <MdPhone size={16} /> Celular:
                                    </label>
                                    <IMaskInput
                                        id="celular"
                                        name="contatoRequestDto.celular" // Nome do campo no DTO aninhado
                                        mask="(00) 00000-0000"
                                        unmask={false}
                                        value={formData.contatoRequestDto.celular}
                                        onAccept={(value: string) => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, celular: value }
                                        }))}
                                        required
                                        placeholder="(99) 99999-9999"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* E-mail */}
                                <div>
                                    <label htmlFor="email" className="block mb-1 flex items-center gap-1">
                                        <Mail size={16} /> E-mail:
                                    </label>
                                    <input
                                        type="email"
                                        id="email"
                                        name="contatoRequestDto.email" // Nome do campo no DTO aninhado
                                        value={formData.contatoRequestDto.email}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, email: e.target.value }
                                        }))}
                                        required
                                        placeholder="exemplo@dominio.com"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* DDD */}
                                <div>
                                    <label htmlFor="ddd" className="block mb-1 text-sm font-medium text-slate-300 flex items-center gap-1">
                                        <MdPhone size={16} /> DDD:
                                    </label>
                                    <input
                                        type="number"
                                        id="ddd"
                                        name="contatoRequestDto.ddd"
                                        value={formData.contatoRequestDto.ddd === 0 ? '' : formData.contatoRequestDto.ddd}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, ddd: parseInt(e.target.value, 10) || 0 }
                                        }))}
                                        required
                                        min={11}
                                        max={99}
                                        placeholder="99"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* DDI */}
                                <div>
                                    <label htmlFor="ddi" className="block mb-1 text-sm font-medium text-slate-300 flex items-center gap-1">
                                        <MdPhone size={16} /> DDI:
                                    </label>
                                    <input
                                        type="number"
                                        id="ddi"
                                        name="contatoRequestDto.ddi"
                                        value={formData.contatoRequestDto.ddi === 0 ? '' : formData.contatoRequestDto.ddi}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, ddi: parseInt(e.target.value, 10) || 0 }
                                        }))}
                                        required
                                        min={1}
                                        max={999}
                                        placeholder="55"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Telefone 1 */}
                                <div className="md:col-span-2">
                                    <label htmlFor="telefone1" className="block mb-1 flex items-center gap-1">
                                        <MdPhone size={16} /> Telefone 1:
                                    </label>
                                    <input
                                        type="text"
                                        id="telefone1"
                                        name="contatoRequestDto.telefone1"
                                        value={formData.contatoRequestDto.telefone1}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, telefone1: e.target.value }
                                        }))}
                                        required
                                        maxLength={20}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Telefone 2 (opcional) */}
                                <div>
                                    <label htmlFor="telefone2" className="block mb-1 text-sm font-medium text-slate-300 flex items-center gap-1">
                                        <MdPhone size={16} /> Telefone 2:
                                    </label>
                                    <input
                                        type="text"
                                        id="telefone2"
                                        name="contatoRequestDto.telefone2"
                                        value={formData.contatoRequestDto.telefone2 || ''}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, telefone2: e.target.value }
                                        }))}
                                        maxLength={20}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Telefone 3 (opcional) */}
                                <div>
                                    <label htmlFor="telefone3" className="block mb-1 text-sm font-medium text-slate-300 flex items-center gap-1">
                                        <MdPhone size={16} /> Telefone 3:
                                    </label>
                                    <input
                                        type="text"
                                        id="telefone3"
                                        name="contatoRequestDto.telefone3"
                                        value={formData.contatoRequestDto.telefone3 || ''}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, telefone3: e.target.value }
                                        }))}
                                        maxLength={20}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Outro Contato (opcional) */}
                                <div className="md:col-span-2">
                                    <label htmlFor="outro" className="block mb-1 flex items-center gap-1">
                                        <MdInfo size={16} /> Outro Contato:
                                    </label>
                                    <textarea
                                        id="outro"
                                        name="contatoRequestDto.outro"
                                        rows={2}
                                        value={formData.contatoRequestDto.outro || ''}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            contatoRequestDto: { ...prev.contatoRequestDto, outro: e.target.value }
                                        }))}
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                {/* CEP */}
                                <div>
                                    <label htmlFor="cep" className="block mb-1 flex items-center gap-1">
                                        <MapPin size={16} /> CEP:
                                    </label>
                                    <IMaskInput
                                        id="cep"
                                        name="enderecoRequestDto.cep" // Nome do campo no DTO aninhado
                                        mask="00000-000"
                                        unmask={false} // Mantém a máscara para o usuário, mas envia o valor sem máscara
                                        value={formData.enderecoRequestDto.cep}
                                        onAccept={value => setFormData(prev => ({
                                            ...prev,
                                            enderecoRequestDto: { ...prev.enderecoRequestDto, cep: value }
                                        }))}
                                        required
                                        placeholder="00000-000"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Número da Casa */}
                                <div>
                                    <label htmlFor="numero" className="block mb-1 flex items-center gap-1">
                                        <MdHome size={16} /> Número:
                                    </label>
                                    <input
                                        type="number" // Usar number para números
                                        id="numero"
                                        name="enderecoRequestDto.numero"
                                        value={formData.enderecoRequestDto.numero === 0 ? '' : formData.enderecoRequestDto.numero}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            enderecoRequestDto: { ...prev.enderecoRequestDto, numero: parseInt(e.target.value, 10) || 0 }
                                        }))}
                                        required
                                        min={1}
                                        max={9999999}
                                        placeholder="123"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Complemento (opcional) */}
                                <div>
                                    <label htmlFor="complemento" className="block mb-1 flex items-center gap-1">
                                        <MdHome size={16} /> Complemento:
                                    </label>
                                    <input
                                        type="text"
                                        id="complemento"
                                        name="enderecoRequestDto.complemento"
                                        value={formData.enderecoRequestDto.complemento || ''}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            enderecoRequestDto: { ...prev.enderecoRequestDto, complemento: e.target.value }
                                        }))}
                                        maxLength={60}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Observação (opcional) */}
                                <div className="md:col-span-3">
                                    <label htmlFor="observacaoEndereco" className="block mb-1 flex items-center gap-1">
                                        <Text size={16} /> Observação (Endereço):
                                    </label>
                                    <textarea
                                        id="observacaoEndereco"
                                        name="enderecoRequestDto.observacao"
                                        rows={2}
                                        value={formData.enderecoRequestDto.observacao || ''}
                                        onChange={e => setFormData(prev => ({
                                            ...prev,
                                            enderecoRequestDto: { ...prev.enderecoRequestDto, observacao: e.target.value }
                                        }))}
                                        maxLength={200}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                                {/* Campos da ViaCEP (apenas para exibição ou para carregar o formulário após o backend preencher) */}
                                {/* Não são inputs aqui, mas seriam campos de exibição se fosse busca de CEP em tempo real */}
                                {/* <p><strong>Logradouro:</strong> {formData.enderecoRequestDto.logradouro || 'Preenchido pelo CEP'}</p> */}
                                {/* ... Outros campos da ViaCEP ... */}
                            </div>
                        </fieldset>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Cliente'}
                            </button>
                            <Link href="/clientes/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\deletar\page.tsx   |   componente DeletarClientePage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/deletar/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdPeopleAlt, MdInfoOutline } from 'react-icons/md';
import { Trash2, AlertCircle, Loader2 } from 'lucide-react';

// Interfaces dos DTOs
import { ClienteResponseDto } from '@/types/cliente';
import { ClienteService } from '@/utils/api';

export default function DeletarClientePage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [clienteInfo, setClienteInfo] = useState<ClienteResponseDto | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true); // Para carregar os dados do cliente a ser deletado
    const [isDeleting, setIsDeleting] = useState(false); // Para o estado de deleção (excluindo...)
    const [error, setError] = useState<string | null>(null);

    // Função para formatar a data para exibição
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Efeito para buscar os dados do cliente para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID do cliente não fornecido na URL.");
            setIsLoadingInfo(false);
            return;
        }
        const fetchClienteData = async () => {
            setIsLoadingInfo(true);
            setError(null); // Limpa erros anteriores
            try {
                const data: ClienteResponseDto = await ClienteService.getById(id);
                setClienteInfo(data);
            } catch (err: any) {
                // Se for 404, indica que o recurso não foi encontrado (talvez já deletado)
                if (err.response && err.response.status === 404) {
                    setError(`Cliente com ID ${id} não encontrado(a) ou já foi excluído(a).`);
                } else {
                    setError(err.response?.data?.message || err.message || "Falha ao carregar dados do cliente para exclusão.");
                }
                console.error("Erro detalhado no fetch de deleção:", err);
                setClienteInfo(null); // Garante que o info esteja vazio em caso de erro
            } finally {
                setIsLoadingInfo(false);
            }
        };
        fetchClienteData();
    }, [id]);

    // Handler para confirmar a deleção
    const handleConfirmDelete = async () => {
        if (id === null || !clienteInfo) {
            setError("Não é possível excluir: ID inválido ou dados do cliente não carregados.");
            return;
        }
        setIsDeleting(true);
        setError(null);

        try {
            await ClienteService.delete(id);
            console.log(`Cliente ID ${id} excluído com sucesso.`);
            router.push('/clientes/listar?deleted=true');
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || "Falha ao excluir cliente.");
            console.error("Erro detalhado na deleção:", err);
        } finally {
            setIsDeleting(false);
        }
    };

    // Handler para cancelar a deleção (volta para a lista)
    const handleCancel = () => {
        router.push('/clientes/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="clientes-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-center text-sky-300 py-10 text-xl flex items-center gap-2">
                        <Loader2 className="h-6 w-6 animate-spin" /> Carregando dados para confirmação...
                    </p>
                </main>
            </>
        );
    }

    if (error && !clienteInfo) {
        return (
            <>
                <NavBar active="clientes-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" /> Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="clientes-deletar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o cliente abaixo? Esta ação não pode ser desfeita.</p>

                    {clienteInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID do Cliente:</strong> {clienteInfo.idCliente}</p>
                            <p><strong>Nome Completo:</strong> {`${clienteInfo.nome} ${clienteInfo.sobrenome}`}</p>
                            <p><strong>CPF:</strong> {clienteInfo.cpf}</p>
                            <p><strong>Email:</strong> {clienteInfo.contatoResponseDto?.email || '-'}</p>
                            <p><strong>Cidade/UF:</strong> {`${clienteInfo.enderecoResponseDto?.cidade || '-'} / ${clienteInfo.enderecoResponseDto?.estado || '-'}`}</p>
                        </div>
                    )}

                    {error && (
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever size={20} /> Sim, Excluir</>)}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel size={20} /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\clientes\listar\page.tsx   |   componente ListarClientesPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/listar/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { ClienteService } from '@/utils/api'; // Importe o serviço de Cliente
import NavBar from '@/components/nav-bar';
import {
    MdList, MdAdd, MdSearch, MdErrorOutline, MdEdit, MdDelete,
    MdFilterList, MdCalendarToday, MdInfo, MdCheckCircle, MdPeopleAlt, MdPersonAdd
} from 'react-icons/md';
import { User, Mail, MapPin, Edit3, Trash2, Hash, Search as SearchIcon, Filter } from 'lucide-react';

// Interfaces dos DTOs e Filtro
import { ClienteResponseDto, ClienteFilter } from '@/types/cliente';

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    // Estado para os filtros
    const [filter, setFilter] = useState<ClienteFilter>({
        nome: '',
        sobrenome: '',
        cpf: '',
        sexo: undefined, // 'M' | 'H'
        profissao: '',
        estadoCivil: undefined, // Enum
        dataCadastroInicio: '',
        dataCadastroFim: '',
        dataNascimentoInicio: '',
        dataNascimentoFim: '',
        enderecoCidade: '',
        enderecoEstado: '',
        contatoEmail: '',
        contatoCelular: '',
        veiculoPlaca: '',
        veiculoModelo: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Função para buscar os clientes da API com filtros
    const fetchClientes = async (e?: FormEvent) => {
        if (e) e.preventDefault();

        setIsLoading(true);
        setError(null);
        setSuccessMessage(null);

        try {
            const data = await ClienteService.getAll(filter);
            setClientes(data);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao carregar clientes. Tente novamente.');
            console.error("Erro detalhado:", err);
            setClientes([]);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchClientes();
    }, []);

    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    const handleDelete = async (id: number, nomeCliente: string) => {
        if (window.confirm(`Tem certeza que deseja deletar o cliente "${nomeCliente}" (ID: ${id})?`)) {
            setIsLoading(true);
            setError(null);
            try {
                await ClienteService.delete(id);
                setSuccessMessage(`Cliente "${nomeCliente}" (ID: ${id}) deletado com sucesso!`);
                fetchClientes(); // Recarrega a lista
                setTimeout(() => setSuccessMessage(null), 5000);
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar cliente.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="clientes-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left">
                        <MdPeopleAlt className="text-3xl text-sky-400" /> Lista de Clientes
                    </h1>
                    <Link href="/clientes/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                            <MdPersonAdd size={18} /> Novo Cliente
                        </button>
                    </Link>
                </div>

                {/* Formulário de Filtros */}
                <form onSubmit={fetchClientes} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label htmlFor="nome" className="text-sm text-slate-300 block mb-1">Nome:</label>
                        <input
                            type="text"
                            id="nome"
                            name="nome"
                            value={filter.nome}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Parte do nome"
                        />
                    </div>
                    <div>
                        <label htmlFor="cpf" className="text-sm text-slate-300 block mb-1">CPF:</label>
                        <input
                            type="text"
                            id="cpf"
                            name="cpf"
                            value={filter.cpf}
                            onChange={handleFilterChange}
                            maxLength={11}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Apenas números"
                        />
                    </div>
                    <div>
                        <label htmlFor="sexo" className="text-sm text-slate-300 block mb-1">Sexo:</label>
                        <select
                            id="sexo"
                            name="sexo"
                            value={filter.sexo}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white min-w-[100px]"
                        >
                            <option value="">Todos</option>
                            <option value="M">Masculino</option>
                            <option value="H">Feminino</option>
                        </select>
                    </div>
                    <div>
                        <label htmlFor="enderecoCidade" className="text-sm text-slate-300 block mb-1">Cidade (End.):</label>
                        <input
                            type="text"
                            id="enderecoCidade"
                            name="enderecoCidade"
                            value={filter.enderecoCidade}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Cidade do endereço"
                        />
                    </div>
                    <div>
                        <label htmlFor="contatoEmail" className="text-sm text-slate-300 block mb-1">Email (Contato):</label>
                        <input
                            type="email"
                            id="contatoEmail"
                            name="contatoEmail"
                            value={filter.contatoEmail}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Email do contato"
                        />
                    </div>
                    <div>
                        <label htmlFor="veiculoPlaca" className="text-sm text-slate-300 block mb-1">Placa (Veículo):</label>
                        <input
                            type="text"
                            id="veiculoPlaca"
                            name="veiculoPlaca"
                            value={filter.veiculoPlaca}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Placa do veículo associado"
                        />
                    </div>
                    {/* Adicione mais campos de filtro aqui conforme o ClienteFilter.java */}
                    <div className="md:col-span-3 flex justify-center">
                        <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                            <SearchIcon size={20} /> Aplicar Filtros
                        </button>
                    </div>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando clientes...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}
                {successMessage && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-green-400 bg-green-900/50 p-4 pr-10 rounded border border-green-500" role="alert">
                        <MdCheckCircle className="inline mr-2" />{successMessage}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-green-400 hover:text-green-200" onClick={() => setSuccessMessage(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Clientes */}
                {!isLoading && !error && clientes.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhum cliente encontrado para os critérios informados.</p>
                )}
                {!isLoading && clientes.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">CPF</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.map((cliente) => (
                                <tr key={cliente.idCliente} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{cliente.idCliente}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{`${cliente.nome} ${cliente.sobrenome}`}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{cliente.cpf}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{cliente.contatoResponseDto?.email || '-'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{`${cliente.enderecoResponseDto?.cidade || '-'} / ${cliente.enderecoResponseDto?.estado || '-'}`}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/clientes/alterar/${cliente.idCliente}`}> {/* Rota de alteração ajustada */}
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(cliente.idCliente, `${cliente.nome} ${cliente.sobrenome}`)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                        {/* Botão para associar veículos (exemplo, levaria a um modal ou página dedicada) */}
                                        <Link href={`/clientes/associar-veiculo/${cliente.idCliente}`}>
                                            <button className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center gap-1">
                                                <MdInfo size={14} /> Ver Veículos
                                            </button>
                                        </Link>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\inicio\page.tsx   |   componente InicioPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

import NavBar from "@/components/nav-bar";

export default function InicioPage() {
    return (
        <>
            <NavBar active="inicio" />

            {/* --- Modificações aqui --- */}
            <main
                className="flex items-center justify-center min-h-screen text-white bg-cover bg-center bg-no-repeat"
                // Define a imagem de fundo usando valor arbitrário do Tailwind
                // e define uma cor de fundo sólida como fallback caso a imagem não carregue
                style={{
                    backgroundImage: `url('/admin-ajax.png')`, // Caminho para a imagem na pasta public
                    backgroundColor: '#012A46', // Cor de fundo de fallback
                }}
            >
                {/* O conteúdo da seção agora fica sobre a imagem de fundo */}
                <section className="bg-black/50 backdrop-blur-sm max-w-2xl p-8 m-4 rounded-xl text-center"> {/* Ajustei o fundo da seção para melhor contraste */}
                    <h1 className="mb-4 text-4xl font-bold">Bem-vindo à Oficina Virtual</h1>
                    <p className="mb-8 text-lg">
                        Descubra uma nova forma de cuidar do seu veículo com praticidade e eficiência. Experimente nossa plataforma e agende seu serviço online.
                    </p>
                    {/* Você precisa adicionar o texto ou ícone do botão aqui */}
                    <button className="px-6 py-3 font-semibold text-white transition bg-[#075985] rounded-md shadow hover:bg-[#075985]/90">
                        Agendar Serviço {/* Exemplo de texto para o botão */}
                    </button>
                </section>
            </main>
            {/* --- Fim das Modificações --- */}
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\layout.tsx   |   componente RootLayout
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\page.tsx   |   componente HomePage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/page.tsx  (Substitua o conteúdo do seu page.tsx atual por este)
import NavBar from "@/components/nav-bar"; // Corrigido para NavBar

export default function HomePage() { // Renomeado para HomePage por clareza
    return (
        <>
            {/* Verifica se o NavBar está sendo importado corretamente */}
            <NavBar active="inicio" />

            {/* Conteúdo e Estilo da sua página de início original */}
            <main
                className="flex items-center justify-center min-h-screen text-white bg-cover bg-center bg-no-repeat"
                // Define a imagem de fundo
                style={{
                    backgroundImage: `url('/admin-ajax.png')`, // Caminho relativo à pasta /public
                    backgroundColor: '#012A46', // Cor de fundo fallback
                }}
            >
                {/* Conteúdo sobre a imagem */}
                <section className="bg-black/50 backdrop-blur-sm max-w-2xl p-8 m-4 rounded-xl text-center">
                    <h1 className="mb-4 text-4xl font-bold">Bem-vindo à Oficina Virtual</h1>
                    <p className="mb-8 text-lg">
                        Descubra uma nova forma de cuidar do seu veículo com praticidade e eficiência. Experimente nossa plataforma e agende seu serviço online.
                    </p>
                    {/* Verifique se o botão ou link desejado está aqui */}
                    <button className="px-6 py-3 font-semibold text-white transition bg-[#075985] rounded-md shadow hover:bg-[#075985]/90">
                        Agendar Serviço
                    </button>
                </section>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\patio\alterar\[id]\page.tsx   |   componente AlterarPatioPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle, MdLocationOn } from 'react-icons/md';
import { Tag, Calendar, Text, Info, Loader2, AlertCircle } from 'lucide-react';

// Interfaces dos DTOs
import { PatioRequestDto, PatioResponseDto } from '@/types/patio';
import { PatioService } from '@/utils/api';

export default function AlterarPatioPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [formData, setFormData] = useState<PatioRequestDto>({
        nomePatio: '', dataEntrada: '', dataSaida: '', observacao: ''
    });

    const [isLoading, setIsLoading] = useState(false); // Para submissão
    const [isFetching, setIsFetching] = useState(true); // Para carregar dados iniciais
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Função para buscar os dados do pátio ao carregar a página
    useEffect(() => {
        if (!id) {
            setError("ID do pátio não fornecido na URL.");
            setIsFetching(false);
            return;
        }
        const fetchPatioData = async () => {
            setIsFetching(true);
            setError(null);
            try {
                const data: PatioResponseDto = await PatioService.getById(id);
                setFormData({
                    nomePatio: data.nomePatio,
                    dataEntrada: data.dataEntrada,
                    dataSaida: data.dataSaida,
                    observacao: data.observacao || '',
                });
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || "Falha ao carregar dados do pátio.");
                console.error("Erro detalhado no fetch inicial:", err);
            } finally {
                setIsFetching(false);
            }
        };
        fetchPatioData();
    }, [id]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (id === null) {
            setError("ID do pátio inválido para atualização.");
            return;
        }
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        try {
            const updatedPatio: PatioResponseDto = await PatioService.update(id, formData);
            setSuccess(`Pátio "${updatedPatio.nomePatio}" (ID: ${updatedPatio.idPatio}) atualizado com sucesso!`);
            setTimeout(() => {
                setSuccess(null);
                router.push('/patio/listar');
            }, 2000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao atualizar pátio.');
            console.error("Erro detalhado na atualização:", err);
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetching) {
        return (
            <>
                <NavBar active="patio-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados do pátio...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !isFetching && (!formData.nomePatio || formData.nomePatio === '')) {
        return (
            <>
                <NavBar active="patio-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-900 p-8 rounded-lg shadow-xl text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <p className="text-red-400 text-lg mb-6">{error}</p>
                        <Link href="/patio/listar" className="px-6 py-3 bg-sky-600 text-white rounded-md shadow hover:bg-sky-700">Voltar para Lista</Link>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="patio-alterar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdEdit className="text-3xl text-sky-400" /> Alterar Pátio (ID: {id})
                    </h1>

                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div>
                            <label htmlFor="nomePatio" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Tag size={16} /> Nome do Pátio:
                            </label>
                            <input
                                type="text"
                                id="nomePatio"
                                name="nomePatio"
                                value={formData.nomePatio}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Entrada:
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Saída:
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading || isFetching ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading || isFetching}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/patio/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\patio\buscar\page.tsx   |   componente BuscarPatiosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/buscar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdErrorOutline, MdEdit, MdDelete, MdFilterList, MdCalendarToday, MdInfo, MdLocationOn } from 'react-icons/md';
import { Hash, Wrench, Car, Users, Mail, Box, Search as SearchIcon, Filter } from 'lucide-react';

// Interfaces dos DTOs e Filtro
import { PatioResponseDto, PatioFilter } from '@/types/patio';
import { PatioService } from '@/utils/api';

export default function BuscarPatiosPage() {
    const [patios, setPatios] = useState<PatioResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);

    // Estado para os filtros (corresponde a PatioFilter.java)
    const [filter, setFilter] = useState<PatioFilter>({
        nomePatio: '',
        dataEntradaInicio: '',
        dataEntradaFim: '',
        dataSaidaInicio: '',
        dataSaidaFim: '',
        observacao: '',
        veiculoPlaca: '',
        enderecoCidade: '',
        contatoEmail: '',
        zonaNome: '',
        boxNome: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Handler para mudanças nos inputs de filtro
    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    // Função para buscar os pátios da API com filtros
    const handleSearch = async (e: FormEvent) => {
        e.preventDefault();

        setIsLoading(true);
        setError(null);
        setPatios([]);
        setHasSearched(true);

        try {
            const data = await PatioService.getAll(filter);
            setPatios(data);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar pátios. Tente novamente.');
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async (id: number, nomePatio: string) => {
        if (window.confirm(`Tem certeza que deseja deletar o Pátio "${nomePatio}" (ID: ${id})?`)) {
            setIsLoading(true);
            setError(null);
            try {
                await PatioService.delete(id);
                setPatios(prev => prev.filter(p => p.idPatio !== id));
                alert(`Pátio "${nomePatio}" (ID: ${id}) deletado com sucesso!`);
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar pátio.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="patio-buscar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center">
                    <SearchIcon size={30} className="text-sky-400" /> Buscar Pátios
                </h1>

                {/* Formulário de Filtros Avançados */}
                <form onSubmit={handleSearch} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label htmlFor="nomePatio" className="text-sm text-slate-300 block mb-1">Nome Pátio:</label>
                        <input type="text" id="nomePatio" name="nomePatio" value={filter.nomePatio} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome do pátio" />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaInicio" className="text-sm text-slate-300 block mb-1">Entrada (Início):</label>
                        <input type="date" id="dataEntradaInicio" name="dataEntradaInicio" value={filter.dataEntradaInicio} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix" />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaFim" className="text-sm text-slate-300 block mb-1">Entrada (Fim):</label>
                        <input type="date" id="dataEntradaFim" name="dataEntradaFim" value={filter.dataEntradaFim} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix" />
                    </div>
                    {/* Filtros por associação */}
                    <div>
                        <label htmlFor="veiculoPlaca" className="text-sm text-slate-300 block mb-1">Placa Veículo:</label>
                        <input type="text" id="veiculoPlaca" name="veiculoPlaca" value={filter.veiculoPlaca} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Placa de veículo associado" />
                    </div>
                    <div>
                        <label htmlFor="enderecoCidade" className="text-sm text-slate-300 block mb-1">Cidade Endereço:</label>
                        <input type="text" id="enderecoCidade" name="enderecoCidade" value={filter.enderecoCidade} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Cidade de endereço associado" />
                    </div>
                    <div>
                        <label htmlFor="contatoEmail" className="text-sm text-slate-300 block mb-1">Email Contato:</label>
                        <input type="email" id="contatoEmail" name="contatoEmail" value={filter.contatoEmail} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Email de contato associado" />
                    </div>
                    <div>
                        <label htmlFor="zonaNome" className="text-sm text-slate-300 block mb-1">Nome Zona:</label>
                        <input type="text" id="zonaNome" name="zonaNome" value={filter.zonaNome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome de zona associada" />
                    </div>
                    <div>
                        <label htmlFor="boxNome" className="text-sm text-slate-300 block mb-1">Nome Box:</label>
                        <input type="text" id="boxNome" name="boxNome" value={filter.boxNome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome de box associado" />
                    </div>
                    <div className="md:col-span-3 flex justify-center">
                        <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                            <SearchIcon size={20} /> Buscar Pátios
                        </button>
                    </div>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Buscando pátios...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Resultados da Busca */}
                {!isLoading && hasSearched && patios.length === 0 && !error && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhum pátio encontrado para os critérios informados.</p>
                )}
                {!isLoading && patios.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Pátio</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Entrada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Saída</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {patios.map((patio) => (
                                <tr key={patio.idPatio} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{patio.idPatio}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{patio.nomePatio}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(patio.dataEntrada)}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(patio.dataSaida)}</td>
                                    <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={patio.observacao || ''}>{patio.observacao || '-'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/patio/alterar/${patio.idPatio}`}>
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(patio.idPatio, patio.nomePatio)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                        {/* Botão para ver associações */}
                                        <Link href={`/patio/associacoes/${patio.idPatio}`}> {/* Criar esta página depois */}
                                            <button className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center gap-1">
                                                <MdInfo size={14} /> Associações
                                            </button>
                                        </Link>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\patio\cadastrar\page.tsx   |   componente CadastrarPatioPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdAddCircleOutline, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle, MdLocationOn // Ícone de pátio
} from 'react-icons/md';
import { Tag, Calendar, Text, Info } from 'lucide-react';

// Interfaces dos DTOs
import { PatioRequestDto, PatioResponseDto } from '@/types/patio';
import { PatioService } from '@/utils/api';

export default function CadastrarPatioPage() {
    const today = new Date().toISOString().split('T')[0];

    const initialState: PatioRequestDto = {
        nomePatio: '',
        dataEntrada: today,
        dataSaida: today,
        observacao: '',
    };

    const [formData, setFormData] = useState<PatioRequestDto>(initialState);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        try {
            const createdPatio: PatioResponseDto = await PatioService.create(formData);
            setSuccess(`Pátio "${createdPatio.nomePatio}" (ID: ${createdPatio.idPatio}) cadastrado com sucesso!`);
            setFormData(initialState);
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao cadastrar pátio.');
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="patio-cadastrar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdAddCircleOutline className="text-3xl text-sky-400" /> Novo Pátio
                    </h1>

                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div>
                            <label htmlFor="nomePatio" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Tag size={16} /> Nome do Pátio:
                            </label>
                            <input
                                type="text"
                                id="nomePatio"
                                name="nomePatio"
                                value={formData.nomePatio}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Entrada:
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Saída:
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Pátio'}
                            </button>
                            <Link href="/patio/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\patio\deletar\page.tsx   |   componente DeletarPatioPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/deletar/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdLocationOn } from 'react-icons/md';
import { Trash2, AlertCircle, Loader2 } from 'lucide-react';

// Interfaces dos DTOs
import { PatioResponseDto } from '@/types/patio';
import { PatioService } from '@/utils/api';

export default function DeletarPatioPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [patioInfo, setPatioInfo] = useState<PatioResponseDto | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true); // Para carregar os dados do pátio a ser deletado
    const [isDeleting, setIsDeleting] = useState(false); // Para o estado de deleção (excluindo...)
    const [error, setError] = useState<string | null>(null);

    // Função para formatar a data para exibição
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Efeito para buscar os dados do pátio para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID do pátio não fornecido na URL.");
            setIsLoadingInfo(false);
            return;
        }
        const fetchPatioData = async () => {
            setIsLoadingInfo(true);
            setError(null);
            try {
                const data: PatioResponseDto = await PatioService.getById(id);
                setPatioInfo(data);
            } catch (err: any) {
                if (err.response && err.response.status === 404) {
                    setError(`Pátio com ID ${id} não encontrado(a) ou já foi excluído(a).`);
                } else {
                    setError(err.response?.data?.message || err.message || "Falha ao carregar dados do pátio para exclusão.");
                }
                console.error("Erro detalhado no fetch de deleção:", err);
                setPatioInfo(null);
            } finally {
                setIsLoadingInfo(false);
            }
        };
        fetchPatioData();
    }, [id]);

    // Handler para confirmar a deleção
    const handleConfirmDelete = async () => {
        if (id === null || !patioInfo) {
            setError("Não é possível excluir: ID inválido ou dados do pátio não carregados.");
            return;
        }
        setIsDeleting(true);
        setError(null);

        try {
            await PatioService.delete(id);
            console.log(`Pátio ID ${id} excluído com sucesso.`);
            router.push('/patio/listar?deleted=true');
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || "Falha ao excluir pátio.");
            console.error("Erro detalhado na deleção:", err);
        } finally {
            setIsDeleting(false);
        }
    };

    // Handler para cancelar a deleção (volta para a lista)
    const handleCancel = () => {
        router.push('/patio/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="patio-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-center text-sky-300 py-10 text-xl flex items-center gap-2">
                        <Loader2 className="h-6 w-6 animate-spin" /> Carregando dados para confirmação...
                    </p>
                </main>
            </>
        );
    }

    if (error && !patioInfo) {
        return (
            <>
                <NavBar active="patio-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" /> Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="patio-deletar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o pátio abaixo? Esta ação não pode ser desfeita.</p>

                    {patioInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID do Pátio:</strong> {patioInfo.idPatio}</p>
                            <p><strong>Nome:</strong> {patioInfo.nomePatio}</p>
                            <p><strong>Data Entrada:</strong> {formatDate(patioInfo.dataEntrada)}</p>
                            <p><strong>Data Saída:</strong> {formatDate(patioInfo.dataSaida)}</p>
                            <p><strong>Observação:</strong> {patioInfo.observacao || '-'}</p>
                        </div>
                    )}

                    {error && (
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever size={20} /> Sim, Excluir</>)}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel size={20} /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\patio\listar\page.tsx   |   componente ListarPatiosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/listar/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { PatioService } from '@/utils/api';
import NavBar from '@/components/nav-bar';
import {
    MdList, MdAdd, MdSearch, MdErrorOutline, MdEdit, MdDelete,
    MdFilterList, MdCalendarToday, MdInfo, MdCheckCircle, MdLocationOn // Para o ícone de pátio
} from 'react-icons/md';
import { Hash, Wrench, Car, Users, Mail, Box } from 'lucide-react'; // Ícones Lucide

// Interfaces dos DTOs e Filtro
import { PatioResponseDto, PatioFilter } from '@/types/patio';

export default function ListarPatiosPage() {
    const [patios, setPatios] = useState<PatioResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    // Estado para os filtros
    const [filter, setFilter] = useState<PatioFilter>({
        nomePatio: '',
        dataEntradaInicio: '',
        dataEntradaFim: '',
        dataSaidaInicio: '',
        dataSaidaFim: '',
        observacao: '',
        veiculoPlaca: '',
        enderecoCidade: '',
        contatoEmail: '',
        zonaNome: '',
        boxNome: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Função para buscar os pátios da API com filtros
    const fetchPatios = async (e?: FormEvent) => {
        if (e) e.preventDefault();

        setIsLoading(true);
        setError(null);
        setSuccessMessage(null);

        try {
            const data = await PatioService.getAll(filter);
            setPatios(data);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao carregar pátios. Tente novamente.');
            console.error("Erro detalhado:", err);
            setPatios([]);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchPatios();
    }, []);

    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    const handleDelete = async (id: number, nomePatio: string) => {
        if (window.confirm(`Tem certeza que deseja deletar o Pátio "${nomePatio}" (ID: ${id})?`)) {
            setIsLoading(true);
            setError(null);
            try {
                await PatioService.delete(id);
                setSuccessMessage(`Pátio "${nomePatio}" (ID: ${id}) deletado com sucesso!`);
                fetchPatios(); // Recarrega a lista
                setTimeout(() => setSuccessMessage(null), 5000);
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar pátio.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="patio-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left">
                        <MdLocationOn className="text-3xl text-sky-400" /> Lista de Pátios
                    </h1>
                    <Link href="/patio/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                            <MdAdd size={18} /> Novo Pátio
                        </button>
                    </Link>
                </div>

                {/* Formulário de Filtros */}
                <form onSubmit={fetchPatios} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label htmlFor="nomePatio" className="text-sm text-slate-300 block mb-1">Nome Pátio:</label>
                        <input
                            type="text"
                            id="nomePatio"
                            name="nomePatio"
                            value={filter.nomePatio}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Nome do pátio"
                        />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaInicio" className="text-sm text-slate-300 block mb-1">Entrada (Início):</label>
                        <input
                            type="date"
                            id="dataEntradaInicio"
                            name="dataEntradaInicio"
                            value={filter.dataEntradaInicio}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"
                        />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaFim" className="text-sm text-slate-300 block mb-1">Entrada (Fim):</label>
                        <input
                            type="date"
                            id="dataEntradaFim"
                            name="dataEntradaFim"
                            value={filter.dataEntradaFim}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"
                        />
                    </div>
                    {/* Filtros por associação */}
                    <div>
                        <label htmlFor="veiculoPlaca" className="text-sm text-slate-300 block mb-1">Placa Veículo:</label>
                        <input
                            type="text"
                            id="veiculoPlaca"
                            name="veiculoPlaca"
                            value={filter.veiculoPlaca}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Placa de veículo associado"
                        />
                    </div>
                    <div>
                        <label htmlFor="enderecoCidade" className="text-sm text-slate-300 block mb-1">Cidade Endereço:</label>
                        <input
                            type="text"
                            id="enderecoCidade"
                            name="enderecoCidade"
                            value={filter.enderecoCidade}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Cidade de endereço associado"
                        />
                    </div>
                    <div>
                        <label htmlFor="contatoEmail" className="text-sm text-slate-300 block mb-1">Email Contato:</label>
                        <input
                            type="email"
                            id="contatoEmail"
                            name="contatoEmail"
                            value={filter.contatoEmail}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Email de contato associado"
                        />
                    </div>
                    <div>
                        <label htmlFor="zonaNome" className="text-sm text-slate-300 block mb-1">Nome Zona:</label>
                        <input
                            type="text"
                            id="zonaNome"
                            name="zonaNome"
                            value={filter.zonaNome}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Nome de zona associada"
                        />
                    </div>
                    <div>
                        <label htmlFor="boxNome" className="text-sm text-slate-300 block mb-1">Nome Box:</label>
                        <input
                            type="text"
                            id="boxNome"
                            name="boxNome"
                            value={filter.boxNome}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Nome de box associado"
                        />
                    </div>
                    <div className="md:col-span-3 flex justify-center">
                        <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                            <MdSearch size={20} /> Aplicar Filtros
                        </button>
                    </div>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando pátios...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}
                {successMessage && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-green-400 bg-green-900/50 p-4 pr-10 rounded border border-green-500" role="alert">
                        <MdCheckCircle className="inline mr-2" />{successMessage}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-green-400 hover:text-green-200" onClick={() => setSuccessMessage(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Pátios */}
                {!isLoading && !error && patios.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhum pátio encontrado para os critérios informados.</p>
                )}
                {!isLoading && patios.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Pátio</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Entrada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Saída</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {patios.map((patio) => (
                                <tr key={patio.idPatio} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{patio.idPatio}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{patio.nomePatio}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(patio.dataEntrada)}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(patio.dataSaida)}</td>
                                    <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={patio.observacao || ''}>{patio.observacao || '-'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/patio/alterar/${patio.idPatio}`}>
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(patio.idPatio, patio.nomePatio)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                        {/* Botão para ver associações - pode ser um modal ou outra página */}
                                        <Link href={`/patio/associacoes/${patio.idPatio}`}>
                                            <button className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center gap-1">
                                                <MdInfo size={14} /> Associações
                                            </button>
                                        </Link>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\alterar\[id]\page.tsx   |   componente AlterarVeiculoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/veiculo/alterar/[id]/page.tsx
"use client";

import React, { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle
} from 'react-icons/md';
import { Car, Hash, Palette, Calendar, User, Building, Settings, Info, ScanLine as ScanLicense, Loader2, AlertCircle } from 'lucide-react';

// Interfaces dos DTOs
import { VeiculoRequestDto, VeiculoResponseDto } from '@/types/veiculo';
import { VeiculoService } => '@/utils/api';

const combustiveis = ["Gasolina", "Etanol", "Diesel", "Flex", "Gás Natural", "Elétrico", "Híbrido", "Outro"];

export default function AlterarVeiculoPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [formData, setFormData] = useState<VeiculoRequestDto>({
        placa: '', renavam: '', chassi: '', fabricante: '', modelo: '', motor: '', ano: 0, combustivel: '',
    });

    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Busca dados do veículo ao carregar
    useEffect(() => {
        if (!id) {
            setError("ID do veículo não fornecido.");
            setIsFetching(false);
            return;
        }
        const fetchVeiculo = async () => {
            setIsFetching(true); setError(null);
            try {
                const data: VeiculoResponseDto = await VeiculoService.getById(id);
                setFormData({
                    placa: data.placa || '',
                    renavam: data.renavam || '',
                    chassi: data.chassi || '',
                    fabricante: data.fabricante || '',
                    modelo: data.modelo || '',
                    motor: data.motor || '',
                    ano: data.ano || 0,
                    combustivel: data.combustivel || '',
                });
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || "Falha ao carregar dados do veículo.");
                console.error("Erro detalhado no fetch inicial:", err);
            } finally {
                setIsFetching(false);
            }
        };
        fetchVeiculo();
    }, [id]);

    // Handler genérico
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: name === 'ano' ? parseInt(value, 10) || 0 : value // Converte 'ano' para number
        }));
    };

    // Submete a atualização
    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (id === null) {
            setError("ID do veículo inválido para atualização.");
            return;
        }
        setIsLoading(true); setError(null); setSuccess(null);

        try {
            const updatedVeiculo: VeiculoResponseDto = await VeiculoService.update(id, formData);
            setSuccess(`✅ Veículo "${updatedVeiculo.placa}" (ID: ${updatedVeiculo.idVeiculo}) atualizado com sucesso!`);
            setTimeout(() => {
                setSuccess(null);
                router.push('/veiculo/listar');
            }, 2000);
        } catch (err: any) {
            setError(`❌ ${err.response?.data?.message || err.message || 'Falha ao atualizar veículo.'}`);
            console.error("Erro detalhado na atualização:", err);
        } finally {
            setIsLoading(false);
        }
    };

    // Renderização condicional
    if (isFetching) {
        return (
            <>
                <NavBar active="veiculo-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados do veículo...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !isFetching && (!formData.placa || formData.placa === '')) {
        return (
            <>
                <NavBar active="veiculo-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-900 p-8 rounded-lg shadow-xl text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <p className="text-red-400 text-lg mb-6">{error}</p>
                        <Link href="/veiculo/listar" className="px-6 py-3 bg-sky-600 text-white rounded-md shadow hover:bg-sky-700">Voltar para Lista</Link>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="veiculo-alterar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdEdit className="text-3xl text-sky-400" /> Alterar Veículo (ID: {id})
                    </h1>

                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Detalhes do Veículo</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Placa */}
                                <div>
                                    <label htmlFor="placa" className="block mb-1 flex items-center gap-1">
                                        <Hash size={16} /> Placa:
                                    </label>
                                    <input
                                        type="text"
                                        id="placa"
                                        name="placa"
                                        value={formData.placa}
                                        onChange={handleChange}
                                        required
                                        maxLength={10}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* RENAVAM */}
                                <div>
                                    <label htmlFor="renavam" className="block mb-1 flex items-center gap-1">
                                        <ScanLicense size={16} /> RENAVAM:
                                    </label>
                                    <input
                                        type="text"
                                        id="renavam"
                                        name="renavam"
                                        value={formData.renavam}
                                        onChange={handleChange}
                                        required
                                        maxLength={11}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Chassi */}
                                <div>
                                    <label htmlFor="chassi" className="block mb-1 flex items-center gap-1">
                                        <Hash size={16} /> Chassi:
                                    </label>
                                    <input
                                        type="text"
                                        id="chassi"
                                        name="chassi"
                                        value={formData.chassi}
                                        onChange={handleChange}
                                        required
                                        maxLength={17}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Fabricante */}
                                <div>
                                    <label htmlFor="fabricante" className="block mb-1 flex items-center gap-1">
                                        <Building size={16} /> Fabricante:
                                    </label>
                                    <input
                                        type="text"
                                        id="fabricante"
                                        name="fabricante"
                                        value={formData.fabricante}
                                        onChange={handleChange}
                                        required
                                        maxLength={50}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Modelo */}
                                <div>
                                    <label htmlFor="modelo" className="block mb-1 flex items-center gap-1">
                                        <Car size={16} /> Modelo:
                                    </label>
                                    <input
                                        type="text"
                                        id="modelo"
                                        name="modelo"
                                        value={formData.modelo}
                                        onChange={handleChange}
                                        required
                                        maxLength={60}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Motor */}
                                <div>
                                    <label htmlFor="motor" className="block mb-1 flex items-center gap-1">
                                        <Settings size={16} /> Motor:
                                    </label>
                                    <input
                                        type="text"
                                        id="motor"
                                        name="motor"
                                        value={formData.motor || ''}
                                        onChange={handleChange}
                                        maxLength={30}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Ano */}
                                <div>
                                    <label htmlFor="ano" className="block mb-1 flex items-center gap-1">
                                        <Calendar size={16} /> Ano:
                                    </label>
                                    <input
                                        type="number"
                                        id="ano"
                                        name="ano"
                                        value={formData.ano}
                                        onChange={handleChange}
                                        required
                                        min={1900}
                                        max={new Date().getFullYear() + 2}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Combustível */}
                                <div>
                                    <label htmlFor="combustivel" className="block mb-1 flex items-center gap-1">
                                        <Info size={16} /> Combustível:
                                    </label>
                                    <select
                                        id="combustivel"
                                        name="combustivel"
                                        value={formData.combustivel}
                                        onChange={handleChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    >
                                        <option value="">Selecione...</option>
                                        {combustiveis.map(cb => (<option key={cb} value={cb}>{cb}</option>))}
                                    </select>
                                </div>
                            </div>
                        </fieldset>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading || isFetching ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading || isFetching}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/veiculo/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                /* Esconder setas de input number */
                input[type="number"]::-webkit-inner-spin-button,
                input[type="number"]::-webkit-outer-spin-button {
                    -webkit-appearance: none;
                    margin: 0;
                }
                input[type="number"] {
                    -moz-appearance: textfield; /* Firefox */
                }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\buscar\page.tsx   |   componente BuscarVeiculosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/veiculo/buscar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdErrorOutline, MdEdit, MdDelete, MdFilterList, MdInfo, MdCalendarToday, MdDirectionsCar, MdBadge } from 'react-icons/md';
import { Car, Hash, Palette, Calendar, User, Building, Settings, Info as InfoIcon, Search as SearchIcon, Filter } from 'lucide-react';

// Interfaces dos DTOs e Filtro
import { VeiculoResponseDto, VeiculoFilter, VeiculoLocalizacaoResponseDto } from '@/types/veiculo';
import { VeiculoService } from '@/utils/api';

export default function BuscarVeiculosPage() {
    const [veiculos, setVeiculos] = useState<VeiculoResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);
    const [localizacaoModal, setLocalizacaoModal] = useState<VeiculoLocalizacaoResponseDto | null>(null);
    const [isLoadingLocalizacao, setIsLoadingLocalizacao] = useState(false);
    const [errorLocalizacao, setErrorLocalizacao] = useState<string | null>(null);

    // Estado para os filtros
    const [filter, setFilter] = useState<VeiculoFilter>({
        placa: '',
        renavam: '',
        chassi: '',
        fabricante: '',
        modelo: '',
        motor: '',
        ano: undefined,
        combustivel: '',
        clienteCpf: '',
        boxNome: '',
        patioNome: '',
        zonaNome: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Handler para mudanças nos inputs de filtro
    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    // Função para buscar os veículos da API com filtros
    const handleSearch = async (e: FormEvent) => {
        e.preventDefault();

        setIsLoading(true);
        setError(null);
        setVeiculos([]);
        setHasSearched(true);

        try {
            const data = await VeiculoService.getAll(filter);
            setVeiculos(data);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar veículos. Tente novamente.');
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    // Função para buscar a localização de um veículo
    const fetchLocalizacaoVeiculo = async (id: number) => {
        setIsLoadingLocalizacao(true);
        setErrorLocalizacao(null);
        setLocalizacaoModal(null); // Limpa modal anterior
        try {
            const data = await VeiculoService.getLocalizacao(id);
            setLocalizacaoModal(data);
        } catch (err: any) {
            setErrorLocalizacao(err.response?.data?.message || err.message || 'Erro ao buscar localização do veículo.');
            console.error("Erro detalhado na localização:", err);
        } finally {
            setIsLoadingLocalizacao(false);
        }
    };

    const handleDelete = async (id: number, placaVeiculo: string) => {
        if (window.confirm(`Tem certeza que deseja deletar o Veículo "${placaVeiculo}" (ID: ${id})?`)) {
            setIsLoading(true);
            setError(null);
            try {
                await VeiculoService.delete(id);
                setVeiculos(prev => prev.filter(v => v.idVeiculo !== id));
                alert(`Veículo "${placaVeiculo}" (ID: ${id}) deletado com sucesso!`);
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar veículo.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="veiculo-buscar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center">
                    <SearchIcon size={30} className="text-sky-400" /> Buscar Veículos
                </h1>

                {/* Formulário de Filtros */}
                <form onSubmit={handleSearch} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label htmlFor="placa" className="text-sm text-slate-300 block mb-1">Placa:</label>
                        <input type="text" id="placa" name="placa" value={filter.placa} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Placa" maxLength={10} />
                    </div>
                    <div>
                        <label htmlFor="renavam" className="text-sm text-slate-300 block mb-1">RENAVAM:</label>
                        <input type="text" id="renavam" name="renavam" value={filter.renavam} onChange={handleFilterChange} maxLength={11} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="RENAVAM" />
                    </div>
                    <div>
                        <label htmlFor="chassi" className="text-sm text-slate-300 block mb-1">Chassi:</label>
                        <input type="text" id="chassi" name="chassi" value={filter.chassi} onChange={handleFilterChange} maxLength={17} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Chassi" />
                    </div>
                    <div>
                        <label htmlFor="fabricante" className="text-sm text-slate-300 block mb-1">Fabricante:</label>
                        <input type="text" id="fabricante" name="fabricante" value={filter.fabricante} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Fabricante" />
                    </div>
                    <div>
                        <label htmlFor="modelo" className="text-sm text-slate-300 block mb-1">Modelo:</label>
                        <input type="text" id="modelo" name="modelo" value={filter.modelo} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Modelo" />
                    </div>
                    <div>
                        <label htmlFor="ano" className="text-sm text-slate-300 block mb-1">Ano:</label>
                        <input type="number" id="ano" name="ano" value={filter.ano || ''} onChange={handleFilterChange} min={1900} max={2100} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Ano" />
                    </div>
                    <div>
                        <label htmlFor="combustivel" className="text-sm text-slate-300 block mb-1">Combustível:</label>
                        <input type="text" id="combustivel" name="combustivel" value={filter.combustivel} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Combustível" />
                    </div>
                    {/* Filtros por associação */}
                    <div>
                        <label htmlFor="clienteCpf" className="text-sm text-slate-300 block mb-1">CPF Cliente:</label>
                        <input type="text" id="clienteCpf" name="clienteCpf" value={filter.clienteCpf} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="CPF de cliente associado" />
                    </div>
                    <div>
                        <label htmlFor="patioNome" className="text-sm text-slate-300 block mb-1">Nome Pátio:</label>
                        <input type="text" id="patioNome" name="patioNome" value={filter.patioNome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome de pátio associado" />
                    </div>
                    <div>
                        <label htmlFor="zonaNome" className="text-sm text-slate-300 block mb-1">Nome Zona:</label>
                        <input type="text" id="zonaNome" name="zonaNome" value={filter.zonaNome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome de zona associada" />
                    </div>
                    <div className="md:col-span-3 flex justify-center">
                        <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                            <SearchIcon size={20} /> Buscar Veículos
                        </button>
                    </div>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Buscando veículos...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}
                {successMessage && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-green-400 bg-green-900/50 p-4 pr-10 rounded border border-green-500" role="alert">
                        <MdCheckCircle className="inline mr-2" />{successMessage}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-green-400 hover:text-green-200" onClick={() => setSuccessMessage(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Veículos */}
                {!isLoading && hasSearched && veiculos.length === 0 && !error && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhum veículo encontrado para os critérios informados.</p>
                )}
                {!isLoading && veiculos.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Placa</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Modelo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Fabricante</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Ano</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {veiculos.map((veiculo) => (
                                <tr key={veiculo.idVeiculo} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.idVeiculo}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.placa}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.modelo}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.fabricante}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.ano}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/veiculo/alterar/${veiculo.idVeiculo}`}>
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(veiculo.idVeiculo, veiculo.placa)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                        <button
                                            onClick={() => fetchLocalizacaoVeiculo(veiculo.idVeiculo)}
                                            className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center gap-1"
                                        >
                                            <MdInfo size={14} /> Localização
                                        </button>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Modal de Localização */}
                {localizacaoModal && (
                    <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4">
                        <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-sky-500" onClick={e => e.stopPropagation()}>
                            <h3 className="text-xl font-semibold text-sky-400 mb-4">Localização do Veículo</h3>
                            {isLoadingLocalizacao ? (
                                <p className="text-center text-sky-300 py-4 flex items-center justify-center gap-2"><Loader2 className="animate-spin"/> Carregando localização...</p>
                            ) : errorLocalizacao ? (
                                <p className="text-red-400 mb-4">{errorLocalizacao}</p>
                            ) : (
                                <>
                                    <p><strong>ID:</strong> {localizacaoModal.idVeiculo}</p>
                                    <p><strong>Placa:</strong> {localizacaoModal.placa}</p>
                                    <p><strong>Modelo:</strong> {localizacaoModal.modelo} ({localizacaoModal.fabricante})</p>
                                    <hr className="my-4 border-slate-700"/>
                                    <h4 className="font-semibold text-slate-300 mb-2">Último Rastreamento:</h4>
                                    {localizacaoModal.ultimoRastreamento ? (
                                        <div>
                                            <p><strong>IPS X:</strong> {localizacaoModal.ultimoRastreamento.ipsX}</p>
                                            <p><strong>IPS Y:</strong> {localizacaoModal.ultimoRastreamento.ipsY}</p>
                                            <p><strong>IPS Z:</strong> {localizacaoModal.ultimoRastreamento.ipsZ}</p>
                                            <p><strong>GPRS Lat:</strong> {localizacaoModal.ultimoRastreamento.gprsLatitude}</p>
                                            <p><strong>GPRS Long:</strong> {localizacaoModal.ultimoRastreamento.gprsLongitude}</p>
                                            <p><strong>GPRS Alt:</strong> {localizacaoModal.ultimoRastreamento.gprsAltitude}</p>
                                        </div>
                                    ) : (
                                        <p className="text-slate-400 text-sm">Nenhum rastreamento encontrado.</p>
                                    )}
                                    <hr className="my-4 border-slate-700"/>
                                    <h4 className="font-semibold text-slate-300 mb-2">Associações Atuais:</h4>
                                    <p><strong>Pátio:</strong> {localizacaoModal.patioAssociado?.nomePatio || 'N/A'}</p>
                                    <p><strong>Zona:</strong> {localizacaoModal.zonaAssociada?.nome || 'N/A'}</p>
                                    <p><strong>Box:</strong> {localizacaoModal.boxAssociado?.nome || 'N/A'}</p>
                                    <p className="text-xs text-slate-400 mt-2">Data da Consulta: {new Date(localizacaoModal.dataConsulta).toLocaleString('pt-BR')}</p>
                                </>
                            )}
                            <div className="flex justify-end mt-6">
                                <button onClick={() => setLocalizacaoModal(null)} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-md">Fechar</button>
                            </div>
                        </div>
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\cadastrar\page.tsx   |   componente CadastrarVeiculoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/veiculo/cadastrar/page.tsx
"use client";

import React, { useState, FormEvent } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdAddCircleOutline, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle
} from 'react-icons/md';
import { Car, Hash, Palette, Calendar, User, Building, Settings, Info, ScanLine as ScanLicense } from 'lucide-react';

// Interfaces dos DTOs
import { VeiculoRequestDto, VeiculoResponseDto } from '@/types/veiculo';
import { VeiculoService } from '@/utils/api';

const combustiveis = ["Gasolina", "Etanol", "Diesel", "Flex", "Gás Natural", "Elétrico", "Híbrido", "Outro"];

export default function CadastrarVeiculoPage() {
    const router = useRouter();

    const initialState: VeiculoRequestDto = {
        placa: '',
        renavam: '',
        chassi: '',
        fabricante: '',
        modelo: '',
        motor: '',
        ano: new Date().getFullYear(), // Ano atual como default
        combustivel: '',
    };

    const [formData, setFormData] = useState<VeiculoRequestDto>(initialState);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        try {
            const createdVeiculo: VeiculoResponseDto = await VeiculoService.create(formData);
            setSuccess(`✅ Veículo "${createdVeiculo.placa}" cadastrado com sucesso!`);
            setFormData(initialState);
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(`❌ ${err.response?.data?.message || err.message || 'Falha ao cadastrar veículo.'}`);
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="veiculo-cadastrar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdAddCircleOutline className="text-3xl text-sky-400" /> Novo Veículo
                    </h1>

                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Detalhes do Veículo</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Placa */}
                                <div>
                                    <label htmlFor="placa" className="block mb-1 flex items-center gap-1">
                                        <Hash size={16} /> Placa:
                                    </label>
                                    <input
                                        type="text"
                                        id="placa"
                                        name="placa"
                                        value={formData.placa}
                                        onChange={handleChange}
                                        required
                                        maxLength={10}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* RENAVAM */}
                                <div>
                                    <label htmlFor="renavam" className="block mb-1 flex items-center gap-1">
                                        <ScanLicense size={16} /> RENAVAM:
                                    </label>
                                    <input
                                        type="text"
                                        id="renavam"
                                        name="renavam"
                                        value={formData.renavam}
                                        onChange={handleChange}
                                        required
                                        maxLength={11}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Chassi */}
                                <div>
                                    <label htmlFor="chassi" className="block mb-1 flex items-center gap-1">
                                        <Hash size={16} /> Chassi:
                                    </label>
                                    <input
                                        type="text"
                                        id="chassi"
                                        name="chassi"
                                        value={formData.chassi}
                                        onChange={handleChange}
                                        required
                                        maxLength={17}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Fabricante */}
                                <div>
                                    <label htmlFor="fabricante" className="block mb-1 flex items-center gap-1">
                                        <Building size={16} /> Fabricante:
                                    </label>
                                    <input
                                        type="text"
                                        id="fabricante"
                                        name="fabricante"
                                        value={formData.fabricante}
                                        onChange={handleChange}
                                        required
                                        maxLength={50}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Modelo */}
                                <div>
                                    <label htmlFor="modelo" className="block mb-1 flex items-center gap-1">
                                        <Car size={16} /> Modelo:
                                    </label>
                                    <input
                                        type="text"
                                        id="modelo"
                                        name="modelo"
                                        value={formData.modelo}
                                        onChange={handleChange}
                                        required
                                        maxLength={60}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Motor */}
                                <div>
                                    <label htmlFor="motor" className="block mb-1 flex items-center gap-1">
                                        <Settings size={16} /> Motor:
                                    </label>
                                    <input
                                        type="text"
                                        id="motor"
                                        name="motor"
                                        value={formData.motor || ''} // Pode ser opcional, então trate null/undefined
                                        onChange={handleChange}
                                        maxLength={30}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Ano */}
                                <div>
                                    <label htmlFor="ano" className="block mb-1 flex items-center gap-1">
                                        <Calendar size={16} /> Ano:
                                    </label>
                                    <input
                                        type="number"
                                        id="ano"
                                        name="ano"
                                        value={formData.ano}
                                        onChange={handleChange}
                                        required
                                        min={1900}
                                        max={new Date().getFullYear() + 2} // Ano atual + 2 para permitir carros novos
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    />
                                </div>
                                {/* Combustível */}
                                <div>
                                    <label htmlFor="combustivel" className="block mb-1 flex items-center gap-1">
                                        <Info size={16} /> Combustível:
                                    </label>
                                    <select
                                        id="combustivel"
                                        name="combustivel"
                                        value={formData.combustivel}
                                        onChange={handleChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 h-10"
                                    >
                                        <option value="">Selecione...</option>
                                        {combustiveis.map(cb => (<option key={cb} value={cb}>{cb}</option>))}
                                    </select>
                                </div>
                            </div>
                        </fieldset>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Veículo'}
                            </button>
                            <Link href="/veiculo/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                /* Esconder setas de input number */
                input[type="number"]::-webkit-inner-spin-button,
                input[type="number"]::-webkit-outer-spin-button {
                    -webkit-appearance: none;
                    margin: 0;
                }
                input[type="number"] {
                    -moz-appearance: textfield; /* Firefox */
                }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\deletar\[id]\page.tsx   |   componente DeletarVeiculoPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/veiculo/deletar/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdDirectionsCar } from 'react-icons/md';
import { Trash2, AlertCircle, Loader2 } from 'lucide-react';

// Interfaces dos DTOs
import { VeiculoResponseDto } from '@/types/veiculo';
import { VeiculoService } from '@/utils/api';

export default function DeletarVeiculoPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [veiculoInfo, setVeiculoInfo] = useState<VeiculoResponseDto | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Efeito para buscar os dados do veículo para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID do veículo não fornecido na URL.");
            setIsLoadingInfo(false);
            return;
        }
        const fetchVeiculoData = async () => {
            setIsLoadingInfo(true);
            setError(null);
            try {
                const data: VeiculoResponseDto = await VeiculoService.getById(id);
                setVeiculoInfo(data);
            } catch (err: any) {
                if (err.response && err.response.status === 404) {
                    setError(`Veículo com ID ${id} não encontrado(a) ou já foi excluído(a).`);
                } else {
                    setError(err.response?.data?.message || err.message || "Falha ao carregar dados do veículo para exclusão.");
                }
                console.error("Erro detalhado no fetch de deleção:", err);
                setVeiculoInfo(null);
            } finally {
                setIsLoadingInfo(false);
            }
        };
        fetchVeiculoData();
    }, [id]);

    // Handler para confirmar a deleção
    const handleConfirmDelete = async () => {
        if (id === null || !veiculoInfo) {
            setError("Não é possível excluir: ID inválido ou dados do veículo não carregados.");
            return;
        }
        setIsDeleting(true);
        setError(null);

        try {
            await VeiculoService.delete(id);
            console.log(`Veículo ID ${id} excluído com sucesso.`);
            router.push('/veiculo/listar?deleted=true');
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || "Falha ao excluir veículo.");
            console.error("Erro detalhado na deleção:", err);
        } finally {
            setIsDeleting(false);
        }
    };

    // Handler para cancelar a deleção (volta para a lista)
    const handleCancel = () => {
        router.push('/veiculo/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="veiculo-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-center text-sky-300 py-10 text-xl flex items-center gap-2">
                        <Loader2 className="h-6 w-6 animate-spin" /> Carregando dados para confirmação...
                    </p>
                </main>
            </>
        );
    }

    if (error && !veiculoInfo) {
        return (
            <>
                <NavBar active="veiculo-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" /> Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdDirectionsCar className="text-2xl" /> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="veiculo-deletar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o veículo abaixo? Esta ação não pode ser desfeita.</p>

                    {veiculoInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID do Veículo:</strong> {veiculoInfo.idVeiculo}</p>
                            <p><strong>Placa:</strong> {veiculoInfo.placa}</p>
                            <p><strong>Modelo:</strong> {veiculoInfo.modelo}</p>
                            <p><strong>Fabricante:</strong> {veiculoInfo.fabricante}</p>
                            <p><strong>Ano:</strong> {veiculoInfo.ano}</p>
                            <p><strong>Combustível:</strong> {veiculoInfo.combustivel}</p>
                        </div>
                    )}

                    {error && (
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever size={20} /> Sim, Excluir</>)}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel size={20} /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\veiculo\listar\page.tsx   |   componente ListarVeiculosPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/veiculo/listar/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { VeiculoService } from '@/utils/api';
import NavBar from '@/components/nav-bar';
import {
    MdList, MdAdd, MdSearch, MdErrorOutline, MdEdit, MdDelete,
    MdFilterList, MdCalendarToday, MdInfo, MdCheckCircle, MdDirectionsCar, MdBadge
} from 'react-icons/md';
import { Car, Hash, Palette, Calendar, User, Building, Settings, Info, Search as SearchIcon, Filter, ScanLine as ScanLicense } from 'lucide-react';

// Interfaces dos DTOs e Filtro
import { VeiculoResponseDto, VeiculoFilter, VeiculoLocalizacaoResponseDto } from '@/types/veiculo';

export default function ListarVeiculosPage() {
    const [veiculos, setVeiculos] = useState<VeiculoResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);
    const [localizacaoModal, setLocalizacaoModal] = useState<VeiculoLocalizacaoResponseDto | null>(null);
    const [isLoadingLocalizacao, setIsLoadingLocalizacao] = useState(false);
    const [errorLocalizacao, setErrorLocalizacao] = useState<string | null>(null);

    // Estado para os filtros
    const [filter, setFilter] = useState<VeiculoFilter>({
        placa: '',
        renavam: '',
        chassi: '',
        fabricante: '',
        modelo: '',
        motor: '',
        ano: undefined,
        combustivel: '',
        clienteCpf: '',
        boxNome: '',
        patioNome: '',
        zonaNome: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Função para buscar os veículos da API com filtros
    const fetchVeiculos = async (e?: FormEvent) => {
        if (e) e.preventDefault();

        setIsLoading(true);
        setError(null);
        setSuccessMessage(null);

        try {
            const data = await VeiculoService.getAll(filter);
            setVeiculos(data);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao carregar veículos. Tente novamente.');
            console.error("Erro detalhado:", err);
            setVeiculos([]);
        } finally {
            setIsLoading(false);
        }
    };

    // Função para buscar a localização de um veículo
    const fetchLocalizacaoVeiculo = async (id: number) => {
        setIsLoadingLocalizacao(true);
        setErrorLocalizacao(null);
        setLocalizacaoModal(null);
        try {
            const data = await VeiculoService.getLocalizacao(id);
            setLocalizacaoModal(data);
        } catch (err: any) {
            setErrorLocalizacao(err.response?.data?.message || err.message || 'Erro ao buscar localização do veículo.');
            console.error("Erro detalhado na localização:", err);
        } finally {
            setIsLoadingLocalizacao(false);
        }
    };

    useEffect(() => {
        fetchVeiculos();
    }, []);

    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    const handleDelete = async (id: number, placaVeiculo: string) => {
        if (window.confirm(`Tem certeza que deseja deletar o Veículo "${placaVeiculo}" (ID: ${id})?`)) {
            setIsLoading(true);
            setError(null);
            try {
                await VeiculoService.delete(id);
                setSuccessMessage(`Veículo "${placaVeiculo}" (ID: ${id}) deletado com sucesso!`);
                fetchVeiculos(); // Recarrega a lista
                setTimeout(() => setSuccessMessage(null), 5000);
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar veículo.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="veiculo-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left">
                        <MdDirectionsCar className="text-3xl text-sky-400" /> Lista de Veículos
                    </h1>
                    <Link href="/veiculo/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                            <MdAdd size={18} /> Novo Veículo
                        </button>
                    </Link>
                </div>

                {/* Formulário de Filtros */}
                <form onSubmit={fetchVeiculos} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label htmlFor="placa" className="text-sm text-slate-300 block mb-1">Placa:</label>
                        <input type="text" id="placa" name="placa" value={filter.placa} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Placa" maxLength={10} />
                    </div>
                    <div>
                        <label htmlFor="renavam" className="text-sm text-slate-300 block mb-1">RENAVAM:</label>
                        <input type="text" id="renavam" name="renavam" value={filter.renavam} onChange={handleFilterChange} maxLength={11} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="RENAVAM" />
                    </div>
                    <div>
                        <label htmlFor="chassi" className="text-sm text-slate-300 block mb-1">Chassi:</label>
                        <input type="text" id="chassi" name="chassi" value={filter.chassi} onChange={handleFilterChange} maxLength={17} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Chassi" />
                    </div>
                    <div>
                        <label htmlFor="fabricante" className="text-sm text-slate-300 block mb-1">Fabricante:</label>
                        <input type="text" id="fabricante" name="fabricante" value={filter.fabricante} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Fabricante" />
                    </div>
                    <div>
                        <label htmlFor="modelo" className="text-sm text-slate-300 block mb-1">Modelo:</label>
                        <input type="text" id="modelo" name="modelo" value={filter.modelo} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Modelo" />
                    </div>
                    <div>
                        <label htmlFor="ano" className="text-sm text-slate-300 block mb-1">Ano:</label>
                        <input type="number" id="ano" name="ano" value={filter.ano || ''} onChange={handleFilterChange} min={1900} max={2100} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Ano" />
                    </div>
                    {/* Filtros por associação */}
                    <div>
                        <label htmlFor="clienteCpf" className="text-sm text-slate-300 block mb-1">CPF Cliente:</label>
                        <input type="text" id="clienteCpf" name="clienteCpf" value={filter.clienteCpf} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="CPF de cliente associado" />
                    </div>
                    <div>
                        <label htmlFor="patioNome" className="text-sm text-slate-300 block mb-1">Nome Pátio:</label>
                        <input type="text" id="patioNome" name="patioNome" value={filter.patioNome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome de pátio associado" />
                    </div>
                    <div>
                        <label htmlFor="zonaNome" className="text-sm text-slate-300 block mb-1">Nome Zona:</label>
                        <input type="text" id="zonaNome" name="zonaNome" value={filter.zonaNome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome de zona associada" />
                    </div>
                    <div className="md:col-span-3 flex justify-center">
                        <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                            <SearchIcon size={20} /> Aplicar Filtros
                        </button>
                    </div>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando veículos...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}
                {successMessage && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-green-400 bg-green-900/50 p-4 pr-10 rounded border border-green-500" role="alert">
                        <MdCheckCircle className="inline mr-2" />{successMessage}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-green-400 hover:text-green-200" onClick={() => setSuccessMessage(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Veículos */}
                {!isLoading && !error && veiculos.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhum veículo encontrado para os critérios informados.</p>
                )}
                {!isLoading && veiculos.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Placa</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Modelo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Fabricante</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Ano</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {veiculos.map((veiculo) => (
                                <tr key={veiculo.idVeiculo} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.idVeiculo}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.placa}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.modelo}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.fabricante}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{veiculo.ano}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/veiculo/alterar/${veiculo.idVeiculo}`}>
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(veiculo.idVeiculo, veiculo.placa)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                        {/* Botão para ver localização */}
                                        <button
                                            onClick={() => fetchLocalizacaoVeiculo(veiculo.idVeiculo)}
                                            className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center gap-1"
                                        >
                                            <MdInfo size={14} /> Localização
                                        </button>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Modal de Localização */}
                {localizacaoModal && (
                    <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4">
                        <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-sky-500" onClick={e => e.stopPropagation()}>
                            <h3 className="text-xl font-semibold text-sky-400 mb-4">Localização do Veículo</h3>
                            {isLoadingLocalizacao ? (
                                <p className="text-center text-sky-300 py-4 flex items-center justify-center gap-2"><Loader2 className="animate-spin"/> Carregando localização...</p>
                            ) : errorLocalizacao ? (
                                <p className="text-red-400 mb-4">{errorLocalizacao}</p>
                            ) : (
                                <>
                                    <p><strong>ID:</strong> {localizacaoModal.idVeiculo}</p>
                                    <p><strong>Placa:</strong> {localizacaoModal.placa}</p>
                                    <p><strong>Modelo:</strong> {localizacaoModal.modelo} ({localizacaoModal.fabricante})</p>
                                    <hr className="my-4 border-slate-700"/>
                                    <h4 className="font-semibold text-slate-300 mb-2">Último Rastreamento:</h4>
                                    {localizacaoModal.ultimoRastreamento ? (
                                        <div>
                                            <p><strong>IPS X:</strong> {localizacaoModal.ultimoRastreamento.ipsX}</p>
                                            <p><strong>IPS Y:</strong> {localizacaoModal.ultimoRastreamento.ipsY}</p>
                                            <p><strong>IPS Z:</strong> {localizacaoModal.ultimoRastreamento.ipsZ}</p>
                                            <p><strong>GPRS Lat:</strong> {localizacaoModal.ultimoRastreamento.gprsLatitude}</p>
                                            <p><strong>GPRS Long:</strong> {localizacaoModal.ultimoRastreamento.gprsLongitude}</p>
                                            <p><strong>GPRS Alt:</strong> {localizacaoModal.ultimoRastreamento.gprsAltitude}</p>
                                        </div>
                                    ) : (
                                        <p className="text-slate-400 text-sm">Nenhum rastreamento encontrado.</p>
                                    )}
                                    <hr className="my-4 border-slate-700"/>
                                    <h4 className="font-semibold text-slate-300 mb-2">Associações Atuais:</h4>
                                    <p><strong>Pátio:</strong> {localizacaoModal.patioAssociado?.nomePatio || 'N/A'}</p>
                                    <p><strong>Zona:</strong> {localizacaoModal.zonaAssociada?.nome || 'N/A'}</p>
                                    <p><strong>Box:</strong> {localizacaoModal.boxAssociado?.nome || 'N/A'}</p>
                                    <p className="text-xs text-slate-400 mt-2">Data da Consulta: {new Date(localizacaoModal.dataConsulta).toLocaleString('pt-BR')}</p>
                                </>
                            )}
                            <div className="flex justify-end mt-6">
                                <button onClick={() => setLocalizacaoModal(null)} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-md">Fechar</button>
                            </div>
                        </div>
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\zona\alterar\[id]\page.tsx   |   componente AlterarZonaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Tag, Calendar, Text, Info, Loader2, AlertCircle, Stethoscope } from 'lucide-react';

// Interfaces dos DTOs
import { ZonaRequestDto, ZonaResponseDto } from '@/types/zona';
import { ZonaService } from '@/utils/api';

export default function AlterarZonaPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [formData, setFormData] = useState<ZonaRequestDto>({
        nome: '', dataEntrada: '', dataSaida: '', observacao: ''
    });

    const [isLoading, setIsLoading] = useState(false); // Para submissão
    const [isFetching, setIsFetching] = useState(true); // Para carregar dados iniciais
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Função para buscar os dados da zona ao carregar a página
    useEffect(() => {
        if (!id) {
            setError("ID da zona não fornecido na URL.");
            setIsFetching(false);
            return;
        }
        const fetchZonaData = async () => {
            setIsFetching(true);
            setError(null);
            try {
                const data: ZonaResponseDto = await ZonaService.getById(id);
                setFormData({
                    nome: data.nome,
                    dataEntrada: data.dataEntrada,
                    dataSaida: data.dataSaida,
                    observacao: data.observacao || '',
                });
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || "Falha ao carregar dados da zona.");
                console.error("Erro detalhado no fetch inicial:", err);
            } finally {
                setIsFetching(false);
            }
        };
        fetchZonaData();
    }, [id]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (id === null) {
            setError("ID da zona inválido para atualização.");
            return;
        }
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        try {
            const updatedZona: ZonaResponseDto = await ZonaService.update(id, formData);
            setSuccess(`Zona "${updatedZona.nome}" (ID: ${updatedZona.idZona}) atualizada com sucesso!`);
            setTimeout(() => {
                setSuccess(null);
                router.push('/zona/listar');
            }, 2000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao atualizar zona.');
            console.error("Erro detalhado na atualização:", err);
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetching) {
        return (
            <>
                <NavBar active="zona-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados da zona...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !isFetching && (!formData.nome || formData.nome === '')) {
        return (
            <>
                <NavBar active="zona-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-900 p-8 rounded-lg shadow-xl text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <p className="text-red-400 text-lg mb-6">{error}</p>
                        <Link href="/zona/listar" className="px-6 py-3 bg-sky-600 text-white rounded-md shadow hover:bg-sky-700">Voltar para Lista</Link>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="zona-alterar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdEdit className="text-3xl text-sky-400" /> Alterar Zona (ID: {id})
                    </h1>

                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div>
                            <label htmlFor="nome" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Tag size={16} /> Nome:
                            </label>
                            <input
                                type="text"
                                id="nome"
                                name="nome"
                                value={formData.nome}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Entrada:
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Saída:
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading || isFetching ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading || isFetching}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/zona/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\zona\buscar\page.tsx   |   componente BuscarZonasPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/buscar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdErrorOutline, MdEdit, MdDelete, MdFilterList, MdCalendarToday, MdInfo, MdLocationOn } from 'react-icons/md';
import { Hash, Stethoscope, Wrench, Car, Box, Search as SearchIcon, Filter } from 'lucide-react';

// Interfaces dos DTOs e Filtro
import { ZonaResponseDto, ZonaFilter } from '@/types/zona';
import { ZonaService } from '@/utils/api';

export default function BuscarZonasPage() {
    const [zonas, setZonas] = useState<ZonaResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);

    // Estado para os filtros (corresponde a ZonaFilter.java)
    const [filter, setFilter] = useState<ZonaFilter>({
        nome: '',
        dataEntradaInicio: '',
        dataEntradaFim: '',
        dataSaidaInicio: '',
        dataSaidaFim: '',
        observacao: '',
        boxNome: '',
        veiculoPlaca: '',
        patioNome: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Handler para mudanças nos inputs de filtro
    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    // Função para buscar as zonas da API com filtros
    const handleSearch = async (e: FormEvent) => {
        e.preventDefault();

        setIsLoading(true);
        setError(null);
        setZonas([]);
        setHasSearched(true);

        try {
            const data = await ZonaService.getAll(filter);
            setZonas(data);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar zonas. Tente novamente.');
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async (id: number, nomeZona: string) => {
        if (window.confirm(`Tem certeza que deseja deletar a Zona "${nomeZona}" (ID: ${id})?`)) {
            setIsLoading(true);
            setError(null);
            try {
                await ZonaService.delete(id);
                setZonas(prev => prev.filter(z => z.idZona !== id));
                alert(`Zona "${nomeZona}" (ID: ${id}) deletada com sucesso!`);
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar zona.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="zona-buscar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center">
                    <SearchIcon size={30} className="text-sky-400" /> Buscar Zonas
                </h1>

                {/* Formulário de Filtros Avançados */}
                <form onSubmit={handleSearch} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label htmlFor="nome" className="text-sm text-slate-300 block mb-1">Nome:</label>
                        <input type="text" id="nome" name="nome" value={filter.nome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome da zona" />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaInicio" className="text-sm text-slate-300 block mb-1">Entrada (Início):</label>
                        <input type="date" id="dataEntradaInicio" name="dataEntradaInicio" value={filter.dataEntradaInicio} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix" />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaFim" className="text-sm text-slate-300 block mb-1">Entrada (Fim):</label>
                        <input type="date" id="dataEntradaFim" name="dataEntradaFim" value={filter.dataEntradaFim} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix" />
                    </div>
                    {/* Filtros por associação */}
                    <div>
                        <label htmlFor="boxNome" className="text-sm text-slate-300 block mb-1">Nome Box:</label>
                        <input type="text" id="boxNome" name="boxNome" value={filter.boxNome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome de box associado" />
                    </div>
                    <div>
                        <label htmlFor="veiculoPlaca" className="text-sm text-slate-300 block mb-1">Placa Veículo:</label>
                        <input type="text" id="veiculoPlaca" name="veiculoPlaca" value={filter.veiculoPlaca} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Placa de veículo associado" />
                    </div>
                    <div>
                        <label htmlFor="patioNome" className="text-sm text-slate-300 block mb-1">Nome Pátio:</label>
                        <input type="text" id="patioNome" name="patioNome" value={filter.patioNome} onChange={handleFilterChange} className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white" placeholder="Nome de pátio associado" />
                    </div>
                    <div className="md:col-span-3 flex justify-center">
                        <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                            <SearchIcon size={20} /> Buscar Zonas
                        </button>
                    </div>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Buscando zonas...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Resultados da Busca */}
                {!isLoading && hasSearched && zonas.length === 0 && !error && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhuma zona encontrada para os critérios informados.</p>
                )}
                {!isLoading && zonas.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Entrada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Saída</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {zonas.map((zona) => (
                                <tr key={zona.idZona} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{zona.idZona}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{zona.nome}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(zona.dataEntrada)}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(zona.dataSaida)}</td>
                                    <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={zona.observacao || ''}>{zona.observacao || '-'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/zona/alterar/${zona.idZona}`}>
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(zona.idZona, zona.nome)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                        <Link href={`/zona/associacoes/${zona.idZona}`}> {/* Criar esta página depois */}
                                            <button className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center gap-1">
                                                <MdInfo size={14} /> Associações
                                            </button>
                                        </Link>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\zona\cadastrar\page.tsx   |   componente CadastrarZonaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdAddCircleOutline, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle
} from 'react-icons/md';
import { Tag, Calendar, Text, Info, Stethoscope } from 'lucide-react'; // Ícone de zona

// Interfaces dos DTOs
import { ZonaRequestDto, ZonaResponseDto } from '@/types/zona';
import { ZonaService } from '@/utils/api';

export default function CadastrarZonaPage() {
    const today = new Date().toISOString().split('T')[0];

    const initialState: ZonaRequestDto = {
        nome: '',
        dataEntrada: today,
        dataSaida: today,
        observacao: '',
    };

    const [formData, setFormData] = useState<ZonaRequestDto>(initialState);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        try {
            const createdZona: ZonaResponseDto = await ZonaService.create(formData);
            setSuccess(`Zona "${createdZona.nome}" (ID: ${createdZona.idZona}) cadastrada com sucesso!`);
            setFormData(initialState);
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao cadastrar zona.');
            console.error("Erro detalhado:", err);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="zona-cadastrar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdAddCircleOutline className="text-3xl text-sky-400" /> Nova Zona
                    </h1>

                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div>
                            <label htmlFor="nome" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Tag size={16} /> Nome:
                            </label>
                            <input
                                type="text"
                                id="nome"
                                name="nome"
                                value={formData.nome}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Entrada:
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Saída:
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Zona'}
                            </button>
                            <Link href="/zona/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\zona\deletar\[id]\page.tsx   |   componente DeletarZonaPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/deletar/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdInfoOutline } from 'react-icons/md';
import { Trash2, AlertCircle, Loader2, Stethoscope } from 'lucide-react';

// Interfaces dos DTOs
import { ZonaResponseDto } from '@/types/zona';
import { ZonaService } from '@/utils/api';

export default function DeletarZonaPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [zonaInfo, setZonaInfo] = useState<ZonaResponseDto | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Função para formatar a data para exibição
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Efeito para buscar os dados da zona para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID da zona não fornecido na URL.");
            setIsLoadingInfo(false);
            return;
        }
        const fetchZonaData = async () => {
            setIsLoadingInfo(true);
            setError(null);
            try {
                const data: ZonaResponseDto = await ZonaService.getById(id);
                setZonaInfo(data);
            } catch (err: any) {
                if (err.response && err.response.status === 404) {
                    setError(`Zona com ID ${id} não encontrada(a) ou já foi excluída(a).`);
                } else {
                    setError(err.response?.data?.message || err.message || "Falha ao carregar dados da zona para exclusão.");
                }
                console.error("Erro detalhado no fetch de deleção:", err);
                setZonaInfo(null);
            } finally {
                setIsLoadingInfo(false);
            }
        };
        fetchZonaData();
    }, [id]);

    // Handler para confirmar a deleção
    const handleConfirmDelete = async () => {
        if (id === null || !zonaInfo) {
            setError("Não é possível excluir: ID inválido ou dados da zona não carregados.");
            return;
        }
        setIsDeleting(true);
        setError(null);

        try {
            await ZonaService.delete(id);
            console.log(`Zona ID ${id} excluída com sucesso.`);
            router.push('/zona/listar?deleted=true');
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || "Falha ao excluir zona.");
            console.error("Erro detalhado na deleção:", err);
        } finally {
            setIsDeleting(false);
        }
    };

    // Handler para cancelar a deleção (volta para a lista)
    const handleCancel = () => {
        router.push('/zona/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="zona-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-center text-sky-300 py-10 text-xl flex items-center gap-2">
                        <Loader2 className="h-6 w-6 animate-spin" /> Carregando dados para confirmação...
                    </p>
                </main>
            </>
        );
    }

    if (error && !zonaInfo) {
        return (
            <>
                <NavBar active="zona-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" /> Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdInfoOutline size={20} /> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="zona-deletar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir a zona abaixo? Esta ação não pode ser desfeita.</p>

                    {zonaInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID da Zona:</strong> {zonaInfo.idZona}</p>
                            <p><strong>Nome:</strong> {zonaInfo.nome}</p>
                            <p><strong>Data Entrada:</strong> {formatDate(zonaInfo.dataEntrada)}</p>
                            <p><strong>Data Saída:</strong> {formatDate(zonaInfo.dataSaida)}</p>
                            <p><strong>Observação:</strong> {zonaInfo.observacao || '-'}</p>
                        </div>
                    )}

                    {error && (
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever size={20} /> Sim, Excluir</>)}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel size={20} /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// app\zona\listar\page.tsx   |   componente ListarZonasPage
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/listar/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import { ZonaService } from '@/utils/api';
import NavBar from '@/components/nav-bar';
import {
    MdList, MdAdd, MdSearch, MdErrorOutline, MdEdit, MdDelete,
    MdFilterList, MdCalendarToday, MdInfo, MdCheckCircle
} from 'react-icons/md';
import { Hash, Stethoscope, Wrench, Car, Box } from 'lucide-react'; // Ícones Lucide

// Interfaces dos DTOs e Filtro
import { ZonaResponseDto, ZonaFilter } from '@/types/zona';

export default function ListarZonasPage() {
    const [zonas, setZonas] = useState<ZonaResponseDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    // Estado para os filtros
    const [filter, setFilter] = useState<ZonaFilter>({
        nome: '',
        dataEntradaInicio: '',
        dataEntradaFim: '',
        dataSaidaInicio: '',
        dataSaidaFim: '',
        observacao: '',
        boxNome: '',
        veiculoPlaca: '',
        patioNome: '',
    });

    // Funções de formatação
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Função para buscar as zonas da API com filtros
    const fetchZonas = async (e?: FormEvent) => {
        if (e) e.preventDefault();

        setIsLoading(true);
        setError(null);
        setSuccessMessage(null);

        try {
            const data = await ZonaService.getAll(filter);
            setZonas(data);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao carregar zonas. Tente novamente.');
            console.error("Erro detalhado:", err);
            setZonas([]);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchZonas();
    }, []);

    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFilter((prevFilter) => ({
            ...prevFilter,
            [name]: value,
        }));
    };

    const handleDelete = async (id: number, nomeZona: string) => {
        if (window.confirm(`Tem certeza que deseja deletar a Zona "${nomeZona}" (ID: ${id})?`)) {
            setIsLoading(true);
            setError(null);
            try {
                await ZonaService.delete(id);
                setSuccessMessage(`Zona "${nomeZona}" (ID: ${id}) deletada com sucesso!`);
                fetchZonas(); // Recarrega a lista
                setTimeout(() => setSuccessMessage(null), 5000);
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || 'Erro ao deletar zona.');
                console.error("Erro detalhado:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    return (
        <>
            <NavBar active="zona-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="flex items-center gap-2 text-2xl md:text-3xl font-bold text-center sm:text-left">
                        <Stethoscope size={30} className="text-sky-400" /> Lista de Zonas
                    </h1>
                    <Link href="/zona/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                            <MdAdd size={18} /> Nova Zona
                        </button>
                    </Link>
                </div>

                {/* Formulário de Filtros */}
                <form onSubmit={fetchZonas} className="mb-6 p-4 bg-slate-800 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label htmlFor="nome" className="text-sm text-slate-300 block mb-1">Nome:</label>
                        <input
                            type="text"
                            id="nome"
                            name="nome"
                            value={filter.nome}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Nome da zona"
                        />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaInicio" className="text-sm text-slate-300 block mb-1">Entrada (Início):</label>
                        <input
                            type="date"
                            id="dataEntradaInicio"
                            name="dataEntradaInicio"
                            value={filter.dataEntradaInicio}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"
                        />
                    </div>
                    <div>
                        <label htmlFor="dataEntradaFim" className="text-sm text-slate-300 block mb-1">Entrada (Fim):</label>
                        <input
                            type="date"
                            id="dataEntradaFim"
                            name="dataEntradaFim"
                            value={filter.dataEntradaFim}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white date-input-fix"
                        />
                    </div>
                    {/* Filtros por associação */}
                    <div>
                        <label htmlFor="boxNome" className="text-sm text-slate-300 block mb-1">Nome Box:</label>
                        <input
                            type="text"
                            id="boxNome"
                            name="boxNome"
                            value={filter.boxNome}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Nome de box associado"
                        />
                    </div>
                    <div>
                        <label htmlFor="veiculoPlaca" className="text-sm text-slate-300 block mb-1">Placa Veículo:</label>
                        <input
                            type="text"
                            id="veiculoPlaca"
                            name="veiculoPlaca"
                            value={filter.veiculoPlaca}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Placa de veículo associado"
                        />
                    </div>
                    <div>
                        <label htmlFor="patioNome" className="text-sm text-slate-300 block mb-1">Nome Pátio:</label>
                        <input
                            type="text"
                            id="patioNome"
                            name="patioNome"
                            value={filter.patioNome}
                            onChange={handleFilterChange}
                            className="p-2 h-10 rounded bg-slate-700 border border-slate-600 text-white"
                            placeholder="Nome de pátio associado"
                        />
                    </div>
                    <div className="md:col-span-3 flex justify-center">
                        <button type="submit" className="p-2 h-10 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md flex items-center gap-2 px-4">
                            <MdSearch size={20} /> Aplicar Filtros
                        </button>
                    </div>
                </form>

                {/* Mensagens de Feedback */}
                {isLoading && <p className="text-center text-sky-300 py-10">Carregando zonas...</p>}
                {error && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <MdErrorOutline className="inline mr-2" />{error}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}
                {successMessage && (
                    <div className="relative max-w-3xl mx-auto mb-6 text-green-400 bg-green-900/50 p-4 pr-10 rounded border border-green-500" role="alert">
                        <MdCheckCircle className="inline mr-2" />{successMessage}
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-green-400 hover:text-green-200" onClick={() => setSuccessMessage(null)} aria-label="Fechar"><span className="text-xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Zonas */}
                {!isLoading && !error && zonas.length === 0 && (
                    <p className="text-center text-slate-400 py-10 bg-slate-900 rounded-lg shadow-xl">Nenhuma zona encontrada para os critérios informados.</p>
                )}
                {!isLoading && zonas.length > 0 && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center gap-1"><Hash size={14}/> ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Entrada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Saída</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {zonas.map((zona) => (
                                <tr key={zona.idZona} className="hover:bg-slate-800/50">
                                    <td className="px-6 py-4 whitespace-nowrap">{zona.idZona}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{zona.nome}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(zona.dataEntrada)}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">{formatDate(zona.dataSaida)}</td>
                                    <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={zona.observacao || ''}>{zona.observacao || '-'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-center space-x-2 flex items-center justify-center">
                                        <Link href={`/zona/alterar/${zona.idZona}`}>
                                            <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center gap-1">
                                                <MdEdit size={14} /> Editar
                                            </button>
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(zona.idZona, zona.nome)}
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center gap-1"
                                        >
                                            <MdDelete size={14} /> Deletar
                                        </button>
                                        {/* Botão para ver associações */}
                                        <Link href={`/zona/associacoes/${zona.idZona}`}> {/* Criar esta página depois */}
                                            <button className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center gap-1">
                                                <MdInfo size={14} /> Associações
                                            </button>
                                        </Link>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// components\forms\TabbedForm.tsx   |   componente TabbedForm
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/components/forms/TabbedForm.tsx
"use client";

import React, { ReactNode } from 'react';
import { Tab } from '@headlessui/react';

export interface AppTab {
    label: string;
    content: ReactNode;
    icon?: ReactNode;
    disabled?: boolean;
}

interface TabbedFormProps {
    tabs: AppTab[];
    selectedIndex?: number;
    onChange?: (index: number) => void;
}

const TabbedForm: React.FC<TabbedFormProps> = ({ tabs, selectedIndex, onChange }) => {
    return (
        <div className="w-full">
            <Tab.Group selectedIndex={selectedIndex} onChange={onChange}>
                {/* Container das Abas - Removemos a borda inferior daqui */}
                <Tab.List className="flex space-x-1 px-1 sm:px-2">
                    {tabs.map((tabItem) => (
                        <Tab
                            key={tabItem.label}
                            disabled={tabItem.disabled}
                            className={({ selected }) =>
                                `
                  px-3 sm:px-5 py-2.5 text-xs sm:text-sm font-medium focus:outline-none flex items-center gap-2 whitespace-nowrap
                  rounded-t-md                           // Cantos superiores arredondados
                  transition-colors duration-150
                  relative                                // Para posicionamento do pseudo-elemento ou borda
                  group                                   // Para hover nos separadores (opcional)

                  ${tabItem.disabled
                                    ? 'text-slate-600 cursor-not-allowed' // Estilo desabilitado
                                    : selected
                                        ? 'bg-slate-800 text-sky-300 shadow-sm' // ABA ATIVA: Fundo mais claro (ajuste a cor), texto destacado
                                        : 'bg-slate-900/50 text-slate-400 hover:bg-slate-700/70 hover:text-sky-200' // ABA INATIVA: Fundo escuro, hover sutil
                                }

                  /* Separador sutil à direita (exceto último) */
                  ${!tabItem.disabled && 'border-r border-slate-700/50 last:border-r-0'}
                `
                            }
                        >
                            {tabItem.icon}
                            {tabItem.label}
                        </Tab>
                    ))}
                    {/* Espaço vazio para preencher a linha abaixo das abas, exceto sob a ativa */}
                    <div className="flex-grow border-b border-slate-700"></div>
                </Tab.List>

                {/* Painéis de Conteúdo */}
                <Tab.Panels className="mt-[-1px]"> {/* Leve sobreposição para conectar */}
                    {tabs.map((tabItem, idx) => (
                        <Tab.Panel
                            key={idx}
                            // Fundo um pouco mais claro para conectar com a aba ativa
                            className="rounded-b-lg rounded-tr-lg bg-slate-800 p-3 sm:p-5 focus:outline-none border border-t-0 border-slate-700"
                        >
                            {tabItem.content}
                        </Tab.Panel>
                    ))}
                </Tab.Panels>
            </Tab.Group>
        </div>
    );
};

export default TabbedForm;

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// components\nav-bar.tsx   |   componente NavBar
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/components/nav-bar.tsx
"use client";

import Link from 'next/link';
import { useState, ReactNode } from 'react'; // Importe ReactNode para tipagem de ícones
import { usePathname } from 'next/navigation'; // Para saber a rota atual e marcar como 'active'

// Importe os ícones que você já está usando
import {
    MdHome, MdPeople, MdDirectionsCar, MdBuild, MdSchedule, MdBarChart,
    MdPayment, MdContactMail, MdList, MdAddCircleOutline, MdSearch,
    MdDescription, MdEventNote, MdTrendingUp, MdPersonSearch, MdAssessment,
    MdOutlineDirectionsCar // Para o ícone de Veículo no menu principal, se preferir
} from 'react-icons/md';
import { ListChecks, Package, Box, Users, Car, Wrench, DollarSign, FileText, Stethoscope } from 'lucide-react'; // Ícones Lucide para consistência

// 1. Interface para um item de submenu
interface SubMenuItem {
    label: string;
    href: string;
    icon: ReactNode;
}

// 2. Interface para um item de menu principal (com ou sem submenu)
interface NavMenuItem {
    label: string;
    href?: string; // Opcional se tiver submenus
    icon: ReactNode;
    key: string; // Chave para identificar o item ativo
    subMenus?: SubMenuItem[]; // Array de submenus
}

export default function NavBar() {
    // `usePathname` é um hook do Next.js App Router para obter o caminho atual da URL
    const pathname = usePathname();

    const [openMenu, setOpenMenu] = useState<string | null>(null); // Estado para controlar qual submenu está aberto

    // Função para alternar a visibilidade de um submenu
    const toggleMenu = (menuKey: string) => {
        setOpenMenu(current => (current === menuKey ? null : menuKey));
    };

    // Função para verificar se um link está ativo
    const isActive = (href: string) => {
        // Verifica se o pathname começa com o href do link
        // Isso lida com rotas aninhadas (ex: /clientes/listar ativa /clientes)
        return pathname.startsWith(href);
    };

    // Define os itens da navegação
    // Use a prop `key` para identificar qual item de menu principal está ativo
    const navItems: NavMenuItem[] = [
        { label: "Início", href: "/inicio", icon: <MdHome />, key: "inicio" },
        {
            label: "Clientes",
            icon: <MdPeople />,
            key: "clientes",
            subMenus: [
                { label: "Listar", href: "/clientes/listar", icon: <MdList /> },
                { label: "Cadastrar", href: "/clientes/cadastrar", icon: <MdAddCircleOutline /> },
                { label: "Buscar", href: "/clientes/buscar", icon: <MdSearch /> },
            ]
        },
        {
            label: "Veículo",
            icon: <MdDirectionsCar />, // Mantendo o ícone original MdDirectionsCar
            key: "veiculo",
            subMenus: [
                { label: "Listar", href: "/veiculo/listar", icon: <MdList /> },
                { label: "Cadastrar", href: "/veiculo/cadastrar", icon: <MdAddCircleOutline /> },
                { label: "Buscar", href: "/veiculo/buscar", icon: <MdSearch /> },
            ]
        },
        {
            label: "Boxes", // Novo item de menu para Boxes
            icon: <Box size={18} />, // Ícone Lucide para Box
            key: "box",
            subMenus: [
                { label: "Listar", href: "/box/listar", icon: <MdList /> },
                { label: "Cadastrar", href: "/box/cadastrar", icon: <MdAddCircleOutline /> },
                { label: "Buscar", href: "/box/buscar", icon: <MdSearch /> },
            ]
        },
        {
            label: "Pátios", // Novo item de menu para Pátios
            icon: <Wrench size={18} />, // Pode ser um ícone de pátio, por exemplo
            key: "patio",
            subMenus: [
                { label: "Listar", href: "/patio/listar", icon: <MdList /> },
                { label: "Cadastrar", href: "/patio/cadastrar", icon: <MdAddCircleOutline /> },
                { label: "Buscar", href: "/patio/buscar", icon: <MdSearch /> },
            ]
        },
        {
            label: "Zonas", // Novo item de menu para Zonas
            icon: <Stethoscope size={18} />, // Pode ser um ícone de zona, por exemplo
            key: "zona",
            subMenus: [
                { label: "Listar", href: "/zona/listar", icon: <MdList /> },
                { label: "Cadastrar", href: "/zona/cadastrar", icon: <MdAddCircleOutline /> },
                { label: "Buscar", href: "/zona/buscar", icon: <MdSearch /> },
            ]
        },
        // Removendo Agendamento, Oficina Online, Orçamento, Peças, Pagamento, Relatório e Contato
        // para focar nas entidades que você mencionou na nova estrutura de pastas
        // e seguindo sua instrução para esquecer relatórios por enquanto.
        // Você pode readicionar esses menus e seus submenus se necessário no futuro.
    ];

    // Classe base para os links
    const baseLinkClass = "flex items-center px-1 pb-1 transition-colors duration-200 ease-in-out text-slate-300 hover:text-sky-200";
    const activeLinkClass = "text-sky-100 font-semibold border-b-2 border-sky-300";
    const subMenuLinkClass = "flex items-center gap-2 block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors";


    return (
        <nav className="flex justify-between items-center p-4 md:p-6 bg-gradient-to-r from-[#075985] to-[#012A46] text-white shadow-md relative z-50">
            <Link href="/inicio" onClick={() => setOpenMenu(null)}>
                <h1 className="flex items-center text-xl md:text-2xl font-bold cursor-pointer hover:text-sky-200 transition-colors">
                    <MdBuild className="inline-block mr-2 text-2xl" />
                    Mottu
                </h1>
            </Link>

            <ul className="flex flex-wrap gap-3 md:gap-5 text-sm md:text-base items-center">
                {navItems.map((item) => (
                    <li key={item.key} className="relative">
                        {item.href ? ( // Se for um link direto (sem submenu)
                            <Link href={item.href} className={`${baseLinkClass} ${isActive(item.href) ? activeLinkClass : ''}`} onClick={() => setOpenMenu(null)}>
                                {item.icon} {item.label}
                            </Link>
                        ) : ( // Se tiver submenu
                            <button
                                type="button"
                                onClick={() => toggleMenu(item.key)}
                                className={`${baseLinkClass} ${isActive(`/${item.key}`) ? activeLinkClass : ''} cursor-pointer`}
                            >
                                {item.icon} {item.label}
                            </button>
                        )}
                        {item.subMenus && openMenu === item.key && (
                            <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down z-10">
                                {item.subMenus.map((subItem) => (
                                    <li key={subItem.href}>
                                        <Link href={subItem.href} className={subMenuLinkClass} onClick={() => setOpenMenu(null)}>
                                            {subItem.icon} {subItem.label}
                                        </Link>
                                    </li>
                                ))}
                            </ul>
                        )}
                    </li>
                ))}
            </ul>

            <img
                className="w-10 h-10 md:w-12 md:h-12 rounded-full border-2 border-sky-200"
                src="https://avatars.githubusercontent.com/u/4350623?v=4" // Seu avatar do GitHub
                alt="Avatar do usuário"
            />

            {/* Animação do Menu Dropdown */}
            <style jsx>{`
                @keyframes fade-in-down {
                    from { opacity: 0; transform: translateY(-10px); }
                    to   { opacity: 1; transform: translateY(0); }
                }
                .animate-fade-in-down { animation: fade-in-down 0.2s ease-out forwards; }
            `}</style>
        </nav>
    );
}

