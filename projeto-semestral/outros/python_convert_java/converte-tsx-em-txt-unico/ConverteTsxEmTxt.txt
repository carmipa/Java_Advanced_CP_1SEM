Script: converte-tsx-em-txt-unico
Data de execução: 2025-04-30 15:30:18

Estrutura de diretórios do projeto:
src/
    app/
        agendamento/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
        clientes/
            alterar/
                [idCliente]/
                    [idEndereco]/
            buscar/
            cadastrar/
            deletar/
            listar/
        contato/
        inicio/
        oficinaOnline/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
            listar/
        pagamento/
        relatorio/
            agendamentos-futuros/
            contagem-mensal/
            historico-cliente/
            listar/
            servicos-agendados/
        veiculo/
            alterar/
                [id]/
            buscar/
            cadastrar/
            deletar/
                [id]/
            listar/
    components/

// --- Arquivo: app\layout.tsx
// --- Componente: RootLayout
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


// --- Arquivo: app\page.tsx
// --- Componente: HomePage
// src/app/page.tsx  (Substitua o conteúdo do seu page.tsx atual por este)
import NavBar from "@/components/nav-bar"; // Corrigido para NavBar

export default function HomePage() { // Renomeado para HomePage por clareza
    return (
        <>
            {/* Verifica se o NavBar está sendo importado corretamente */}
            <NavBar active="inicio" />

            {/* Conteúdo e Estilo da sua página de início original */}
            <main
                className="flex items-center justify-center min-h-screen text-white bg-cover bg-center bg-no-repeat"
                // Define a imagem de fundo
                style={{
                    backgroundImage: `url('/admin-ajax.png')`, // Caminho relativo à pasta /public
                    backgroundColor: '#012A46', // Cor de fundo fallback
                }}
            >
                {/* Conteúdo sobre a imagem */}
                <section className="bg-black/50 backdrop-blur-sm max-w-2xl p-8 m-4 rounded-xl text-center">
                    <h1 className="mb-4 text-4xl font-bold">Bem-vindo à Oficina Virtual</h1>
                    <p className="mb-8 text-lg">
                        Descubra uma nova forma de cuidar do seu veículo com praticidade e eficiência. Experimente nossa plataforma e agende seu serviço online.
                    </p>
                    {/* Verifique se o botão ou link desejado está aqui */}
                    <button className="px-6 py-3 font-semibold text-white transition bg-[#075985] rounded-md shadow hover:bg-[#075985]/90">
                        Agendar Serviço
                    </button>
                </section>
            </main>
        </>
    );
}

// --- Arquivo: app\agendamento\page.tsx
// --- Componente: AgendamentoPage
import NavBar from "@/components/nav-bar";

export default function AgendamentoPage(){
    return(
        <>
            <NavBar active="agendamento"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Agendamento</h2>
                </div>
            </main>
        </>

    )
}

// --- Arquivo: app\agendamento\alterar\[id]\page.tsx
// --- Componente: AlterarAgendamentoPage
// app/agendamento/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
// Ícones adicionados:
import { MdEditCalendar, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';

interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string;
    observacao: string | null;
}

export default function AlterarAgendamentoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [dataAgendamento, setDataAgendamento] = useState("");
    const [observacao, setObservacao] = useState("");

    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (id) {
            setIsLoading(true); setError(null); setSuccess(null);
            const fetchAgendamentoData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/agenda/${id}`;
                    const response = await fetch(apiUrl);
                    if (response.status === 404) throw new Error("Agendamento não encontrado.");
                    if (!response.ok) throw new Error(`Erro ao buscar dados: ${response.statusText}`);
                    const data: AgendamentoApiResponseDto = await response.json();

                    setDataAgendamento(data.dataAgendamento ? data.dataAgendamento.split('T')[0] : '');
                    setObservacao(data.observacao || '');

                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados para edição.");
                } finally {
                    setIsLoading(false);
                }
            };
            fetchAgendamentoData();
        } else {
            setError("ID do agendamento inválido na URL.");
            setIsLoading(false);
        }
    }, [id]);

    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!id) { setError("ID inválido para salvar."); return; }
        setIsSaving(true); setError(null); setSuccess(null);

        const agendamentoData = { dataAgendamento, observacao };
        const apiUrl = `http://localhost:8080/rest/agenda/${id}`;

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(agendamentoData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Update Success:", result);
            setSuccess("Agendamento atualizado com sucesso!");
            setTimeout(() => { setSuccess(null); }, 5000);

        } catch (err: any) {
            setError(err.message || "Falha ao salvar alterações.");
        } finally {
            setIsSaving(false);
        }
    };

    if (isLoading) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados do agendamento...</p>
                </main>
            </>
        );
    }

    if (error && !isLoading) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                        <h2 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl mr-2" />
                            Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <Link href="/agendamento/listar">
                                <button className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                    <MdArrowBack />
                                    Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center">
                        <MdEditCalendar className="text-3xl" />
                        Alterar Agendamento (ID: {id})
                    </h2>

                    <form onSubmit={handleUpdate}>
                        {/* Mensagens */}
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <div className="flex items-center gap-2">
                                    <MdErrorOutline className="text-2xl" />
                                    <span>{error}</span>
                                </div>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                    <span className="text-2xl" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        )}
                        {success && (
                            <div className="flex items-center justify-center gap-2 text-green-400 mb-4">
                                <MdCheckCircle className="text-2xl" />
                                <span>{success}</span>
                            </div>
                        )}

                        {/* Campos */}
                        <div className="mb-4">
                            <label htmlFor="dataAgendamento" className="block mb-1">Data do Agendamento:</label>
                            <input
                                type="date"
                                id="dataAgendamento"
                                name="dataAgendamento"
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                                value={dataAgendamento}
                                onChange={(e) => setDataAgendamento(e.target.value)}
                            />
                        </div>

                        <div className="mb-6">
                            <label htmlFor="observacao" className="block mb-1">Observação:</label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={5}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                                value={observacao}
                                onChange={(e) => setObservacao(e.target.value)}
                                maxLength={400}
                            />
                        </div>

                        {/* Botões */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isSaving || isLoading}
                            >
                                {isSaving ? 'Salvando...' : (<><MdSave /> Salvar Alterações</>)}
                            </button>

                            <Link
                                href="/agendamento/listar"
                                className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            >
                                <MdArrowBack />
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


// --- Arquivo: app\agendamento\buscar\page.tsx
// --- Componente: BuscarAgendamentosPage
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdEdit, MdDelete, MdErrorOutline, MdFindInPage } from 'react-icons/md'; // Ícones adicionados

interface AgendamentoParaLista {
    id: number;
    dataAgendamento: string;
    observacao: string;
}

interface PaginatedAgendaResponse {
    content: AgendamentoApiResponseDto[];
    totalPages: number;
    totalElements: number;
    number: number;
    size: number;
}

interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string;
    observacao: string | null;
}

type TipoBuscaAgendamento = 'id' | 'observacao' | 'dataInicio' | 'dataFim';

export default function BuscarAgendamentosPage() {
    const [resultadosBusca, setResultadosBusca] = useState<AgendamentoParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaAgendamento>('observacao');
    const [termoBusca, setTermoBusca] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize] = useState(10);

    const router = useRouter();

    const handleSearch = async (event?: FormEvent<HTMLFormElement>, page = 0) => {
        if (event) event.preventDefault();
        setIsSearching(true);
        setBuscaRealizada(true);
        setError(null);
        setResultadosBusca([]);

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
        });

        if (termoBusca.trim()) {
            if (tipoBusca === 'dataInicio' || tipoBusca === 'dataFim') {
                if (/^\d{4}-\d{2}-\d{2}$/.test(termoBusca.trim())) {
                    params.append(tipoBusca, termoBusca.trim());
                } else {
                    setError("Formato de data inválido. Use AAAA-MM-DD.");
                    setIsSearching(false);
                    setBuscaRealizada(false);
                    return;
                }
            } else {
                params.append(tipoBusca, termoBusca.trim());
            }
        }

        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) throw new Error(`Erro HTTP ${response.status}`);
            const data: PaginatedAgendaResponse = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }),
                observacao: dto.observacao || '',
            }));
            setResultadosBusca(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.message || "Falha ao buscar agendamentos.");
            setResultadosBusca([]);
            setTotalPages(0);
        } finally {
            setIsSearching(false);
        }
    };

    const handlePreviousPage = () => {
        if (currentPage > 0) handleSearch(undefined, currentPage - 1);
    };

    const handleNextPage = () => {
        if (currentPage < totalPages - 1) handleSearch(undefined, currentPage + 1);
    };

    const getPlaceholder = () => {
        switch (tipoBusca) {
            case 'id': return 'Digite o ID...';
            case 'dataInicio': return 'Data Início (AAAA-MM-DD)...';
            case 'dataFim': return 'Data Fim (AAAA-MM-DD)...';
            default: return 'Digite parte da observação...';
        }
    };

    return (
        <>
            <NavBar active="agendamento" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título com ícone */}
                <h1 className="flex items-center justify-center gap-2 text-3xl font-bold mb-6">
                    <MdFindInPage className="text-4xl" /> Buscar Agendamentos
                </h1>

                {/* Formulário de Busca */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select
                            id="tipoBusca"
                            name="tipoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={tipoBusca}
                            onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaAgendamento); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); setError(null); }}
                        >
                            <option value="observacao">Observação</option>
                            <option value="id">ID</option>
                            <option value="dataInicio">Data Início</option>
                        </select>
                    </div>

                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input
                            type={tipoBusca === 'id' ? 'number' : tipoBusca.includes('data') ? 'date' : 'text'}
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={termoBusca}
                            onChange={(e) => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()}
                            required={tipoBusca !== 'observacao'}
                        />
                    </div>

                    <button type="submit" className="flex items-center justify-center gap-2 px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap" disabled={isSearching}>
                        <MdSearch />
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Mensagem de erro */}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <div className="flex items-center gap-2">
                            <MdErrorOutline className="text-2xl" />
                            <span>{error}</span>
                        </div>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                            <span className="text-2xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}

                {/* Resultados */}
                {buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento encontrado.</td></tr>
                            ) : (
                                resultadosBusca.map(agendamento => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4">{agendamento.id}</td>
                                        <td className="px-6 py-4">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        <td className="px-6 py-4 text-center space-x-2">
                                            <Link href={`/agendamento/alterar/${agendamento.id}`}>
                                                <button className="flex items-center justify-center gap-1 px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">
                                                    <MdEdit /> Editar
                                                </button>
                                            </Link>
                                            <button
                                                onClick={() => router.push(`/agendamento/deletar/${agendamento.id}`)}
                                                className="flex items-center justify-center gap-1 px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            >
                                                <MdDelete /> Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Paginação */}
                {buscaRealizada && !isSearching && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Anterior
                        </button>
                        <span className="text-slate-300">Página {currentPage + 1} de {totalPages}</span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Próxima
                        </button>
                    </div>
                )}
            </main>
        </>
    );
}


// --- Arquivo: app\agendamento\cadastrar\page.tsx
// --- Componente: CadastrarAgendamentoPage
// app/agendamento/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdEventAvailable, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md'; // Ícones adicionados

export default function CadastrarAgendamentoPage() {
    const today = new Date().toISOString().split('T')[0];
    const initialState = {
        dataAgendamento: today,
        observacao: ""
    };

    // Estados do Formulário
    const [dataAgendamento, setDataAgendamento] = useState(initialState.dataAgendamento);
    const [observacao, setObservacao] = useState(initialState.observacao);

    // Estados de Controle
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Função para Limpar o Formulário
    const resetForm = () => {
        setDataAgendamento(initialState.dataAgendamento);
        setObservacao(initialState.observacao);
        setError(null);
    };

    // Função para Submeter o Formulário
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true); setError(null); setSuccess(null);

        const agendamentoData = { dataAgendamento, observacao };

        console.log('Salvando agendamento:', JSON.stringify(agendamentoData, null, 2));
        const apiUrl = "http://localhost:8080/rest/agenda";

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(agendamentoData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Save Success:", result);
            setSuccess("Agendamento criado com sucesso!");
            resetForm();
            setTimeout(() => { setSuccess(null); }, 5000);

        } catch (err: any) {
            setError(err.message || "Falha ao criar agendamento.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg">
                    {/* Título com ícone */}
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center">
                        <MdEventAvailable className="text-3xl" />
                        Novo Agendamento
                    </h2>

                    <form onSubmit={handleSubmit}>
                        {/* Mensagens */}
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <div className="flex items-center gap-2">
                                    <MdErrorOutline className="text-2xl" />
                                    <span>{error}</span>
                                </div>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                    <span className="text-2xl" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        )}
                        {success && (
                            <div className="flex items-center justify-center gap-2 text-green-400 mb-4">
                                <MdCheckCircle className="text-2xl" />
                                <span>{success}</span>
                            </div>
                        )}

                        {/* Campos do Formulário */}
                        <div className="mb-4">
                            <label htmlFor="dataAgendamento" className="block mb-1">Data do Agendamento:</label>
                            <input
                                type="date"
                                id="dataAgendamento"
                                name="dataAgendamento"
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                                value={dataAgendamento}
                                onChange={(e) => setDataAgendamento(e.target.value)}
                            />
                        </div>

                        <div className="mb-6">
                            <label htmlFor="observacao" className="block mb-1">Observação:</label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={5}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                                value={observacao}
                                onChange={(e) => setObservacao(e.target.value)}
                                maxLength={400}
                            />
                        </div>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                {isLoading ? 'Salvando...' : (<><MdSave /> Salvar Agendamento</>)}
                            </button>

                            <Link
                                href="/agendamento/listar"
                                className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            >
                                <MdArrowBack />
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


// --- Arquivo: app\agendamento\deletar\[id]\page.tsx
// --- Componente: DeletarAgendamentoPage
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
// Ícones que adicionamos:
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber } from 'react-icons/md';

interface AgendamentoInfo {
    id: number;
    dataAgendamento: string;
    observacao: string | null;
}

export default function DeletarAgendamentoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [agendamentoInfo, setAgendamentoInfo] = useState<AgendamentoInfo | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (id) {
            setIsLoadingInfo(true);
            setError(null);
            const fetchAgendamentoData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/agenda/${id}`;
                    const response = await fetch(apiUrl);
                    if (response.status === 404) throw new Error("Agendamento não encontrado para confirmar exclusão.");
                    if (!response.ok) throw new Error(`Erro ao buscar dados: ${response.statusText}`);
                    const data: AgendamentoInfo = await response.json();
                    setAgendamentoInfo(data);
                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados do agendamento para exclusão.");
                    setAgendamentoInfo(null);
                } finally {
                    setIsLoadingInfo(false);
                }
            };
            fetchAgendamentoData();
        } else {
            setError("ID do agendamento inválido na URL.");
            setIsLoadingInfo(false);
        }
    }, [id]);

    const handleConfirmDelete = async () => {
        if (!id) {
            setError("Não é possível excluir: ID inválido.");
            return;
        }
        setIsDeleting(true);
        setError(null);

        try {
            const apiUrl = `http://localhost:8080/rest/agenda/${id}`;
            const response = await fetch(apiUrl, { method: 'DELETE' });

            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao excluir agendamento: ${errorText || response.statusText}`);
            }
            console.log(`Agendamento ID ${id} excluído com sucesso.`);
            router.push('/agendamento/listar');
        } catch (err: any) {
            setError(err.message || "Falha ao excluir agendamento.");
            setIsDeleting(false);
        }
    };

    const handleCancel = () => {
        router.push('/agendamento/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados para confirmação...</p>
                </main>
            </>
        );
    }

    if (error || !id) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" />
                            Erro
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error || "ID não fornecido."}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdCancel /> Voltar
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    if (!agendamentoInfo) {
        return (
            <>
                <NavBar active="agendamento" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-yellow-400">
                            <MdWarningAmber className="text-3xl" />
                            Agendamento Não Encontrado
                        </h2>
                        <p className="text-center text-yellow-400 bg-yellow-900/50 p-3 rounded border border-yellow-500 mb-6">
                            O agendamento ID {id} não foi encontrado ou pode já ter sido excluído.
                        </p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdCancel /> Voltar
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <MdDeleteForever className="text-3xl" />
                        Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6">Tem certeza que deseja excluir o seguinte agendamento?</p>

                    <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                        <p><strong>ID:</strong> {agendamentoInfo.id}</p>
                        <p><strong>Data:</strong> {new Date(agendamentoInfo.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' })}</p>
                        <p><strong>Observação:</strong> {agendamentoInfo.observacao || '-'}</p>
                    </div>

                    {error && (
                        <p className="text-center text-red-400 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever /> Sim, Excluir</>)}
                        </button>

                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}


// --- Arquivo: app\agendamento\listar\page.tsx
// --- Componente: ListarAgendamentosPage
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
// Importação dos ícones
import { MdAdd, MdEdit, MdDelete, MdEventNote } from 'react-icons/md';

interface AgendamentoParaLista {
    id: number;
    dataAgendamento: string;
    observacao: string;
}

interface PaginatedAgendaResponse {
    content: AgendamentoApiResponseDto[];
    totalPages: number;
    totalElements: number;
    number: number;
    size: number;
}

interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string;
    observacao: string | null;
}

export default function ListarAgendamentosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize] = useState(10);

    const router = useRouter();

    const fetchAgendamentos = async (page = 0) => {
        setIsLoading(true);
        setError(null);

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'dataAgendamento,desc'
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) throw new Error(`Erro HTTP ${response.status}`);
            const data: PaginatedAgendaResponse = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }),
                observacao: dto.observacao || '',
            }));
            setAgendamentos(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.message || "Falha ao carregar agendamentos.");
            setAgendamentos([]);
            setTotalPages(0);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchAgendamentos(currentPage);
    }, [currentPage, pageSize]);

    const handlePreviousPage = () => {
        if (currentPage > 0) fetchAgendamentos(currentPage - 1);
    };

    const handleNextPage = () => {
        if (currentPage < totalPages - 1) fetchAgendamentos(currentPage + 1);
    };

    return (
        <>
            <NavBar active="agendamento" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="flex items-center gap-2 text-3xl font-bold">
                        <MdEventNote className="text-4xl" />
                        Agendamentos
                    </h1>
                    <Link href="/agendamento/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            <MdAdd />
                            Novo Agendamento
                        </button>
                    </Link>
                </div>

                {/* Mensagem de erro */}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <span className="block sm:inline">{error}</span>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                            <span className="text-2xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}

                {/* Tabela de Agendamentos */}
                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando agendamentos...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {agendamentos.length === 0 ? (
                                <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento encontrado.</td></tr>
                            ) : (
                                agendamentos.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-md truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center">
                                            <div className="flex justify-center gap-2">
                                                <Link href={`/agendamento/alterar/${agendamento.id}`}>
                                                    <button className="flex items-center gap-1 px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">
                                                        <MdEdit />
                                                        Editar
                                                    </button>
                                                </Link>
                                                <button
                                                    onClick={() => router.push(`/agendamento/deletar/${agendamento.id}`)}
                                                    className="flex items-center gap-1 px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                                >
                                                    <MdDelete />
                                                    Deletar
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Controles de Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Anterior
                        </button>
                        <span className="text-slate-300">Página {currentPage + 1} de {totalPages}</span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Próxima
                        </button>
                    </div>
                )}
            </main>
        </>
    );
}


// --- Arquivo: app\clientes\page.tsx
// --- Componente: ClientesMenuPage
// app/clientes/page.tsx
"use client";

import Link from 'next/link';
import NavBar from '@/components/nav-bar';

export default function ClientesMenuPage() {

    return (
        <>
            {/* Passa a prop 'active' correta para a NavBar */}
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-8 text-center">Gerenciar Clientes</h1>

                <div className="flex flex-col items-center gap-6 mt-10 md:flex-row md:justify-center">
                    {/* Botão/Link para Listar */}
                    <Link href="/clientes/listar">
                        <button className="w-60 px-6 py-3 text-lg font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-colors">
                            Listar Clientes
                        </button>
                    </Link>

                    {/* Botão/Link para Cadastrar */}
                    <Link href="/clientes/cadastrar">
                        <button className="w-60 px-6 py-3 text-lg font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-colors">
                            Cadastrar Novo Cliente
                        </button>
                    </Link>

                    {/* Você pode adicionar mais botões aqui para outras ações se desejar */}

                </div>
            </main>
        </>
    );
}


// --- Arquivo: app\clientes\alterar\[idCliente]\[idEndereco]\page.tsx
// --- Componente: AlterarClientePage
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import {
    MdEdit,
    MdPerson,
    MdBadge,
    MdCalendarToday,
    MdWork,
    MdPhone,
    MdEmail,
    MdLocationOn,
    MdHome
} from 'react-icons/md';

// Função auxiliar para limpar máscaras
const cleanMaskedValue = (value: string): string =>
    value.replace(/\D/g, '');

// Interface para a resposta da API
interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    sexo: string;
    dataNascimento: string;
    atividadeProfissional: string;
    endereco: {
        codigo: number;
        numero: number;
        cep: string;
        logradouro: string;
        cidade: string;
        bairro: string;
        estado: string;
        complemento: string | null;
    } | null;
    contato: {
        codigo: number;
        celular: string;
        email: string;
        contato: string;
    } | null;
}

export default function AlterarClientePage() {
    const params = useParams();
    const router = useRouter();

    const idCliente = typeof params?.idCliente === 'string'
        ? parseInt(params.idCliente, 10)
        : null;
    const idEndereco = typeof params?.idEndereco === 'string'
        ? parseInt(params.idEndereco, 10)
        : null;

    // Estados do Formulário
    const [tipoCliente, setTipoCliente] = useState("PF");
    const [nome, setNome] = useState("");
    const [sobrenome, setSobrenome] = useState("");
    const [sexo, setSexo] = useState("M");
    const [tipoDocumento, setTipoDocumento] = useState("CPF");
    const [numeroDocumento, setNumeroDocumento] = useState("");
    const [dataNascimento, setDataNascimento] = useState("");
    const [atividadeProfissional, setAtividadeProfissional] = useState("");
    const [celular, setCelular] = useState("");
    const [email, setEmail] = useState("");
    const [contato, setContato] = useState("");
    const [numeroCasa, setNumeroCasa] = useState("");
    const [cep, setCep] = useState("");
    const [logradouro, setLogradouro] = useState("");
    const [bairro, setBairro] = useState("");
    const [cidade, setCidade] = useState("");
    const [estado, setEstado] = useState("");
    const [complemento, setComplemento] = useState("");

    // Controle de UI
    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Busca inicial dos dados
    useEffect(() => {
        if (idCliente && idEndereco) {
            setIsLoading(true);
            setError(null);
            const fetchData = async () => {
                try {
                    const resp = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`);
                    if (resp.status === 404) throw new Error("Cliente não encontrado.");
                    if (!resp.ok) throw new Error(`Erro: ${resp.statusText}`);
                    const data: ClienteApiResponseDto = await resp.json();

                    setTipoCliente(data.tipoCliente || "PF");
                    setNome(data.nome || "");
                    setSobrenome(data.sobrenome || "");
                    setSexo(data.sexo || "M");
                    setTipoDocumento(data.tipoDocumento || "CPF");
                    setNumeroDocumento(data.numeroDocumento || "");
                    setDataNascimento(data.dataNascimento.split('T')[0] || "");
                    setAtividadeProfissional(data.atividadeProfissional || "");
                    setCelular(data.contato?.celular || "");
                    setEmail(data.contato?.email || "");
                    setContato(data.contato?.contato || "");
                    setNumeroCasa(data.endereco?.numero.toString() || "");
                    setCep(data.endereco?.cep || "");
                    setLogradouro(data.endereco?.logradouro || "");
                    setBairro(data.endereco?.bairro || "");
                    setCidade(data.endereco?.cidade || "");
                    setEstado(data.endereco?.estado || "");
                    setComplemento(data.endereco?.complemento || "");
                } catch (err: any) {
                    setError(err.message);
                } finally {
                    setIsLoading(false);
                }
            };
            fetchData();
        } else {
            setError("IDs inválidos na URL.");
            setIsLoading(false);
        }
    }, [idCliente, idEndereco]);

    // Submissão do formulário atualizado
    const handleUpdate = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!idCliente || !idEndereco) {
            setError("IDs inválidos.");
            return;
        }

        setIsSaving(true);
        setError(null);
        setSuccess(null);

        const cleanedDoc = cleanMaskedValue(numeroDocumento);
        const cleanedCel = cleanMaskedValue(celular);
        const cleanedCep = cleanMaskedValue(cep);

        const payload = {
            tipoCliente,
            nome,
            sobrenome,
            sexo,
            tipoDocumento,
            numeroDocumento: cleanedDoc,
            dataNascimento,
            atividadeProfissional,
            endereco: {
                numero: parseInt(numeroCasa, 10),
                cep: cleanedCep,
                logradouro,
                bairro,
                localidade: cidade,
                uf: estado,
                complemento
            },
            contato: { celular: cleanedCel, email, contato }
        };

        try {
            const resp = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (!resp.ok) {
                const errJson = await resp.json().catch(() => ({}));
                throw new Error(errJson.message || resp.statusText);
            }
            setSuccess("✅ Cliente atualizado com sucesso!");
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(`❌ ${err.message}`);
        } finally {
            setIsSaving(false);
        }
    };

    // Busca de CEP
    const handleCepChange = async (value: string) => {
        const mask = cleanMaskedValue(value);
        setCep(value);
        setLogradouro("");
        setBairro("");
        setCidade("");
        setEstado("");

        if (mask.length === 8) {
            setIsSaving(true);
            setError(null);
            try {
                const resp = await fetch(`https://viacep.com.br/ws/${mask}/json/`);
                if (!resp.ok) throw new Error("CEP não encontrado.");
                const data = await resp.json();
                if (data.erro) throw new Error("CEP inválido.");
                setLogradouro(data.logradouro || "");
                setBairro(data.bairro || "");
                setCidade(data.localidade || "");
                setEstado(data.uf || "");
            } catch (e: any) {
                setError(`Erro CEP: ${e.message}`);
            } finally {
                setIsSaving(false);
            }
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    if (isLoading) {
        return (
            <>
                <NavBar active="clientes" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados do cliente...</p>
                </main>
            </>
        );
    }

    if (error && !nome) {
        return (
            <>
                <NavBar active="clientes" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl max-w-2xl mx-auto">
                        <h2 className="flex items-center justify-center text-2xl font-bold mb-4 text-red-400">
                            <MdEdit className="mr-2 text-3xl" />
                            Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">
                            {error}
                        </p>
                        <div className="text-center">
                            <Link href="/clientes/listar">
                                <button className="px-6 py-3 bg-slate-600 text-white rounded-md shadow hover:bg-slate-700">
                                    Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="clientes" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="flex items-center justify-center text-2xl md:text-3xl font-bold mb-6">
                        <MdEdit className="mr-2 text-3xl" />
                        Alterar Cliente (ID: {idCliente})
                    </h2>

                    {error && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500" role="alert">
                            <span className="block sm:inline">{error}</span>
                            <button
                                type="button"
                                className="absolute top-0 right-0 px-4 py-3 text-red-400 hover:text-red-200"
                                onClick={() => setError(null)}
                                aria-label="Fechar"
                            >
                                <span className="text-2xl">&times;</span>
                            </button>
                        </div>
                    )}

                    <form onSubmit={handleUpdate}>

                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Tipo de Cliente */}
                                <div>
                                    <label htmlFor="tipo_cliente" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Tipo de Cliente:
                                    </label>
                                    <select
                                        id="tipo_cliente"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={tipoCliente}
                                        onChange={e => setTipoCliente(e.target.value)}
                                    >
                                        <option value="PF">Pessoa Física</option>
                                        <option value="PJ">Pessoa Jurídica</option>
                                    </select>
                                </div>
                                {/* Nome */}
                                <div>
                                    <label htmlFor="nome" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Nome:
                                    </label>
                                    <input
                                        id="nome"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={nome}
                                        onChange={e => setNome(e.target.value)}
                                    />
                                </div>
                                {/* Sobrenome */}
                                <div>
                                    <label htmlFor="sobrenome" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Sobrenome:
                                    </label>
                                    <input
                                        id="sobrenome"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={sobrenome}
                                        onChange={e => setSobrenome(e.target.value)}
                                    />
                                </div>
                                {/* Sexo */}
                                <div>
                                    <label htmlFor="sexo" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Sexo:
                                    </label>
                                    <select
                                        id="sexo"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={sexo}
                                        onChange={e => setSexo(e.target.value)}
                                    >
                                        <option value="M">Masculino</option>
                                        <option value="F">Feminino</option>
                                        <option value="O">Outro</option>
                                    </select>
                                </div>
                                {/* Documento */}
                                <div>
                                    <label htmlFor="tipo_documento" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Documento:
                                    </label>
                                    <select
                                        id="tipo_documento"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={tipoDocumento}
                                        onChange={e => { setTipoDocumento(e.target.value); setNumeroDocumento(''); }}
                                    >
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>
                                {/* Nº Documento */}
                                <div>
                                    <label htmlFor="numero_documento" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Número:
                                    </label>
                                    <IMaskInput
                                        id="numero_documento"
                                        mask={tipoDocumento === 'CPF' ? cpfMask : cnpjMask}
                                        unmask={false}
                                        value={numeroDocumento}
                                        onAccept={v => setNumeroDocumento(v)}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                                {/* Nascimento */}
                                <div>
                                    <label htmlFor="data_nascimento" className="block mb-1 flex items-center">
                                        <MdCalendarToday className="mr-2" /> Nascimento:
                                    </label>
                                    <input
                                        id="data_nascimento"
                                        type="date"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 date-input-fix"
                                        value={dataNascimento}
                                        onChange={e => setDataNascimento(e.target.value)}
                                    />
                                </div>
                                {/* Profissão */}
                                <div>
                                    <label htmlFor="atividade_profissional" className="block mb-1 flex items-center">
                                        <MdWork className="mr-2" /> Profissão:
                                    </label>
                                    <input
                                        id="atividade_profissional"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={atividadeProfissional}
                                        onChange={e => setAtividadeProfissional(e.target.value)}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Celular */}
                                <div>
                                    <label htmlFor="celular" className="block mb-1 flex items-center">
                                        <MdPhone className="mr-2" /> Celular:
                                    </label>
                                    <IMaskInput
                                        id="celular"
                                        mask="(00) 00000-0000"
                                        unmask={false}
                                        value={celular}
                                        onAccept={v => setCelular(v)}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                                {/* E-mail */}
                                <div>
                                    <label htmlFor="email" className="block mb-1 flex items-center">
                                        <MdEmail className="mr-2" /> E-mail:
                                    </label>
                                    <input
                                        id="email"
                                        type="email"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}
                                    />
                                </div>
                                {/* Contato */}
                                <div className="md:col-span-2">
                                    <label htmlFor="contato" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Contato:
                                    </label>
                                    <input
                                        id="contato"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={contato}
                                        onChange={e => setContato(e.target.value)}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                {/* CEP */}
                                <div>
                                    <label htmlFor="cep" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> CEP:
                                    </label>
                                    <IMaskInput
                                        id="cep"
                                        mask="00000-000"
                                        unmask={false}
                                        value={cep}
                                        onAccept={handleCepChange}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>
                                {/* Logradouro */}
                                <div className="md:col-span-2">
                                    <label htmlFor="logradouro" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Logradouro:
                                    </label>
                                    <input
                                        id="logradouro"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={logradouro}
                                    />
                                </div>
                                {/* Número */}
                                <div>
                                    <label htmlFor="numeroCasa" className="block mb-1 flex items-center">
                                        <MdHome className="mr-2" /> Número:
                                    </label>
                                    <input
                                        id="numeroCasa"
                                        type="text"
                                        maxLength={8}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={numeroCasa}
                                        onChange={e => setNumeroCasa(e.target.value)}
                                    />
                                </div>
                                {/* Complemento */}
                                <div>
                                    <label htmlFor="complemento" className="block mb-1 flex items-center">
                                        <MdHome className="mr-2" /> Complemento:
                                    </label>
                                    <input
                                        id="complemento"
                                        type="text"
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={complemento}
                                        onChange={e => setComplemento(e.target.value)}
                                    />
                                </div>
                                {/* Bairro */}
                                <div>
                                    <label htmlFor="bairro" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Bairro:
                                    </label>
                                    <input
                                        id="bairro"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={bairro}
                                    />
                                </div>
                                {/* Cidade */}
                                <div>
                                    <label htmlFor="cidade" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Cidade:
                                    </label>
                                    <input
                                        id="cidade"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={cidade}
                                    />
                                </div>
                                {/* Estado */}
                                <div>
                                    <label htmlFor="estado" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Estado:
                                    </label>
                                    <input
                                        id="estado"
                                        type="text"
                                        maxLength={2}
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={estado}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botões */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                disabled={isSaving}
                                className={`px-6 py-3 bg-green-600 text-white rounded-md shadow hover:bg-green-700 focus:ring-2 focus:ring-green-500 transition ${
                                    isSaving ? "opacity-50 cursor-not-allowed" : ""
                                }`}
                            >
                                {isSaving ? (
                                    'Salvando...'
                                ) : (
                                    <span className="flex items-center">
                    <MdEdit className="mr-2" />
                    Salvar Alterações
                  </span>
                                )}
                            </button>
                            <Link
                                href="/clientes/listar"
                                className="px-6 py-3 bg-slate-600 text-white rounded-md shadow hover:bg-slate-700 text-center focus:ring-2 focus:ring-slate-500"
                            >
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* CSS global */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


// --- Arquivo: app\clientes\buscar\page.tsx
// --- Componente: BuscarClientesPage
// app/clientes/buscar/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdSearch,
    MdFilterList,
    MdPerson,
    MdBadge,
    MdEmail,
    MdLocationOn,
    MdEdit,
    MdDelete
} from 'react-icons/md';

// Interfaces
interface ClienteParaLista {
    idCli: number;
    idEndereco: number;
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}

interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: { codigo: number; cidade: string; estado: string } | null;
    contato: { celular: string; email: string } | null;
}

// Tipos de busca
type TipoBusca = 'nome' | 'id' | 'doc';

export default function BuscarClientesPage() {
    const [todosClientes, setTodosClientes] = useState<ClienteParaLista[]>([]);
    const [resultadosBusca, setResultadosBusca] = useState<ClienteParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBusca>('nome');
    const [termoBusca, setTermoBusca] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // Carrega todos os clientes uma única vez
    useEffect(() => {
        const fetchTodosClientes = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const resp = await fetch("http://localhost:8080/rest/clientes/all");
                if (!resp.ok) throw new Error(`Erro HTTP ${resp.status}: ${resp.statusText}`);
                const data: ClienteApiResponseDto[] = await resp.json();
                const formatados = data.map(dto => ({
                    idCli: dto.idCli,
                    idEndereco: dto.endereco?.codigo || 0,
                    nomeCompleto: `${dto.nome} ${dto.sobrenome}`.trim(),
                    documento: dto.numeroDocumento || 'N/A',
                    email: dto.contato?.email || 'N/A',
                    cidadeEstado: dto.endereco
                        ? `${dto.endereco.cidade} - ${dto.endereco.estado}`
                        : 'N/A'
                }));
                setTodosClientes(formatados);
            } catch (err: any) {
                setError(err.message);
            } finally {
                setIsLoading(false);
            }
        };
        fetchTodosClientes();
    }, []);

    // Placeholder dinâmico
    const getPlaceholder = () => {
        switch (tipoBusca) {
            case 'nome': return 'Digite parte do nome...';
            case 'id':   return 'Digite o Código do Cliente...';
            case 'doc':  return 'Digite parte do CPF ou CNPJ...';
            default:     return '';
        }
    };

    // Executa a busca client-side
    const handleSearch = (e?: FormEvent) => {
        if (e) e.preventDefault();
        setIsSearching(true);
        setBuscaRealizada(true);

        const q = termoBusca.trim().toLowerCase();
        if (!q) {
            setResultadosBusca([]);
            setIsSearching(false);
            return;
        }

        let resultados: ClienteParaLista[] = [];
        switch (tipoBusca) {
            case 'nome':
                resultados = todosClientes.filter(c =>
                    c.nomeCompleto.toLowerCase().includes(q)
                );
                break;
            case 'id':
                resultados = todosClientes.filter(c =>
                    c.idCli.toString() === q.replace(/\D/g, '')
                );
                break;
            case 'doc':
                const docQ = q.replace(/\D/g, '');
                resultados = todosClientes.filter(c =>
                    c.documento.replace(/\D/g, '').includes(docQ)
                );
                break;
        }

        setResultadosBusca(resultados);
        setIsSearching(false);
    };

    // Exclui cliente
    const handleDelete = async (idCli: number, idEnd: number) => {
        if (!window.confirm(`Excluir cliente ID ${idCli}?`)) return;
        try {
            const resp = await fetch(
                `http://localhost:8080/rest/clientes/${idCli}/${idEnd}`,
                { method: 'DELETE' }
            );
            if (!resp.ok) throw new Error(`Falha: ${resp.statusText}`);
            setTodosClientes(prev =>
                prev.filter(c => !(c.idCli === idCli && c.idEndereco === idEnd))
            );
            setResultadosBusca(prev =>
                prev.filter(c => !(c.idCli === idCli && c.idEndereco === idEnd))
            );
            alert('Cliente excluído com sucesso!');
        } catch (err: any) {
            setError(err.message);
        }
    };

    return (
        <>
            <NavBar active="clientes" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center flex items-center justify-center">
                    <MdSearch className="inline-block mr-2 text-4xl" />
                    Buscar Clientes
                </h1>

                <form
                    onSubmit={handleSearch}
                    className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end"
                >
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300 flex items-center">
                            <MdFilterList className="mr-2" />
                            Buscar por:
                        </label>
                        <select
                            id="tipoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"
                            value={tipoBusca}
                            onChange={e => {
                                setTipoBusca(e.target.value as TipoBusca);
                                setTermoBusca('');
                                setResultadosBusca([]);
                                setBuscaRealizada(false);
                            }}
                        >
                            <option value="nome">Nome</option>
                            <option value="id">Código</option>
                            <option value="doc">Documento</option>
                        </select>
                    </div>

                    <div className="flex-1">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300 flex items-center">
                            <MdSearch className="mr-2" />
                            Termo de busca:
                        </label>
                        <input
                            type={tipoBusca === 'id' ? 'number' : 'text'}
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"
                            value={termoBusca}
                            onChange={e => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()}
                            required
                        />
                    </div>

                    <button
                        type="submit"
                        disabled={isLoading || isSearching}
                        className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:ring-2 focus:ring-sky-500 flex items-center"
                    >
                        {isSearching
                            ? 'Buscando...'
                            : (
                                <>
                                    <MdSearch className="mr-2" />
                                    Buscar
                                </>
                            )}
                    </button>
                </form>

                {isLoading && (
                    <p className="text-center text-sky-300 py-4">Carregando dados base...</p>
                )}
                {error && (
                    <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500">
                        {error}
                    </p>
                )}

                {!isLoading && !error && buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg flex items-center">
                            <MdSearch className="mr-2" />
                            Resultados da Busca
                        </h2>
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase">
                                    Nome
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase">
                                    Documento
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase">
                                    E-mail
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase">
                                    Cidade/UF
                                </th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase">
                                    Ações
                                </th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr>
                                    <td colSpan={5} className="px-6 py-4 text-center text-slate-400">
                                        Buscando...
                                    </td>
                                </tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr>
                                    <td colSpan={5} className="px-6 py-4 text-center text-slate-400">
                                        Nenhum cliente encontrado.
                                    </td>
                                </tr>
                            ) : (
                                resultadosBusca.map(c => (
                                    <tr key={`${c.idCli}-${c.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{c.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            <Link href={`/clientes/alterar/${c.idCli}/${c.idEndereco}`}>
                                                <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center">
                                                    <MdEdit className="mr-1" />
                                                    Alterar
                                                </button>
                                            </Link>
                                            <button
                                                onClick={() => handleDelete(c.idCli, c.idEndereco)}
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center"
                                            >
                                                <MdDelete className="mr-1" />
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
        </>
    );
}


// --- Arquivo: app\clientes\cadastrar\page.tsx
// --- Componente: CadastrarPage
"use client";

import NavBar from "@/components/nav-bar";
import { useState, FormEvent } from "react";
import { IMaskInput } from "react-imask";
import {
    MdPersonAddAlt1,
    MdPerson,
    MdBadge,
    MdCalendarToday,
    MdWork,
    MdPhone,
    MdEmail,
    MdLocationOn,
    MdHome
} from "react-icons/md";

// Função auxiliar para limpar máscaras (remover não-dígitos)
const cleanMaskedValue = (value: string): string => value.replace(/\D/g, '');

export default function CadastrarPage() {
    // --- Estados Iniciais ---
    const initialState = {
        tipoCliente: "PF", nome: "", sobrenome: "", sexo: "M", tipoDocumento: "CPF",
        numeroDocumento: "", dataNascimento: "", atividadeProfissional: "",
        celular: "", email: "", contato: "", numeroCasa: "", cep: "",
        logradouro: "", bairro: "", cidade: "", estado: "", complemento: ""
    };

    // --- Variáveis de Estado ---
    const [tipoCliente, setTipoCliente] = useState(initialState.tipoCliente);
    const [nome, setNome] = useState(initialState.nome);
    const [sobrenome, setSobrenome] = useState(initialState.sobrenome);
    const [sexo, setSexo] = useState(initialState.sexo);
    const [tipoDocumento, setTipoDocumento] = useState(initialState.tipoDocumento);
    const [numeroDocumento, setNumeroDocumento] = useState(initialState.numeroDocumento);
    const [dataNascimento, setDataNascimento] = useState(initialState.dataNascimento);
    const [atividadeProfissional, setAtividadeProfissional] = useState(initialState.atividadeProfissional);
    const [celular, setCelular] = useState(initialState.celular);
    const [email, setEmail] = useState(initialState.email);
    const [contato, setContato] = useState(initialState.contato);
    const [numeroCasa, setNumeroCasa] = useState(initialState.numeroCasa);
    const [cep, setCep] = useState(initialState.cep);
    const [logradouro, setLogradouro] = useState(initialState.logradouro);
    const [bairro, setBairro] = useState(initialState.bairro);
    const [cidade, setCidade] = useState(initialState.cidade);
    const [estado, setEstado] = useState(initialState.estado);
    const [complemento, setComplemento] = useState(initialState.complemento);

    // --- Feedback da API ---
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // --- Limpa o formulário ---
    const resetForm = () => {
        setTipoCliente(initialState.tipoCliente);
        setNome(initialState.nome);
        setSobrenome(initialState.sobrenome);
        setSexo(initialState.sexo);
        setTipoDocumento(initialState.tipoDocumento);
        setNumeroDocumento(initialState.numeroDocumento);
        setDataNascimento(initialState.dataNascimento);
        setAtividadeProfissional(initialState.atividadeProfissional);
        setCelular(initialState.celular);
        setEmail(initialState.email);
        setContato(initialState.contato);
        setNumeroCasa(initialState.numeroCasa);
        setCep(initialState.cep);
        setLogradouro(initialState.logradouro);
        setBairro(initialState.bairro);
        setCidade(initialState.cidade);
        setEstado(initialState.estado);
        setComplemento(initialState.complemento);
        setError(null);
    };

    // --- Envia para API ---
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        const cleanedNumeroDocumento = cleanMaskedValue(numeroDocumento);
        const cleanedCelular = cleanMaskedValue(celular);
        const cleanedCep = cleanMaskedValue(cep);

        const clienteData = {
            tipoCliente, nome, sobrenome, sexo, tipoDocumento,
            numeroDocumento: cleanedNumeroDocumento, dataNascimento, atividadeProfissional,
            endereco: {
                numero: parseInt(numeroCasa, 10), cep: cleanedCep, logradouro, bairro,
                localidade: cidade, uf: estado, complemento,
            },
            contato: { celular: cleanedCelular, email, contato }
        };

        try {
            const response = await fetch("http://localhost:8080/rest/clientes", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(clienteData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({
                    message: `Erro ${response.status}: ${response.statusText}.`
                }));
                throw new Error(errorData.message);
            }

            await response.json();
            setSuccess("✅ Cliente cadastrado com sucesso!");
            resetForm();

            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(`❌ ${err.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    // --- Busca CEP via viacep ---
    const handleCepChange = async (value: string) => {
        const maskedCep = value;
        const newCep = cleanMaskedValue(maskedCep);
        setCep(maskedCep);
        setLogradouro(''); setBairro(''); setCidade(''); setEstado('');

        if (newCep.length === 8) {
            setIsLoading(true);
            setError(null);
            try {
                const resp = await fetch(`https://viacep.com.br/ws/${newCep}/json/`);
                if (!resp.ok) throw new Error('CEP não encontrado');
                const data = await resp.json();
                if (data.erro) throw new Error('CEP inválido');
                setLogradouro(data.logradouro || '');
                setBairro(data.bairro || '');
                setCidade(data.localidade || '');
                setEstado(data.uf || '');
            } catch (e: any) {
                setError(`❌ Erro ao buscar CEP: ${e.message}`);
            } finally {
                setIsLoading(false);
            }
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    return (
        <>
            <NavBar active="cadastrar" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center flex items-center justify-center">
                        <MdPersonAddAlt1 className="inline-block mr-2 text-3xl" />
                        Cadastrar Cliente
                    </h2>

                    {error && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500" role="alert">
                            <span className="block sm:inline">{error}</span>
                            <button
                                type="button"
                                className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200"
                                onClick={() => setError(null)}
                                aria-label="Fechar"
                            >
                                <span className="text-2xl">&times;</span>
                            </button>
                        </div>
                    )}

                    <form onSubmit={handleSubmit}>

                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                                {/* Tipo de Cliente */}
                                <div>
                                    <label htmlFor="tipo_cliente" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Tipo de Cliente:
                                    </label>
                                    <select
                                        id="tipo_cliente"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={tipoCliente}
                                        onChange={e => setTipoCliente(e.target.value)}
                                    >
                                        <option value="PF">Pessoa Física</option>
                                        <option value="PJ">Pessoa Jurídica</option>
                                    </select>
                                </div>

                                {/* Nome */}
                                <div>
                                    <label htmlFor="nome" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Nome:
                                    </label>
                                    <input
                                        id="nome"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={nome}
                                        onChange={e => setNome(e.target.value)}
                                    />
                                </div>

                                {/* Sobrenome */}
                                <div>
                                    <label htmlFor="sobrenome" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Sobrenome:
                                    </label>
                                    <input
                                        id="sobrenome"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={sobrenome}
                                        onChange={e => setSobrenome(e.target.value)}
                                    />
                                </div>

                                {/* Sexo */}
                                <div>
                                    <label htmlFor="sexo" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Sexo:
                                    </label>
                                    <select
                                        id="sexo"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={sexo}
                                        onChange={e => setSexo(e.target.value)}
                                    >
                                        <option value="M">Masculino</option>
                                        <option value="F">Feminino</option>
                                        <option value="O">Outro</option>
                                    </select>
                                </div>

                                {/* Tipo de Documento */}
                                <div>
                                    <label htmlFor="tipo_documento" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Documento:
                                    </label>
                                    <select
                                        id="tipo_documento"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={tipoDocumento}
                                        onChange={e => { setTipoDocumento(e.target.value); setNumeroDocumento(''); }}
                                    >
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>

                                {/* Número do Documento */}
                                <div>
                                    <label htmlFor="numero_documento" className="block mb-1 flex items-center">
                                        <MdBadge className="mr-2" /> Número:
                                    </label>
                                    <IMaskInput
                                        id="numero_documento"
                                        mask={tipoDocumento === 'CPF' ? cpfMask : cnpjMask}
                                        unmask={false}
                                        value={numeroDocumento}
                                        onAccept={value => setNumeroDocumento(value)}
                                        required
                                        placeholder={tipoDocumento === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>

                                {/* Data de Nascimento */}
                                <div>
                                    <label htmlFor="data_nascimento" className="block mb-1 flex items-center">
                                        <MdCalendarToday className="mr-2" /> Nascimento:
                                    </label>
                                    <input
                                        id="data_nascimento"
                                        type="date"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500 date-input-fix"
                                        value={dataNascimento}
                                        onChange={e => setDataNascimento(e.target.value)}
                                    />
                                </div>

                                {/* Atividade Profissional */}
                                <div>
                                    <label htmlFor="atividade_profissional" className="block mb-1 flex items-center">
                                        <MdWork className="mr-2" /> Profissão:
                                    </label>
                                    <input
                                        id="atividade_profissional"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={atividadeProfissional}
                                        onChange={e => setAtividadeProfissional(e.target.value)}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                                {/* Celular */}
                                <div>
                                    <label htmlFor="celular" className="block mb-1 flex items-center">
                                        <MdPhone className="mr-2" /> Celular:
                                    </label>
                                    <IMaskInput
                                        id="celular"
                                        mask="(00) 00000-0000"
                                        unmask={false}
                                        value={celular}
                                        onAccept={value => setCelular(value)}
                                        required
                                        placeholder="(99) 99999-9999"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>

                                {/* E-mail */}
                                <div>
                                    <label htmlFor="email" className="block mb-1 flex items-center">
                                        <MdEmail className="mr-2" /> E-mail:
                                    </label>
                                    <input
                                        id="email"
                                        type="email"
                                        required
                                        placeholder="exemplo@dominio.com"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}
                                    />
                                </div>

                                {/* Contato Principal */}
                                <div className="md:col-span-2">
                                    <label htmlFor="contato" className="block mb-1 flex items-center">
                                        <MdPerson className="mr-2" /> Contato Principal:
                                    </label>
                                    <input
                                        id="contato"
                                        type="text"
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={contato}
                                        onChange={e => setContato(e.target.value)}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">

                                {/* CEP */}
                                <div>
                                    <label htmlFor="cep" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> CEP:
                                    </label>
                                    <IMaskInput
                                        id="cep"
                                        mask="00000-000"
                                        unmask={false}
                                        value={cep}
                                        onAccept={handleCepChange}
                                        required
                                        placeholder="00000-000"
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                    />
                                </div>

                                {/* Logradouro */}
                                <div className="md:col-span-2">
                                    <label htmlFor="logradouro" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Logradouro:
                                    </label>
                                    <input
                                        id="logradouro"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={logradouro}
                                    />
                                </div>

                                {/* Número */}
                                <div>
                                    <label htmlFor="numeroCasa" className="block mb-1 flex items-center">
                                        <MdHome className="mr-2" /> Número:
                                    </label>
                                    <input
                                        id="numeroCasa"
                                        type="text"
                                        maxLength={8}
                                        required
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={numeroCasa}
                                        onChange={e => setNumeroCasa(e.target.value)}
                                    />
                                </div>

                                {/* Complemento */}
                                <div>
                                    <label htmlFor="complemento" className="block mb-1 flex items-center">
                                        <MdHome className="mr-2" /> Complemento:
                                    </label>
                                    <input
                                        id="complemento"
                                        type="text"
                                        maxLength={100}
                                        className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-sky-500"
                                        value={complemento}
                                        onChange={e => setComplemento(e.target.value)}
                                    />
                                </div>

                                {/* Bairro */}
                                <div>
                                    <label htmlFor="bairro" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Bairro:
                                    </label>
                                    <input
                                        id="bairro"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={bairro}
                                    />
                                </div>

                                {/* Cidade */}
                                <div>
                                    <label htmlFor="cidade" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Cidade:
                                    </label>
                                    <input
                                        id="cidade"
                                        type="text"
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={cidade}
                                    />
                                </div>

                                {/* Estado */}
                                <div>
                                    <label htmlFor="estado" className="block mb-1 flex items-center">
                                        <MdLocationOn className="mr-2" /> Estado:
                                    </label>
                                    <input
                                        id="estado"
                                        type="text"
                                        maxLength={2}
                                        readOnly
                                        required
                                        className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed"
                                        value={estado}
                                    />
                                </div>
                            </div>
                        </fieldset>

                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botão de Envio */}
                        <div className="flex justify-center mt-6">
                            <button
                                type="submit"
                                disabled={isLoading}
                                className={`px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:ring-2 focus:ring-sky-500 transition ${
                                    isLoading ? "opacity-50 cursor-not-allowed" : ""
                                }`}
                            >
                                {isLoading ? (
                                    "Cadastrando..."
                                ) : (
                                    <span className="flex items-center">
                    <MdPersonAddAlt1 className="inline-block mr-2" />
                    Cadastrar Cliente
                  </span>
                                )}
                            </button>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


// --- Arquivo: app\clientes\deletar\page.tsx
// --- Componente: ListarClientesPage
// app/clientes/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import {
    MdList,
    MdPerson,
    MdBadge,
    MdEmail,
    MdLocationOn,
    MdEdit,
    MdDelete,
    MdPersonAdd
} from 'react-icons/md';

// Interfaces
interface ClienteParaLista {
    idCli: number;
    idEndereco: number;
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}
interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: { codigo: number; cidade: string; estado: string } | null;
    contato: { celular: string; email: string } | null;
}

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Modal de delete
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [clienteParaDeletar, setClienteParaDeletar] = useState<ClienteParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);

    // Busca clientes
    const fetchClientes = async () => {
        setIsLoading(true);
        setError(null);
        setSuccess(null);
        try {
            const resp = await fetch("http://localhost:8080/rest/clientes/all");
            if (!resp.ok) throw new Error(`Erro HTTP ${resp.status}: ${resp.statusText}`);
            const data: ClienteApiResponseDto[] = await resp.json();
            const formatados = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0,
                nomeCompleto: `${dto.nome} ${dto.sobrenome}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A',
                cidadeEstado: dto.endereco
                    ? `${dto.endereco.cidade} - ${dto.endereco.estado}`
                    : 'N/A'
            }));
            setClientes(formatados);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchClientes();
    }, []);

    // Abre modal
    const handleDeleteClick = (cliente: ClienteParaLista) => {
        setClienteParaDeletar(cliente);
        setShowDeleteModal(true);
        setError(null);
        setSuccess(null);
    };

    // Cancela modal
    const cancelDelete = () => {
        setShowDeleteModal(false);
        setClienteParaDeletar(null);
    };

    // Confirma deleção
    const confirmDelete = async () => {
        if (!clienteParaDeletar) return;
        setIsDeleting(true);
        setError(null);
        setSuccess(null);
        const { idCli, idEndereco } = clienteParaDeletar;
        try {
            const resp = await fetch(
                `http://localhost:8080/rest/clientes/${idCli}/${idEndereco}`,
                { method: 'DELETE' }
            );
            if (!resp.ok) {
                const txt = await resp.text().catch(() => resp.statusText);
                throw new Error(txt);
            }
            setSuccess("Cliente excluído com sucesso!");
            setClientes(prev => prev.filter(c => !(c.idCli === idCli && c.idEndereco === idEndereco)));
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsDeleting(false);
            setShowDeleteModal(false);
            setClienteParaDeletar(null);
        }
    };

    return (
        <>
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold flex items-center">
                        <MdList className="mr-2 text-4xl" />
                        Lista de Clientes
                    </h1>
                    <Link href="/clientes/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow flex items-center">
                            <MdPersonAdd className="mr-2" />
                            Cadastrar Novo Cliente
                        </button>
                    </Link>
                </div>

                {/* Feedback */}
                {isLoading && (
                    <p className="text-center text-sky-300 py-4">Carregando...</p>
                )}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500">
                        <span>{error}</span>
                        <button
                            className="absolute top-0 right-0 px-4 py-3 text-red-400 hover:text-red-200"
                            onClick={() => setError(null)}
                        >
                            &times;
                        </button>
                    </div>
                )}
                {success && (
                    <div className="relative mb-4 text-green-400 bg-green-900/50 p-4 rounded border border-green-500">
                        <span>{success}</span>
                        <button
                            className="absolute top-0 right-0 px-4 py-3 text-green-400 hover:text-green-200"
                            onClick={() => setSuccess(null)}
                        >
                            &times;
                        </button>
                    </div>
                )}

                {/* Tabela */}
                {!isLoading && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center">
                                    <MdPerson className="mr-1" /> Nome Completo
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center">
                                    <MdBadge className="mr-1" /> Documento
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center">
                                    <MdEmail className="mr-1" /> Email
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider flex items-center">
                                    <MdLocationOn className="mr-1" /> Cidade/UF
                                </th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    Ações
                                </th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.length === 0 ? (
                                <tr>
                                    <td colSpan={5} className="px-6 py-4 text-center text-slate-400">
                                        Nenhum cliente cadastrado.
                                    </td>
                                </tr>
                            ) : (
                                clientes.map(c => (
                                    <tr key={`${c.idCli}-${c.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{c.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{c.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            <Link href={`/clientes/alterar/${c.idCli}/${c.idEndereco}`}>
                                                <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded flex items-center">
                                                    <MdEdit className="mr-1" />
                                                    Editar
                                                </button>
                                            </Link>
                                            <button
                                                onClick={() => handleDeleteClick(c)}
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded flex items-center"
                                            >
                                                <MdDelete className="mr-1" />
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* Modal de confirmação */}
            {showDeleteModal && clienteParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center">
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full border border-red-500">
                        <h3 className="text-xl font-semibold text-red-400 mb-4 flex items-center">
                            <MdDelete className="mr-2 text-2xl" />
                            Confirmar Exclusão
                        </h3>
                        <p className="text-white mb-3">
                            Tem certeza que deseja excluir o cliente abaixo?
                        </p>
                        <div className="text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3">
                            <p><strong>ID:</strong> {clienteParaDeletar.idCli} / Endereço ID: {clienteParaDeletar.idEndereco}</p>
                            <p><strong>Nome:</strong> {clienteParaDeletar.nomeCompleto}</p>
                            <p><strong>Documento:</strong> {clienteParaDeletar.documento}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button
                                onClick={cancelDelete}
                                className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-md focus:outline-none"
                                disabled={isDeleting}
                            >
                                Cancelar
                            </button>
                            <button
                                onClick={confirmDelete}
                                className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md focus:outline-none ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isDeleting}
                            >
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}


// --- Arquivo: app\clientes\listar\page.tsx
// --- Componente: ListarClientesPage
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
// Importando ícones
import { MdPersonAdd, MdEdit, MdDelete, MdPeopleAlt } from 'react-icons/md';

interface ClienteParaLista {
    idCli: number;
    idEndereco: number;
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}

interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: {
        codigo: number;
        cidade: string;
        estado: string;
    } | null;
    contato: {
        celular: string;
        email: string;
    } | null;
}

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const fetchClientes = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch("http://localhost:8080/rest/clientes/all");
            if (!response.ok) throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            const data: ClienteApiResponseDto[] = await response.json();
            const clientesFormatados: ClienteParaLista[] = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0,
                nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A',
                cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} - ${dto.endereco.estado || 'N/A'}` : 'N/A',
            }));
            setClientes(clientesFormatados);
        } catch (err: any) {
            console.error("Erro ao buscar clientes:", err);
            setError(err.message || "Falha ao carregar dados dos clientes.");
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchClientes();
    }, []);

    const handleDelete = async (idCliente: number, idEndereco: number) => {
        if (!idCliente || !idEndereco) {
            setError("ID inválido para exclusão.");
            return;
        }
        if (!window.confirm(`Tem certeza que deseja excluir o cliente ID ${idCliente} (Endereço ID ${idEndereco})?`)) {
            return;
        }

        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`, {
                method: 'DELETE',
            });

            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar cliente: ${errorText}`);
            }

            alert("Cliente excluído com sucesso!");
            setClientes(prev => prev.filter(c => !(c.idCli === idCliente && c.idEndereco === idEndereco)));

        } catch (err: any) {
            console.error("Erro ao deletar cliente:", err);
            setError(err.message || "Falha ao excluir cliente.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="flex items-center gap-2 text-3xl font-bold">
                        <MdPeopleAlt className="text-4xl" />
                        Lista de Clientes
                    </h1>
                    <Link href="/clientes/cadastrar">
                        <button className="flex items-center gap-2 px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            <MdPersonAdd />
                            Cadastrar Novo Cliente
                        </button>
                    </Link>
                </div>

                {isLoading && <p className="text-center text-sky-300 py-4">Carregando clientes...</p>}
                {error && (
                    <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500">{error}</p>
                )}

                {!isLoading && !error && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Completo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Documento</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.length === 0 ? (
                                <tr>
                                    <td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum cliente cadastrado.</td>
                                </tr>
                            ) : (
                                clientes.map(cliente => (
                                    <tr key={`${cliente.idCli}-${cliente.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center">
                                            <div className="flex justify-center gap-2">
                                                <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}>
                                                    <button className="flex items-center gap-1 px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">
                                                        <MdEdit />
                                                        Alterar
                                                    </button>
                                                </Link>
                                                <button
                                                    onClick={() => handleDelete(cliente.idCli, cliente.idEndereco)}
                                                    className="flex items-center gap-1 px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                                    disabled={isLoading}
                                                >
                                                    <MdDelete />
                                                    Deletar
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
        </>
    );
}


// --- Arquivo: app\contato\page.tsx
// --- Componente: ContatoPage
// src/app/contato/page.tsx
'use client';

import React from 'react';
import NavBar from '@/components/nav-bar';
import {
    Phone,
    Mail,
    MapPin,
    Clock,
    Github,
    User,
    AtSign,
    FileText,
    MessageCircle,
    Send
} from 'lucide-react';

export default function ContatoPage() {
    // --- Dados Atualizados ---
    const fiapTelefone = "(11) 3385-8010";
    const fiapEnderecoLinha1 = "Av. Paulista, 1106 - 7º andar";
    const fiapEnderecoLinha2 = "Bela Vista, São Paulo - SP";
    const fiapEnderecoLinha3 = "CEP 01311-000";
    const fiapHorario1 = "Segunda a Sexta: 07h às 23h";
    const fiapHorario2 = "Sábado: 08h às 14h";
    const fiapHorario3 = "Domingo: Fechado";
    const enderecoQuery = encodeURIComponent(
        "Av. Paulista, 1106 - Bela Vista, São Paulo - SP, 01311-000"
    );
    // --- Fim dos Dados Atualizados ---

    return (
        <>
            <NavBar active="contato" />
            <main className="pt-24 pb-16 min-h-screen bg-[#012A46] text-slate-300">
                <div className="container mx-auto px-4">
                    <h1 className="text-3xl font-bold text-white mb-8 text-center flex items-center justify-center">
                        <Phone className="mr-2 text-4xl text-sky-400" />
                        Entre em Contato
                    </h1>

                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        {/* Informações de Contato */}
                        <div className="lg:col-span-1">
                            <div className="bg-slate-900 rounded-lg shadow-lg p-6">
                                <h2 className="text-xl font-semibold text-sky-300 mb-6 flex items-center">
                                    <Mail className="mr-2" />
                                    Informações de Contato
                                </h2>
                                <div className="space-y-6">
                                    <div className="flex items-start">
                                        <Phone className="h-5 w-5 text-sky-400 mt-0.5 mr-3" />
                                        <div>
                                            <h3 className="font-medium text-white">Telefone</h3>
                                            <p className="mt-1 text-slate-400">{fiapTelefone}</p>
                                        </div>
                                    </div>
                                    <div className="flex items-start">
                                        <Mail className="h-5 w-5 text-sky-400 mt-0.5 mr-3" />
                                        <div>
                                            <h3 className="font-medium text-white">Email</h3>
                                            <p className="mt-1 text-slate-400">contato@oficinavirtual.com.br</p>
                                            <p className="text-slate-400">suporte@oficinavirtual.com.br</p>
                                        </div>
                                    </div>
                                    <div className="flex items-start">
                                        <MapPin className="h-5 w-5 text-sky-400 mt-0.5 mr-3" />
                                        <div>
                                            <h3 className="font-medium text-white">Endereço</h3>
                                            <p className="mt-1 text-slate-400">
                                                {fiapEnderecoLinha1}<br />
                                                {fiapEnderecoLinha2}<br />
                                                {fiapEnderecoLinha3}
                                            </p>
                                        </div>
                                    </div>
                                    <div className="flex items-start">
                                        <Clock className="h-5 w-5 text-sky-400 mt-0.5 mr-3" />
                                        <div>
                                            <h3 className="font-medium text-white">Horário</h3>
                                            <p className="mt-1 text-slate-400">{fiapHorario1}</p>
                                            <p className="text-slate-400">{fiapHorario2}</p>
                                            <p className="text-slate-400">{fiapHorario3}</p>
                                        </div>
                                    </div>
                                </div>
                                <div className="mt-8 pt-6 border-t border-slate-700">
                                    <h3 className="font-medium text-white mb-4">Desenvolvido por:</h3>
                                    <div className="space-y-3">
                                        <a
                                            href="https://github.com/carmipa"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="flex items-center text-sky-400 hover:text-sky-300 transition-colors"
                                        >
                                            <Github className="h-4 w-4 mr-2" />
                                            Paulo André Carminati
                                        </a>
                                        <a
                                            href="https://github.com/gabimaced0"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="flex items-center text-sky-400 hover:text-sky-300 transition-colors"
                                        >
                                            <Github className="h-4 w-4 mr-2" />
                                            Gabrielly Macedo
                                        </a>
                                        <a
                                            href="https://github.com/carmipa/Java_Advanced_CP_1SEM/tree/main/projeto-semestral"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="flex items-center text-sky-400 hover:text-sky-300 transition-colors mt-2"
                                        >
                                            <Github className="h-4 w-4 mr-2" />
                                            Repositório do Projeto
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Formulário e Mapa */}
                        <div className="lg:col-span-2 space-y-8">
                            {/* Formulário de Contato */}
                            <div className="bg-slate-900 rounded-lg shadow-lg p-6">
                                <h2 className="text-xl font-semibold text-sky-300 mb-6 flex items-center">
                                    <Mail className="mr-2" />
                                    Envie uma Mensagem
                                </h2>
                                <form className="space-y-6">
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div>
                                            <label htmlFor="nomeCompleto" className="block text-sm font-medium text-slate-300 mb-1 flex items-center">
                                                <User className="mr-2 text-slate-400" />
                                                Nome Completo
                                            </label>
                                            <input
                                                id="nomeCompleto"
                                                name="nomeCompleto"
                                                type="text"
                                                required
                                                placeholder="Seu nome completo"
                                                className="w-full px-4 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 text-white placeholder-slate-500"
                                            />
                                        </div>
                                        <div>
                                            <label htmlFor="email" className="block text-sm font-medium text-slate-300 mb-1 flex items-center">
                                                <AtSign className="mr-2 text-slate-400" />
                                                Email
                                            </label>
                                            <input
                                                id="email"
                                                name="email"
                                                type="email"
                                                required
                                                placeholder="seu@email.com"
                                                className="w-full px-4 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 text-white placeholder-slate-500"
                                            />
                                        </div>
                                    </div>
                                    <div>
                                        <label htmlFor="assunto" className="block text-sm font-medium text-slate-300 mb-1 flex items-center">
                                            <FileText className="mr-2 text-slate-400" />
                                            Assunto
                                        </label>
                                        <input
                                            id="assunto"
                                            name="assunto"
                                            type="text"
                                            required
                                            placeholder="Assunto da mensagem"
                                            className="w-full px-4 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 text-white placeholder-slate-500"
                                        />
                                    </div>
                                    <div>
                                        <label htmlFor="mensagem" className="block text-sm font-medium text-slate-300 mb-1 flex items-center">
                                            <MessageCircle className="mr-2 text-slate-400" />
                                            Mensagem
                                        </label>
                                        <textarea
                                            id="mensagem"
                                            name="mensagem"
                                            rows={6}
                                            required
                                            placeholder="Digite sua mensagem aqui..."
                                            className="w-full px-4 py-2 bg-slate-800 border border-slate-700 rounded-md focus:ring-2 focus:ring-sky-500 text-white placeholder-slate-500"
                                        />
                                    </div>
                                    <div className="text-right">
                                        <button
                                            type="submit"
                                            className="inline-flex items-center px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 transition-colors disabled:opacity-50"
                                        >
                                            <Send className="mr-2" />
                                            Enviar Mensagem
                                        </button>
                                    </div>
                                </form>
                            </div>

                            {/* Mapa Incorporado */}
                            <div className="bg-slate-900 rounded-lg shadow-lg p-6">
                                <h2 className="text-xl font-semibold text-sky-300 mb-4 flex items-center">
                                    <MapPin className="mr-2" />
                                    Nossa Localização
                                </h2>
                                <div className="aspect-video w-full rounded-md overflow-hidden">
                                    <iframe
                                        title="Mapa da Localização FIAP Paulista"
                                        width="100%"
                                        height="100%"
                                        style={{ border: 0 }}
                                        loading="lazy"
                                        allowFullScreen={false}
                                        referrerPolicy="no-referrer-when-downgrade"
                                        src={`https://www.google.com/maps/embed/v1/place?key=SUA_CHAVE_DE_API_AQUI&q=${enderecoQuery}`}
                                    />
                                </div>
                                <p className="text-xs text-slate-500 mt-2 text-center">
                                    {fiapEnderecoLinha1}, {fiapEnderecoLinha2}
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
}


// --- Arquivo: app\inicio\page.tsx
// --- Componente: InicioPage
import NavBar from "@/components/nav-bar";

export default function InicioPage() {
    return (
        <>
            <NavBar active="inicio" />

            {/* --- Modificações aqui --- */}
            <main
                className="flex items-center justify-center min-h-screen text-white bg-cover bg-center bg-no-repeat"
                // Define a imagem de fundo usando valor arbitrário do Tailwind
                // e define uma cor de fundo sólida como fallback caso a imagem não carregue
                style={{
                    backgroundImage: `url('/admin-ajax.png')`, // Caminho para a imagem na pasta public
                    backgroundColor: '#012A46', // Cor de fundo de fallback
                }}
            >
                {/* O conteúdo da seção agora fica sobre a imagem de fundo */}
                <section className="bg-black/50 backdrop-blur-sm max-w-2xl p-8 m-4 rounded-xl text-center"> {/* Ajustei o fundo da seção para melhor contraste */}
                    <h1 className="mb-4 text-4xl font-bold">Bem-vindo à Oficina Virtual</h1>
                    <p className="mb-8 text-lg">
                        Descubra uma nova forma de cuidar do seu veículo com praticidade e eficiência. Experimente nossa plataforma e agende seu serviço online.
                    </p>
                    {/* Você precisa adicionar o texto ou ícone do botão aqui */}
                    <button className="px-6 py-3 font-semibold text-white transition bg-[#075985] rounded-md shadow hover:bg-[#075985]/90">
                        Agendar Serviço {/* Exemplo de texto para o botão */}
                    </button>
                </section>
            </main>
            {/* --- Fim das Modificações --- */}
        </>
    );
}

// --- Arquivo: app\oficinaOnline\alterar\[id]\page.tsx
// --- Componente: AlterarOficinaPage
// app/oficinaOnline/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import { Calendar, AlertCircle, CheckCircle, Box, Clock, Save, ArrowLeft, FileText } from 'lucide-react';

// Função auxiliar para limpar máscaras (se usar alguma)
const cleanMaskedValue = (value: string): string => value.replace(/\D/g, '');

interface OficinaApiResponseDto {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadas: string;
}

export default function AlterarOficinaPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [dataOficina, setDataOficina] = useState('');
    const [descricaoProblema, setDescricaoProblema] = useState('');
    const [diagnostico, setDiagnostico] = useState('');
    const [partesAfetadas, setPartesAfetadas] = useState('');
    const [horasTrabalhadas, setHorasTrabalhadas] = useState('');

    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError('ID inválido na URL.');
            setIsLoading(false);
            return;
        }
        (async () => {
            setIsLoading(true);
            setError(null);
            try {
                const res = await fetch(`http://localhost:8080/rest/oficina/${id}`);
                if (res.status === 404) throw new Error('Registro não encontrado.');
                if (!res.ok) throw new Error(`Erro ${res.status}: ${res.statusText}`);
                const data: OficinaApiResponseDto = await res.json();
                setDataOficina(data.dataOficina.split('T')[0]);
                setDescricaoProblema(data.descricaoProblema || '');
                setDiagnostico(data.diagnostico || '');
                setPartesAfetadas(data.partesAfetadas || '');
                setHorasTrabalhadas(data.horasTrabalhadas || '');
            } catch (e: any) {
                setError(e.message);
            } finally {
                setIsLoading(false);
            }
        })();
    }, [id]);

    const handleUpdate = async (e: FormEvent) => {
        e.preventDefault();
        if (!id) return;
        setIsSaving(true);
        setError(null);
        setSuccess(null);
        const payload = { dataOficina, descricaoProblema, diagnostico, partesAfetadas, horasTrabalhadas };
        try {
            const res = await fetch(`http://localhost:8080/rest/oficina/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });
            if (!res.ok) {
                const err = await res.json().catch(() => ({ message: res.statusText }));
                throw new Error(err.message);
            }
            setSuccess('Atualizado com sucesso!');
            setTimeout(() => setSuccess(null), 5000);
        } catch (e: any) {
            setError(e.message);
        } finally {
            setIsSaving(false);
        }
    };

    if (isLoading) return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="container mx-auto p-8 bg-[#012A46] min-h-screen text-white">
                <p className="text-center text-sky-300">Carregando dados...</p>
            </main>
        </>
    );

    if (error && !descricaoProblema) return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="container mx-auto p-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 rounded-lg mx-auto max-w-md">
                    <h2 className="flex items-center text-2xl text-red-400 mb-4">
                        <AlertCircle className="mr-2" /> Erro
                    </h2>
                    <p className="mb-4">{error}</p>
                    <Link href="/oficinaOnline">
                        <button className="flex items-center px-4 py-2 bg-slate-600 text-white rounded-md">
                            <ArrowLeft className="mr-2" /> Voltar
                        </button>
                    </Link>
                </div>
            </main>
        </>
    );

    return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="flex items-center justify-center p-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 rounded-lg max-w-2xl w-full">
                    <h2 className="flex items-center text-3xl mb-6">
                        <FileText className="mr-2 text-sky-400" /> Alterar Registro (ID: {id})
                    </h2>
                    <form onSubmit={handleUpdate}>
                        {error && (
                            <div className="mb-4 text-red-400 bg-red-900/50 p-4 rounded relative">
                                {error}
                                <button onClick={() => setError(null)} className="absolute top-2 right-2">&times;</button>
                            </div>
                        )}
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <Calendar className="mr-2 text-sky-400" /> Data
                            </label>
                            <input
                                type="date"
                                value={dataOficina}
                                onChange={e => setDataOficina(e.target.value)}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <AlertCircle className="mr-2 text-sky-400" /> Descrição
                            </label>
                            <textarea
                                value={descricaoProblema}
                                onChange={e => setDescricaoProblema(e.target.value)}
                                rows={4}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <Box className="mr-2 text-sky-400" /> Partes Afetadas
                            </label>
                            <input
                                type="text"
                                value={partesAfetadas}
                                onChange={e => setPartesAfetadas(e.target.value)}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <CheckCircle className="mr-2 text-sky-400" /> Diagnóstico
                            </label>
                            <textarea
                                value={diagnostico}
                                onChange={e => setDiagnostico(e.target.value)}
                                rows={4}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <Clock className="mr-2 text-sky-400" /> Horas Trabalhadas
                            </label>
                            <input
                                type="text"
                                value={horasTrabalhadas}
                                onChange={e => setHorasTrabalhadas(e.target.value)}
                                className="w-full p-2 bg-slate-800 rounded border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                placeholder="Ex: 2.5"
                                required
                            />
                        </div>
                        {success && <p className="text-green-400 mb-4">{success}</p>}
                        <div className="flex justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                disabled={isSaving}
                                className="inline-flex items-center px-6 py-3 bg-green-600 rounded-md shadow hover:bg-green-700"
                            >
                                <Save className="mr-2" /> {isSaving ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/oficinaOnline">
                                <button className="inline-flex items-center px-6 py-3 bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                    <ArrowLeft className="mr-2" /> Voltar
                                </button>
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}


// --- Arquivo: app\oficinaOnline\buscar\page.tsx
// --- Componente: BuscarOficinaPage
// app/oficinaOnline/buscar/page.tsx
"use client";

import { useState, useEffect, ChangeEvent, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';

// --- Interfaces para Tipagem (Reutilizadas/Adaptadas da Listagem) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string; // Pode ser útil mostrar
}

interface OficinaApiResponseDto {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadas: string;
}
// --------------------------------------------------------------------

// Define os tipos de busca possíveis para Oficina
type TipoBuscaOficina = 'id' | 'descricao' | 'diagnostico';

export default function BuscarOficinaPage() {
    const [todasOficinas, setTodasOficinas] = useState<OficinaParaLista[]>([]); // Guarda todos os registros
    const [resultadosBusca, setResultadosBusca] = useState<OficinaParaLista[]>([]); // Guarda os resultados filtrados
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaOficina>('descricao'); // <<< Padrão: buscar por descrição
    const [termoBusca, setTermoBusca] = useState('');
    const [isLoading, setIsLoading] = useState(false); // Loading para fetch inicial
    const [isSearching, setIsSearching] = useState(false); // Loading para busca/filtro
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Para msg de delete
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // --- Estados para o Modal de Deleção ---
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    // -----------------------------------------

    const router = useRouter();

    // --- Função para buscar TODOS os registros da API (apenas uma vez) ---
    const fetchTodasOficinas = async () => {
        if (todasOficinas.length > 0) return;
        setIsLoading(true); setError(null); setSuccess(null);
        try {
            const response = await fetch("http://localhost:8080/rest/oficina/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: OficinaApiResponseDto[] = await response.json();
            const oficinasFormatadas: OficinaParaLista[] = data.map(dto => ({
                id: dto.id,
                dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A',
                descricaoProblema: dto.descricaoProblema || 'N/A',
                diagnostico: dto.diagnostico || 'Pendente',
                horasTrabalhadas: dto.horasTrabalhadas || 'N/A',
            }));
            setTodasOficinas(oficinasFormatadas);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados base da oficina.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchTodasOficinas(); }, []);

    // --- Função para realizar a busca/filtro (CLIENT-SIDE) ---
    const handleSearch = (event?: FormEvent<HTMLFormElement>) => {
        if (event) event.preventDefault();
        setIsSearching(true); setBuscaRealizada(true); setSuccess(null); setError(null);
        const query = termoBusca.trim().toLowerCase();
        if (!query) { setResultadosBusca([]); setIsSearching(false); return; }

        let resultados: OficinaParaLista[] = [];

        switch (tipoBusca) {
            case 'id':
                resultados = todasOficinas.filter(o => o.id.toString() === query.replace(/\D/g, ''));
                break;
            case 'descricao':
                resultados = todasOficinas.filter(o => o.descricaoProblema.toLowerCase().includes(query));
                break;
            case 'diagnostico':
                resultados = todasOficinas.filter(o => o.diagnostico.toLowerCase().includes(query));
                break;
            default:
                resultados = [];
        }
        setResultadosBusca(resultados);
        setIsSearching(false);
    };

    // --- Funções de Deleção com Modal (adaptadas para Oficina) ---
    const handleDeleteClick = (oficina: OficinaParaLista) => {
        setOficinaParaDeletar(oficina); setShowDeleteModal(true); setError(null); setSuccess(null); };

    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        setIsDeleting(true); setError(null); setSuccess(null);
        const { id } = oficinaParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/oficina/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`); }
            setShowDeleteModal(false); setShowDeleteSuccessModal(true);
            // Remove da lista completa E dos resultados da busca atual
            setTodasOficinas(prev => prev.filter(o => o.id !== id));
            setResultadosBusca(prev => prev.filter(o => o.id !== id));
        } catch (err: any) { setError(err.message || "Falha ao excluir registro."); setShowDeleteModal(false);
        } finally { setIsDeleting(false); }
    };

    const cancelDelete = () => { setShowDeleteModal(false); setOficinaParaDeletar(null); };
    const closeSuccessModal = () => { setShowDeleteSuccessModal(false); setOficinaParaDeletar(null); };
    // -------------------------------------------------------------

    // Define placeholder dinâmico
    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'id': return 'Digite o ID do Registro...';
            case 'descricao': return 'Digite parte da descrição do problema...';
            case 'diagnostico': return 'Digite parte do diagnóstico...';
            default: return 'Digite o termo de busca...';
        }
    }

    return (
        <>
            <NavBar active="oficinaOnline" /> {/* Define item ativo na NavBar */}

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Buscar Registros da Oficina</h1>

                {/* Formulário de Busca */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    {/* Select para escolher o tipo de busca */}
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select
                            id="tipoBusca"
                            name="tipoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={tipoBusca}
                            onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaOficina); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); }}
                        >
                            <option value="descricao">Descrição Problema</option>
                            <option value="id">ID Registro</option>
                            <option value="diagnostico">Diagnóstico</option>
                        </select>
                    </div>

                    {/* Input único para o termo de busca */}
                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input
                            type={tipoBusca === 'id' ? 'number' : 'text'}
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={termoBusca}
                            onChange={(e) => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()}
                            required
                        />
                    </div>

                    <button type="submit" className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap" disabled={isLoading || isSearching}>
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Exibição de Loading Inicial e Erro/Sucesso (delete) */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando dados base...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                {/* Mensagem de sucesso do delete será via modal */}

                {/* Tabela de Resultados da Busca */}
                {!isLoading && buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Descrição Problema</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Diagnóstico</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum registro encontrado.</td></tr>
                            ) : (
                                resultadosBusca.map((oficina) => (
                                    <tr key={oficina.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>{oficina.descricaoProblema}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>{oficina.diagnostico}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição */}
                                            {oficina.id ? (
                                                <Link href={`/oficinaOnline/alterar/${oficina.id}`}>
                                                    <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Alterar</button>
                                                </Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}
                                            {/* Botão Deletar */}
                                            <button onClick={() => handleDeleteClick(oficina)} className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded" disabled={isDeleting || !oficina.id}>
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* Modal de Confirmação de Deleção */}
            {showDeleteModal && oficinaParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir este registro?</p>
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                            <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                            <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                            <p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>
                                Não, cancelar
                            </button>
                            <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Modal de Sucesso da Deleção */}
            {showDeleteSuccessModal && (
                <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                        <p className="text-white mb-6 text-center">Registro de oficina excluído.</p>
                        <div className="flex justify-center">
                            <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}


// --- Arquivo: app\oficinaOnline\cadastrar\page.tsx
// --- Componente: CadastrarOficinaPage
// src/app/oficinaOnline/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import {
    Calendar,
    AlertCircle,
    Cpu,
    CheckCircle,
    Box,
    Clock,
    Save,
    Wrench
} from 'lucide-react';

// Auxiliar para limpar máscaras
const cleanMaskedValue = (value: string): string =>
    value.replace(/\D/g, '');

export default function CadastrarOficinaPage() {
    const today = new Date().toISOString().split('T')[0];
    const initialState = {
        dataOficina: today,
        descricaoProblema: "",
        diagnostico: "",
        partesAfetadas: "",
        horasTrabalhadas: ""
    };

    const [dataOficina, setDataOficina] = useState(initialState.dataOficina);
    const [descricaoProblema, setDescricaoProblema] = useState(initialState.descricaoProblema);
    const [diagnostico, setDiagnostico] = useState(initialState.diagnostico);
    const [partesAfetadas, setPartesAfetadas] = useState(initialState.partesAfetadas);
    const [horasTrabalhadas, setHorasTrabalhadas] = useState(initialState.horasTrabalhadas);

    const [isSaving, setIsSaving] = useState(false);
    const [isIaLoading, setIsIaLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [diagnosticoIa, setDiagnosticoIa] = useState<string | null>(null);

    const resetForm = () => {
        setDataOficina(initialState.dataOficina);
        setDescricaoProblema(initialState.descricaoProblema);
        setDiagnostico(initialState.diagnostico);
        setPartesAfetadas(initialState.partesAfetadas);
        setHorasTrabalhadas(initialState.horasTrabalhadas);
        setError(null);
        setDiagnosticoIa(null);
    };

    const handleBuscaIa = async () => {
        if (!descricaoProblema.trim()) {
            setError("Descreva o problema antes de buscar na IA.");
            return;
        }
        setIsIaLoading(true);
        setError(null);
        setDiagnosticoIa(null);
        setSuccess(null);

        try {
            const apiUrl = `http://localhost:8080/rest/ia/diagnostico?descricao=${encodeURIComponent(descricaoProblema)}`;
            const response = await fetch(apiUrl);
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`IA: ${errorText}`);
            }
            const diag = await response.text();
            setDiagnosticoIa(diag);
            setDiagnostico(diag);
        } catch (err: any) {
            setError(err.message);
            setDiagnosticoIa("Falha ao obter diagnóstico.");
        } finally {
            setIsIaLoading(false);
        }
    };

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsSaving(true);
        setError(null);
        setSuccess(null);

        const oficinaData = { dataOficina, descricaoProblema, diagnostico, partesAfetadas, horasTrabalhadas };
        const apiUrl = "http://localhost:8080/rest/oficina";

        try {
            const resp = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(oficinaData),
            });
            if (!resp.ok) {
                const errJson = await resp.json().catch(() => ({ message: resp.statusText }));
                throw new Error(errJson.message);
            }
            setSuccess("Registro salvo com sucesso!");
            resetForm();
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsSaving(false);
        }
    };

    const formattedDate = new Date(dataOficina + 'T00:00:00')
        .toLocaleDateString('pt-BR');

    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-2xl">
                    <h2 className="flex items-center text-3xl font-bold mb-6 justify-center">
                        <Wrench className="mr-2 text-4xl text-sky-400" />
                        Diaganóstico do veículo!
                    </h2>
                    <form onSubmit={handleSubmit}>
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded border border-red-500">
                                <span>{error}</span>
                                <button
                                    type="button"
                                    className="absolute top-0 right-0 px-4 py-3"
                                    onClick={() => setError(null)}
                                    aria-label="Fechar"
                                >
                                    &times;
                                </button>
                            </div>
                        )}

                        <div className="mb-4">
                            <label className="flex items-center mb-1">
                                <Calendar className="mr-2 text-sky-400" />
                                Data do Registro:
                            </label>
                            <p className="w-full p-2 rounded bg-slate-700 border border-slate-600">
                                {formattedDate}
                            </p>
                        </div>

                        <div className="mb-4">
                            <label htmlFor="descricaoProblema" className="flex items-center mb-1">
                                <AlertCircle className="mr-2 text-sky-400" />
                                Descrição do Problema:
                            </label>
                            <textarea
                                id="descricaoProblema"
                                rows={4}
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                value={descricaoProblema}
                                onChange={e => setDescricaoProblema(e.target.value)}
                            />
                        </div>

                        <div className="mb-6 text-center">
                            <button
                                type="button"
                                onClick={handleBuscaIa}
                                disabled={isIaLoading}
                                className={`inline-flex items-center px-5 py-2 bg-indigo-600 rounded-md shadow hover:bg-indigo-700 transition ${
                                    isIaLoading ? 'opacity-50' : ''
                                }`}
                            >
                                <Cpu className="mr-2" />
                                {isIaLoading ? 'Buscando na IA...' : 'Buscar Diagnóstico IA'}
                            </button>
                        </div>

                        {diagnosticoIa && (
                            <div className="mb-4 p-4 bg-slate-800 border border-slate-700 rounded">
                                <label className="flex items-center mb-2 text-sky-300 font-semibold">
                                    <Cpu className="mr-2" />
                                    Resultado IA:
                                </label>
                                <pre className="whitespace-pre-wrap">{diagnosticoIa}</pre>
                            </div>
                        )}

                        <div className="mb-4">
                            <label htmlFor="diagnostico" className="flex items-center mb-1">
                                <CheckCircle className="mr-2 text-sky-400" />
                                Diagnóstico Final:
                            </label>
                            <textarea
                                id="diagnostico"
                                rows={4}
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                value={diagnostico}
                                onChange={e => setDiagnostico(e.target.value)}
                            />
                        </div>

                        <div className="mb-4">
                            <label htmlFor="partesAfetadas" className="flex items-center mb-1">
                                <Box className="mr-2 text-sky-400" />
                                Partes Afetadas:
                            </label>
                            <input
                                id="partesAfetadas"
                                type="text"
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                value={partesAfetadas}
                                onChange={e => setPartesAfetadas(e.target.value)}
                            />
                        </div>

                        <div className="mb-4">
                            <label htmlFor="horasTrabalhadas" className="flex items-center mb-1">
                                <Clock className="mr-2 text-sky-400" />
                                Tempo (h):
                            </label>
                            <input
                                id="horasTrabalhadas"
                                type="text"
                                required
                                placeholder="Ex: 2.5"
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:ring-2 focus:ring-sky-500"
                                value={horasTrabalhadas}
                                onChange={e => setHorasTrabalhadas(e.target.value)}
                            />
                        </div>

                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        <div className="flex justify-center">
                            <button
                                type="submit"
                                disabled={isSaving}
                                className={`inline-flex items-center px-6 py-3 bg-sky-600 rounded-md shadow hover:bg-sky-700 transition ${
                                    isSaving ? 'opacity-50' : ''
                                }`}
                            >
                                <Save className="mr-2" />
                                {isSaving ? 'Salvando...' : 'Salvar Registro'}
                            </button>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}


// --- Arquivo: app\oficinaOnline\deletar\page.tsx
// --- Componente: ListarOficinaPage
// app/oficinaOnline/page.tsx OU app/oficinaOnline/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Para navegação programática se necessário
import NavBar from '@/components/nav-bar'; // Importa sua NavBar

// --- Interfaces para Tipagem (Ajuste conforme sua API) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string;
}
interface OficinaApiResponseDto {
    id: number; dataOficina: string; descricaoProblema: string;
    diagnostico: string; partesAfetadas: string; horasTrabalhadas: string;
}
// ---------------------------------------------------------

export default function ListarOficinaPage() {
    const [oficinas, setOficinas] = useState<OficinaParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // --- Estados para o Modal de Deleção --- // <<< INÍCIO LÓGICA DELETE
    const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    // ----------------------------------------- // <<< FIM LÓGICA DELETE

    const router = useRouter();

    // --- Função para buscar e formatar os registros de oficina ---
    const fetchOficinas = async () => {
        setIsLoading(true); setError(null);
        // Limpa modais ao recarregar
        setShowDeleteConfirmModal(false); setShowDeleteSuccessModal(false); setOficinaParaDeletar(null);
        try {
            const response = await fetch("http://localhost:8080/rest/oficina/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: OficinaApiResponseDto[] = await response.json();
            const oficinasFormatadas: OficinaParaLista[] = data.map(dto => ({
                id: dto.id,
                dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A',
                descricaoProblema: dto.descricaoProblema || 'N/A',
                diagnostico: dto.diagnostico || 'Pendente',
                horasTrabalhadas: dto.horasTrabalhadas || 'N/A',
            }));
            setOficinas(oficinasFormatadas);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados da oficina.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchOficinas(); }, []);

    // --- Funções para o fluxo de deleção com modal --- // <<< INÍCIO LÓGICA DELETE
    const handleDeleteClick = (oficina: OficinaParaLista) => {
        setOficinaParaDeletar(oficina);
        setShowDeleteConfirmModal(true);
        setError(null);
    };

    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        setIsDeleting(true); setError(null);
        const { id } = oficinaParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/oficina/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`);
            }
            setShowDeleteConfirmModal(false);
            setShowDeleteSuccessModal(true); // Mostra modal de sucesso
            setOficinas(prev => prev.filter(o => o.id !== id)); // Remove da lista local
        } catch (err: any) {
            setError(err.message || "Falha ao excluir registro.");
            setShowDeleteConfirmModal(false);
        } finally {
            setIsDeleting(false);
            // Não limpa oficinaParaDeletar aqui para usar no modal de sucesso se precisar
        }
    };

    const cancelDelete = () => {
        setShowDeleteConfirmModal(false);
        setOficinaParaDeletar(null);
    };

    const closeSuccessModal = () => {
        setShowDeleteSuccessModal(false);
        setOficinaParaDeletar(null);
        // Poderia adicionar navegação aqui se quisesse: router.push('/algum-lugar');
    };
    // ---------------------------------------------------- // <<< FIM LÓGICA DELETE

    return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título e botão Cadastrar */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Registros da Oficina Online</h1>
                    <Link href="/oficinaOnline/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Novo Diagnóstico
                        </button>
                    </Link>
                </div>

                {/* Mensagens */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                {/* A mensagem de sucesso agora é o modal */}

                {/* Tabela de Registros */}
                {!isLoading && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Descrição Problema</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Diagnóstico</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {oficinas.length === 0 && !isLoading ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum registro encontrado.</td></tr>
                            ) : (
                                oficinas.map((oficina) => (
                                    <tr key={oficina.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>{oficina.descricaoProblema}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>{oficina.diagnostico}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição */}
                                            {(oficina.id) ? ( <Link href={`/oficinaOnline/alterar/${oficina.id}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}

                                            {/* Botão Deletar */} // <<< INÍCIO LÓGICA DELETE
                                            <button
                                            onClick={() => handleDeleteClick(oficina)} // Chama função para abrir modal
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            disabled={isDeleting || !oficina.id}
                                            >
                                            Deletar
                                        </button>
                                        {/* <<< FIM LÓGICA DELETE */}
                                    </td>
                                </tr>
                                ))
                                )}
                            </tbody>
                        </table>
                    </div>
                    )}
            </main>

            {/* --- Modal de Confirmação de Deleção --- */} // <<< INÍCIO LÓGICA DELETE
            {showDeleteConfirmModal && oficinaParaDeletar && (
            <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}>
                    <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                    <p className="text-white mb-3">Tem certeza que deseja excluir este registro?</p>
                    <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                        <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                        <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                        <p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p>
                    </div>
                    <div className="flex justify-end gap-4">
                        <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>
                            Não, cancelar
                        </button>
                        <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                            {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                        </button>
                    </div>
                </div>
            </div>
            )}

            {/* --- Modal de Sucesso da Deleção --- */}
            {showDeleteSuccessModal && (
            <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                    <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                    <p className="text-white mb-6 text-center">Registro de oficina excluído.</p>
                    <div className="flex justify-center">
                        <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>
                            OK
                        </button>
                    </div>
                </div>
            </div>
            )}
            {/* <<< FIM LÓGICA DELETE */}
        </>
    );
}


// --- Arquivo: app\oficinaOnline\listar\page.tsx
// --- Componente: ListarOficinaPage
// app/oficinaOnline/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
import {
    Hash,
    Calendar,
    FileText,
    CheckCircle,
    Edit3,
    Trash2
} from 'lucide-react';

// --- Interfaces para Tipagem (Verifique se corresponde à sua API) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string; // Data formatada
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string;
}
interface OficinaApiResponseDto {
    id: number;
    dataOficina: string; // Vem como YYYY-MM-DD
    descricaoProblema: string | null;
    diagnostico: string | null;
    partesAfetadas: string | null;
    horasTrabalhadas: string | null;
}
// --------------------------------------------------------------------

export default function ListarOficinaPage() {
    console.log("[Render] ListarOficinaPage - Iniciando renderização.");

    const [oficinas, setOficinas] = useState<OficinaParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);

    const router = useRouter();
    console.log("[Render] Hooks useState e useRouter inicializados.");

    const fetchOficinas = async () => {
        console.log("[Fetch] Iniciando fetchOficinas...");
        setIsLoading(true);
        setError(null);
        setShowDeleteConfirmModal(false);
        setShowDeleteSuccessModal(false);
        setOficinaParaDeletar(null);

        const apiUrl = "http://localhost:8080/rest/oficina/all";
        console.log(`[Fetch] Buscando dados de: ${apiUrl}`);

        try {
            const response = await fetch(apiUrl);
            console.log(`[Fetch] Status: ${response.status}`);

            if (!response.ok) {
                let errorBody = '';
                try { errorBody = await response.text(); }
                catch {}
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}. ${errorBody}`);
            }

            if (response.status === 204) {
                setOficinas([]);
            } else {
                const data = await response.json() as OficinaApiResponseDto[];
                if (!Array.isArray(data)) {
                    throw new Error("Formato de resposta inválido.");
                }
                const formatted = data.map(dto => ({
                    id: dto.id,
                    dataOficina: dto.dataOficina
                        ? new Date(dto.dataOficina + 'T00:00:00Z')
                            .toLocaleDateString('pt-BR', { timeZone: 'UTC' })
                        : 'N/A',
                    descricaoProblema: dto.descricaoProblema || '',
                    diagnostico: dto.diagnostico || 'Pendente',
                    horasTrabalhadas: dto.horasTrabalhadas || '',
                }));
                setOficinas(formatted);
            }
        } catch (err: any) {
            console.error("[Fetch] Erro:", err);
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchOficinas();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    const handleDeleteClick = (oficina: OficinaParaLista) => {
        setOficinaParaDeletar(oficina);
        setShowDeleteConfirmModal(true);
        setError(null);
    };

    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        const { id } = oficinaParaDeletar;
        setIsDeleting(true);
        setError(null);
        try {
            const deleteUrl = `http://localhost:8080/rest/oficina/${id}`;
            const response = await fetch(deleteUrl, { method: 'DELETE' });
            if (!response.ok) {
                const errText = await response.text().catch(() => response.statusText);
                throw new Error(`Erro ao deletar: ${errText}`);
            }
            setShowDeleteConfirmModal(false);
            setShowDeleteSuccessModal(true);
            setOficinas(prev => prev.filter(o => o.id !== id));
        } catch (err: any) {
            console.error("[Delete] Erro:", err);
            setError(err.message);
            setShowDeleteConfirmModal(false);
        } finally {
            setIsDeleting(false);
        }
    };

    const cancelDelete = () => {
        setShowDeleteConfirmModal(false);
        setOficinaParaDeletar(null);
    };
    const closeSuccessModal = () => {
        setShowDeleteSuccessModal(false);
        setOficinaParaDeletar(null);
    };

    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-[calc(100vh-80px)] text-white">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="flex items-center text-3xl font-bold">
                        <FileText className="mr-2 text-2xl text-sky-400" />
                        Registros da Oficina
                    </h1>
                    <Link href="/oficinaOnline/cadastrar">
                        <button className="flex items-center px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white rounded-md shadow">
                            <CheckCircle className="mr-2" />
                            Novo Diagnóstico
                        </button>
                    </Link>
                </div>

                {isLoading && (
                    <p className="text-center text-sky-300 py-4">Carregando...</p>
                )}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 rounded-md border border-red-500">
                        <strong className="font-bold">Erro: </strong>
                        <span>{error}</span>
                        <button
                            type="button"
                            className="absolute top-0 right-0 p-2"
                            onClick={() => setError(null)}
                        >
                            &times;
                        </button>
                    </div>
                )}

                {!isLoading && !error && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    <Hash className="inline mr-1" />
                                    ID
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    <Calendar className="inline mr-1" />
                                    Data
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    <FileText className="inline mr-1" />
                                    Descrição Problema
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    <CheckCircle className="inline mr-1" />
                                    Diagnóstico
                                </th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    Ações
                                </th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {oficinas.length === 0 ? (
                                <tr>
                                    <td colSpan={5} className="px-6 py-4 text-center text-slate-400">
                                        Nenhum registro encontrado.
                                    </td>
                                </tr>
                            ) : (
                                oficinas.map(oficina => (
                                    <tr key={oficina.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>
                                            {oficina.descricaoProblema}
                                        </td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>
                                            {oficina.diagnostico}
                                        </td>
                                        <td className="px-6 py-4 text-center space-x-2">
                                            <Link href={`/oficinaOnline/alterar/${oficina.id}`}>
                                                <button className="inline-flex items-center px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-black rounded-md text-sm">
                                                    <Edit3 className="mr-1" />
                                                    Editar
                                                </button>
                                            </Link>
                                            <button
                                                onClick={() => handleDeleteClick(oficina)}
                                                className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-sm"
                                                disabled={isDeleting}
                                            >
                                                <Trash2 className="mr-1" />
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {showDeleteConfirmModal && oficinaParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={e => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir o registro?</p>
                        <div className="text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3">
                            <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                            <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button onClick={cancelDelete} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-md">Não</button>
                            <button onClick={confirmDelete} className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md">
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {showDeleteSuccessModal && (
                <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={e => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                        <p className="text-white mb-6 text-center">Registro excluído.</p>
                        <div className="flex justify-center">
                            <button onClick={closeSuccessModal} className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md">
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}


// --- Arquivo: app\pagamento\page.tsx
// --- Componente: PagamentoPage
import NavBar from "@/components/nav-bar";

export default function PagamentoPage(){
    return(
        <>
            <NavBar active="pagamento"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Pagamento</h2>
                </div>
            </main>
        </>

    )
}

// --- Arquivo: app\relatorio\page.tsx
// --- Componente: RelatoriosPage
// app/relatorio/page.tsx
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho se necessário

export default function RelatoriosPage() {
    return (
        <>
            <NavBar active="relatorio"/> {/* Marca "Relatório" como ativo aqui */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-8 text-center">Central de Relatórios</h1>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {/* Card para Agendamentos Futuros */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Agendamentos Futuros</h2>
                        <p className="text-slate-300 mb-4">Visualize os próximos agendamentos registrados.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/agendamentos-futuros">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Contagem Mensal (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Contagem Mensal</h2>
                        <p className="text-slate-300 mb-4">Veja a quantidade de agendamentos por mês.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/contagem-mensal">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Histórico por Cliente (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Histórico por Cliente</h2>
                        <p className="text-slate-300 mb-4">Consulte o histórico de agendamentos de um cliente.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/historico-cliente">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Serviços Agendados (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Serviços Agendados</h2>
                        <p className="text-slate-300 mb-4">Detalhes dos serviços e diagnósticos agendados.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/servicos-agendados">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Adicione mais cards para outros relatórios aqui */}

                </div>
            </main>
        </>
    );
}

// --- Arquivo: app\relatorio\agendamentos-futuros\page.tsx
// --- Componente: RelatorioAgendamentosFuturosPage
// app/relatorio/agendamentos-futuros/page.tsx
"use client";

import { useState, useEffect } from 'react';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho se necessário
import { CalendarDays, ClipboardList, Hash } from 'lucide-react'; // <<< Hash adicionado

// --- Interfaces ---
interface AgendamentoParaLista { id: number; dataAgendamento: string; observacao: string; }
interface PaginatedAgendaResponse { content: AgendamentoApiResponseDto[]; totalPages: number; totalElements: number; number: number; size: number; }
interface AgendamentoApiResponseDto { id: number; dataAgendamento: string; observacao: string | null; }
// ----------------

export default function RelatorioAgendamentosFuturosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(15);

    const fetchAgendamentosFuturos = async (page = 0) => {
        setIsLoading(true); setError(null);
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        const dataInicioFiltro = `${year}-${month}-${day}`;

        const params = new URLSearchParams({
            page: page.toString(), size: pageSize.toString(),
            sort: 'dataAgendamento,asc', dataInicio: dataInicioFiltro
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.info("Buscando agendamentos futuros:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 400) { const e = await response.json().catch(() => ({ message: "Requisição inválida (400)." })); throw new Error(e.message || `Erro HTTP ${response.status}`);}
                if (response.status === 404) { throw new Error("Endpoint não encontrado (404). Verifique a URL da API."); }
                if (response.status >= 500) { throw new Error(`Erro no servidor (${response.status}). Tente novamente mais tarde.`); }
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }
            if (response.status === 204) { setAgendamentos([]); setTotalPages(0); setCurrentPage(0); return; }

            const data: PaginatedAgendaResponse = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                observacao: dto.observacao || '',
            }));
            setAgendamentos(agendamentosFormatados); setTotalPages(data.totalPages); setCurrentPage(data.number);
        } catch (err: any) {
            if (err instanceof TypeError && err.message === "Failed to fetch") { setError("Não foi possível conectar ao servidor."); }
            else { setError(err.message || "Falha ao carregar relatório."); }
            setAgendamentos([]); setTotalPages(0);
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchAgendamentosFuturos(currentPage); }, [currentPage, pageSize]);

    const handlePreviousPage = () => { if (currentPage > 0) { fetchAgendamentosFuturos(currentPage - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { fetchAgendamentosFuturos(currentPage + 1); } };

    return (
        <>
            <NavBar active="relatorio-agendamentos-futuros"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Relatório: Agendamentos Futuros</h1>

                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando relatório...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                {/* Cabeçalho ID com Ícone */}
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    <div className="flex items-center gap-2">
                                        <Hash className="h-4 w-4" /> {/* <<< Ícone ID */}
                                        ID
                                    </div>
                                </th>
                                {/* Cabeçalho Data Agendada com Ícone */}
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    <div className="flex items-center gap-2">
                                        <CalendarDays className="h-4 w-4" /> {/* <<< Ícone Data */}
                                        Data Agendada
                                    </div>
                                </th>
                                {/* Cabeçalho Observação com Ícone */}
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                    <div className="flex items-center gap-2">
                                        <ClipboardList className="h-4 w-4" />
                                        Observação
                                    </div>
                                </th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {agendamentos.length === 0 && !error ? (
                                <tr><td colSpan={3} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento futuro encontrado.</td></tr>
                            ) : (
                                agendamentos.map((agendamento, index) => {
                                    const rowClass = index % 2 === 0 ? 'bg-slate-900' : 'bg-slate-800/50';
                                    return (
                                        <tr key={agendamento.id} className={`${rowClass} hover:bg-sky-900/50`}>
                                            <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                            {/* Data Agendada com Ícone na célula */}
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="flex items-center gap-2">
                                                    <CalendarDays className="h-4 w-4 text-sky-400"/>
                                                    {agendamento.dataAgendamento}
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-normal max-w-lg break-words" title={agendamento.observacao}>{agendamento.observacao || '-'}</td>
                                        </tr>
                                    );
                                })
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed"> Anterior </button>
                        <span className="text-slate-300"> Página {currentPage + 1} de {totalPages} </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed"> Próxima </button>
                    </div>
                )}
            </main>
        </>
    );
}

// --- Arquivo: app\relatorio\contagem-mensal\page.tsx
// --- Componente: RelatorioContagemMensalPage
// app/relatorio/contagem-mensal/page.tsx
"use client";

import { useState, useEffect } from 'react';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho

// --- Imports do Chart.js ---
import { Bar } from 'react-chartjs-2';
import {
    Chart as ChartJS, CategoryScale, LinearScale, BarElement,
    Title as ChartTitle, Tooltip, Legend
} from 'chart.js';
// --- Ícones (Restaurados) ---
import {
    MdBarChart, MdTableChart, MdInsertChart, MdList, MdCalendarToday
} from 'react-icons/md';

// --- Registrar componentes Chart.js ---
ChartJS.register(CategoryScale, LinearScale, BarElement, ChartTitle, Tooltip, Legend);

// --- Interfaces ---
interface ContagemMensalDto { mesAno: string; quantidade: number; }
type ViewMode = 'both' | 'table' | 'graph';
// ----------------

export default function RelatorioContagemMensalPage() {
    const [dadosContagem, setDadosContagem] = useState<ContagemMensalDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [viewMode, setViewMode] = useState<ViewMode>('both');

    useEffect(() => {
        const fetchContagem = async () => {
            setIsLoading(true); setError(null);
            try {
                const resp = await fetch("http://localhost:8080/rest/relatorios/contagem-agendamentos-mensal");
                if (!resp.ok) { /* ... tratamento de erro ... */
                    if (resp.status === 404) throw new Error("Endpoint não encontrado (404).");
                    if (resp.status >= 500) throw new Error(`Erro no servidor (${resp.status}).`);
                    throw new Error(`Erro HTTP ${resp.status}.`);
                }
                if (resp.status === 204) { setDadosContagem([]); return; }
                const data: ContagemMensalDto[] = await resp.json();
                data.sort((a, b) => a.mesAno.localeCompare(b.mesAno)); // Ordena os dados por data
                setDadosContagem(data);
            } catch (err: any) {
                setError( err instanceof TypeError ? "Falha ao conectar ao servidor." : err.message );
                setDadosContagem([]);
            } finally { setIsLoading(false); }
        };
        fetchContagem();
    }, []);

    // --- Cores para barras (Restaurado) ---
    const backgroundColors = [
        'rgba(54, 162, 235, 0.7)', 'rgba(75, 192, 192, 0.7)',
        'rgba(255, 206, 86, 0.7)', 'rgba(153, 102, 255, 0.7)',
        'rgba(255, 159, 64, 0.7)', 'rgba(255, 99, 132, 0.7)',
        'rgba(100, 116, 139, 0.7)' // Cor neutra se precisar de mais
    ];
    const borderColors = backgroundColors.map(color => color.replace(/0\.7/, '1'));

    // Dados do gráfico (Restaurado)
    const labels = dadosContagem.map(d => d.mesAno);
    const valores = dadosContagem.map(d => d.quantidade);
    const chartData = { labels, datasets: [ { label: 'Agendamentos', data: valores, backgroundColor: backgroundColors.slice(0, valores.length), borderColor: borderColors.slice(0, valores.length), borderWidth: 1 } ] };

    // Opções do Gráfico (Restaurado + Correção de Alinhamento)
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false, // <<< Mantido para melhor ajuste de altura/largura
        plugins: {
            legend: { labels: { color: '#94a3b8' }, position: 'top' as const }, // Cor clara para legenda
            title: { display: true, text: 'Agendamentos por Mês/Ano', color: '#e2e8f0', font: { size: 16 } } // Cor clara para título
        },
        scales: {
            x: { ticks: { color: '#94a3b8' }, grid: { display: false } }, // Cor clara para eixo X
            y: { beginAtZero: true, ticks: { color: '#94a3b8', stepSize: 1 }, grid: { color: 'rgba(100, 116, 139, 0.2)' } } // Cor clara para eixo Y e grid mais suave
        }
    };
    // ---------------------------------

    // Layout helpers (Restaurado)
    const getLayoutClasses = () => viewMode === 'both' ? 'flex flex-col lg:flex-row gap-6' : 'flex flex-col gap-6';
    const getSectionClasses = (sec: 'table' | 'graph') => {
        if (viewMode === 'table') return sec === 'table' ? 'w-full bg-slate-800 p-4 rounded-lg shadow-md' : 'hidden'; // Adicionado shadow/rounded
        if (viewMode === 'graph') return sec === 'graph' ? 'w-full bg-white p-4 rounded-lg shadow-md' : 'hidden'; // Adicionado shadow/rounded
        // both
        return sec === 'table' ? 'lg:w-1/3 xl:w-1/4 bg-slate-800 p-4 rounded-lg shadow-md flex-shrink-0' : 'lg:w-2/3 xl:w-3/4 bg-white p-4 rounded-lg shadow-md'; // Adicionado shadow/rounded
    };

    return (
        <>
            <NavBar active="relatorio-contagem-mensal" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título com Ícone (Restaurado) */}
                <h1 className="flex items-center justify-center text-3xl font-bold mb-6">
                    <MdInsertChart className="mr-2 text-4xl" />
                    Relatório: Contagem Mensal
                </h1>

                {/* Botões de modo com Ícones (Restaurado) */}
                <div className="mb-6 flex justify-center gap-3">
                    <button onClick={() => setViewMode('both')} className={`flex items-center px-4 py-1.5 text-sm rounded-md transition ${ viewMode === 'both' ? 'bg-sky-600 text-white shadow' : 'bg-slate-600 text-slate-200 hover:bg-slate-500' }`}><MdList className="mr-1" /> Ambos</button>
                    <button onClick={() => setViewMode('table')} className={`flex items-center px-4 py-1.5 text-sm rounded-md transition ${ viewMode === 'table' ? 'bg-sky-600 text-white shadow' : 'bg-slate-600 text-slate-200 hover:bg-slate-500' }`}><MdTableChart className="mr-1" /> Tabela</button>
                    <button onClick={() => setViewMode('graph')} className={`flex items-center px-4 py-1.5 text-sm rounded-md transition ${ viewMode === 'graph' ? 'bg-sky-600 text-white shadow' : 'bg-slate-600 text-slate-200 hover:bg-slate-500' }`}><MdBarChart className="mr-1" /> Gráfico</button>
                </div>

                {/* Erro (Restaurado) */}
                {error && (<p className="text-center text-red-400 mb-4 p-3 bg-red-900/50 rounded border border-red-500">{error}</p>)}

                {/* Loading (Restaurado) */}
                {isLoading ? (<p className="text-center text-sky-300 py-10">Carregando relatório...</p>) : (
                    // Container principal dos resultados (Restaurado)
                    <div className="bg-slate-900 rounded-lg shadow p-4 md:p-6">
                        {dadosContagem.length === 0 && !error ? (<p className="text-center text-slate-400">Nenhum dado encontrado.</p>) : !error ? (
                            <div className={getLayoutClasses()}>
                                {/* Seção Tabela com Ícones (Restaurado) */}
                                <div className={getSectionClasses('table')}>
                                    <h2 className="flex items-center text-lg mb-3 font-semibold text-white"><MdList className="mr-2" /> Dados Mensais</h2>
                                    {/* Usei ul/li para a tabela textual */}
                                    <ul className="list-none pl-0 space-y-1 text-sm max-h-96 overflow-y-auto text-slate-300">
                                        {dadosContagem.map(item => (
                                            <li key={item.mesAno} className="flex items-center border-b border-slate-700 py-1"> {/* Adicionado borda e padding */}
                                                <MdCalendarToday className="inline-block mr-2 text-base text-slate-400 flex-shrink-0" /> {/* Ícone para data */}
                                                <span className="flex-grow">{item.mesAno}:</span>
                                                <span className="font-semibold text-slate-100 ml-2">{item.quantidade}</span>
                                            </li>
                                        ))}
                                    </ul>
                                </div>

                                {/* Seção Gráfico com Correção de Alinhamento */}
                                <div className={getSectionClasses('graph')}>
                                    {/* Container interno para centralizar o canvas */}
                                    {/* Ajuste max-w-full ou outra largura se necessário */}
                                    <div className="relative h-64 md:h-96 mx-auto" style={{ width: '95%' }}> {/* Adicionado mx-auto e largura relativa */}
                                        <Bar data={chartData} options={chartOptions} />
                                    </div>
                                </div>
                            </div>
                        ) : null}
                    </div>
                )}
            </main>
        </>
    );
}

// --- Arquivo: app\relatorio\historico-cliente\page.tsx
// --- Componente: RelatorioHistoricoClientePage
// app/relatorio/historico-cliente/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import NavBar from '@/components/nav-bar';
import { useRouter } from 'next/navigation';
import {
    MdHistory,
    MdSearch,
    MdPerson,
    MdDocumentScanner,
    MdFingerprint,
    MdCalendarToday,
    MdComment,
    MdDirectionsCar,
    MdList
} from 'react-icons/md';

// --- Interfaces ---
interface ClienteInfoDTO {
    idCli: number;
    idEndereco: number;
    nome: string;
    sobrenome: string;
    numeroDocumento: string;
    getNomeCompleto?(): string;
}
interface HistoricoAgendamentoClienteDTO {
    dataAgendamento: string;
    observacao: string | null;
    veiculoPlaca: string | null;
}
interface AgendamentoHistorico {
    dataAgendamento: string;
    observacao: string;
    veiculoPlaca: string;
}
type TipoBuscaCliente = 'nome' | 'documento' | 'idCliente';

const addGetNomeCompleto = (cliente: ClienteInfoDTO): ClienteInfoDTO => ({
    ...cliente,
    getNomeCompleto() {
        return `${this.nome} ${this.sobrenome}`.trim();
    }
});

export default function RelatorioHistoricoClientePage() {
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaCliente>('nome');
    const [termoBuscaCliente, setTermoBuscaCliente] = useState('');
    const [clientesEncontrados, setClientesEncontrados] = useState<ClienteInfoDTO[]>([]);
    const [isBuscandoCliente, setIsBuscandoCliente] = useState(false);

    const [clienteSelecionado, setClienteSelecionado] = useState<ClienteInfoDTO | null>(null);
    const [historico, setHistorico] = useState<AgendamentoHistorico[]>([]);
    const [isLoadingHistorico, setIsLoadingHistorico] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const router = useRouter();

    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'nome': return 'Digite nome ou sobrenome…';
            case 'documento': return 'Digite CPF ou CNPJ…';
            case 'idCliente': return 'Digite Código do Cliente…';
            default: return '';
        }
    };

    const buscarClientes = async (e: FormEvent) => {
        e.preventDefault();
        setIsBuscandoCliente(true);
        setError(null);
        setClientesEncontrados([]);
        setClienteSelecionado(null);
        setHistorico([]);

        if (!termoBuscaCliente.trim()) {
            setError("Insira um termo para busca.");
            setIsBuscandoCliente(false);
            return;
        }

        const params = new URLSearchParams();
        params.append(tipoBusca, termoBuscaCliente.trim());
        const apiUrl = `http://localhost:8080/rest/clientes/buscar?${params}`;
        console.info("Buscando clientes:", apiUrl);

        try {
            const resp = await fetch(apiUrl);
            if (!resp.ok) {
                if (resp.status === 400) throw new Error("Critério de busca inválido.");
                if (resp.status === 404 || resp.status === 204) {
                    setClientesEncontrados([]);
                    return;
                }
                throw new Error(`Erro HTTP ${resp.status}`);
            }
            const text = await resp.text();
            if (!text) {
                setClientesEncontrados([]);
                return;
            }
            const data: ClienteInfoDTO[] = JSON.parse(text);
            setClientesEncontrados(data.map(addGetNomeCompleto));
        } catch (err: any) {
            setError(err instanceof TypeError
                ? "Falha ao conectar ao servidor."
                : err.message);
            setClientesEncontrados([]);
        } finally {
            setIsBuscandoCliente(false);
        }
    };

    const fetchHistorico = async (idCli: number, idEnd: number) => {
        setIsLoadingHistorico(true);
        setError(null);
        setHistorico([]);
        const apiUrl = `http://localhost:8080/rest/relatorios/historico-cliente/${idCli}/${idEnd}`;
        console.info("Buscando histórico em:", apiUrl);
        try {
            const resp = await fetch(apiUrl);
            if (!resp.ok) {
                if (resp.status === 404)
                    throw new Error("Histórico não encontrado (404).");
                if (resp.status === 400)
                    throw new Error("ID inválido para histórico.");
                if (resp.status === 204) return;
                throw new Error(`Erro HTTP ${resp.status}`);
            }
            const text = await resp.text();
            if (!text) return;
            const data: HistoricoAgendamentoClienteDTO[] = JSON.parse(text);
            const fmt = data.map(dto => ({
                dataAgendamento: dto.dataAgendamento
                    ? new Date(dto.dataAgendamento + 'T00:00:00')
                        .toLocaleDateString('pt-BR', { timeZone: 'UTC' })
                    : 'N/A',
                observacao: dto.observacao || '-',
                veiculoPlaca: dto.veiculoPlaca || 'N/A'
            }));
            setHistorico(fmt);
        } catch (err: any) {
            setError(err instanceof TypeError
                ? "Falha ao conectar ao servidor."
                : err.message);
            setHistorico([]);
        } finally {
            setIsLoadingHistorico(false);
        }
    };

    const handleSelecionarCliente = (c: ClienteInfoDTO) => {
        setError(null);
        setClienteSelecionado(c);
        setClientesEncontrados([]);
        fetchHistorico(c.idCli, c.idEndereco);
    };

    return (
        <>
            <NavBar active="relatorio-historico-cliente" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="flex items-center justify-center text-3xl font-bold mb-6">
                    <MdHistory className="mr-2 text-4xl" />
                    Histórico por Cliente
                </h1>

                <form
                    onSubmit={buscarClientes}
                    className="mb-6 p-4 bg-slate-800 rounded-lg shadow flex flex-col sm:flex-row gap-3 items-end"
                >
                    <div className="flex-shrink-0">
                        <label htmlFor="tipoBusca" className="block text-sm mb-1 text-slate-300 flex items-center">
                            <MdPerson className="mr-1" />
                            Buscar por:
                        </label>
                        <select
                            id="tipoBusca"
                            value={tipoBusca}
                            onChange={e => {
                                setTipoBusca(e.target.value as TipoBuscaCliente);
                                setTermoBuscaCliente('');
                                setClientesEncontrados([]);
                                setClienteSelecionado(null);
                                setHistorico([]);
                                setError(null);
                            }}
                            className="w-full sm:w-auto p-2 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"
                        >
                            <option value="nome">Nome</option>
                            <option value="documento">Documento</option>
                            <option value="idCliente">Código</option>
                        </select>
                    </div>

                    <div className="flex-grow">
                        <label htmlFor="termoBusca" className="block text-sm mb-1 text-slate-300 flex items-center">
                            {tipoBusca === 'nome' ? <MdPerson className="mr-1" /> :
                                tipoBusca === 'documento' ? <MdDocumentScanner className="mr-1" /> :
                                    <MdFingerprint className="mr-1" />}
                            Termo:
                        </label>
                        <input
                            id="termoBusca"
                            type={tipoBusca === 'idCliente' ? 'number' : 'text'}
                            value={termoBuscaCliente}
                            onChange={e => setTermoBuscaCliente(e.target.value)}
                            placeholder={getPlaceholder()}
                            required
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:ring-2 focus:ring-sky-500"
                        />
                    </div>

                    <button
                        type="submit"
                        disabled={isBuscandoCliente}
                        className="px-5 py-2 bg-sky-600 hover:bg-sky-700 rounded text-white flex items-center whitespace-nowrap font-semibold"
                    >
                        <MdSearch className="mr-2" />
                        {isBuscandoCliente ? 'Buscando...' : 'Buscar Cliente'}
                    </button>
                </form>

                {error && (
                    <p className="text-center text-red-400 mb-4 p-3 bg-red-900/50 rounded border border-red-500">
                        {error}
                    </p>
                )}

                {isBuscandoCliente && (
                    <p className="text-center text-sky-300">Buscando clientes...</p>
                )}

                {!isBuscandoCliente && clientesEncontrados.length > 0 && (
                    <div className="mb-6 bg-slate-700 p-4 rounded shadow">
                        <h3 className="text-lg mb-2 font-semibold text-white flex items-center">
                            <MdList className="mr-2" />
                            Selecione o Cliente
                        </h3>
                        <ul className="space-y-1 max-h-48 overflow-y-auto">
                            {clientesEncontrados.map(c => (
                                <li
                                    key={`${c.idCli}-${c.idEndereco}`}
                                    onClick={() => handleSelecionarCliente(c)}
                                    className="p-2 hover:bg-sky-600 cursor-pointer rounded flex justify-between items-center text-sm"
                                    title={`Endereço ID: ${c.idEndereco}`}
                                >
                  <span>
                    <MdPerson className="inline mr-1" />
                      {c.getNomeCompleto?.()} (ID {c.idCli})
                  </span>
                                    <span className="text-xs text-slate-400">
                    Doc: {c.numeroDocumento}
                  </span>
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {clienteSelecionado && !error && (
                    <div className="mt-8">
                        <h2 className="flex items-center text-2xl font-semibold mb-4">
                            <MdHistory className="mr-2" />
                            Histórico de {clienteSelecionado.getNomeCompleto?.()}
                        </h2>
                        {isLoadingHistorico ? (
                            <p className="text-center text-sky-300 py-5">
                                Carregando histórico...
                            </p>
                        ) : (
                            <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                                <table className="min-w-full table-fixed">
                                    <thead className="bg-slate-800 border-b border-slate-700">
                                    <tr>
                                        <th className="w-1/4 px-6 py-3 flex items-center text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                            <MdCalendarToday className="mr-1" />
                                            Data
                                        </th>
                                        <th className="w-2/4 px-6 py-3 flex items-center text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                            <MdComment className="mr-1" />
                                            Observação
                                        </th>
                                        <th className="w-1/4 px-6 py-3 flex items-center text-left text-xs font-medium text-slate-300 uppercase tracking-wider">
                                            <MdDirectionsCar className="mr-1" />
                                            Veículo
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody className="divide-y divide-slate-700">
                                    {historico.length === 0 ? (
                                        <tr>
                                            <td colSpan={3} className="px-6 py-4 text-center text-slate-400">
                                                Nenhum histórico encontrado.
                                            </td>
                                        </tr>
                                    ) : (
                                        historico.map((item, idx) => (
                                            <tr key={idx} className="hover:bg-slate-800/50">
                                                <td className="px-6 py-4 whitespace-nowrap">{item.dataAgendamento}</td>
                                                <td className="px-6 py-4 whitespace-normal break-words">{item.observacao}</td>
                                                <td className="px-6 py-4 whitespace-nowrap">{item.veiculoPlaca}</td>
                                            </tr>
                                        ))
                                    )}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                )}

                {!clienteSelecionado && !isBuscandoCliente && !error && clientesEncontrados.length === 0 && (
                    <p className="text-center text-slate-400 mt-10">
                        Use a busca acima para encontrar um cliente.
                    </p>
                )}
            </main>
        </>
    );
}


// --- Arquivo: app\relatorio\listar\page.tsx
// --- Componente: RelatorioAgendamentosFuturosPage
// app/relatorio/agendamentos-futuros/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link'; // Link pode não ser necessário aqui, a menos que link para detalhes
import NavBar from '@/components/nav-bar';

// --- Interfaces (podem ser as mesmas da listagem) ---
interface AgendamentoParaLista { id: number; dataAgendamento: string; observacao: string; }
interface PaginatedAgendaResponse { content: AgendamentoApiResponseDto[]; totalPages: number; totalElements: number; number: number; size: number; }
interface AgendamentoApiResponseDto { id: number; dataAgendamento: string; observacao: string | null; }
// ----------------------------------------------------

export default function RelatorioAgendamentosFuturosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(15); // Pode aumentar o tamanho para relatórios

    // --- Função para buscar agendamentos futuros paginados ---
    const fetchAgendamentosFuturos = async (page = 0) => {
        setIsLoading(true);
        setError(null);

        const today = new Date().toISOString().split('T')[0]; // Pega data de hoje no formato AAAA-MM-DD

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'dataAgendamento,asc', // Ordenar por data ascendente
            dataInicio: today // <<< FILTRO PRINCIPAL DESTE RELATÓRIO
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.info("Buscando agendamentos futuros:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 400) {
                    const errorData = await response.json().catch(() => ({ message: "Requisição inválida (400)." }));
                    throw new Error(errorData.message || `Erro HTTP ${response.status}`);
                }
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }

            if (response.status === 204) { // No Content
                setAgendamentos([]); setTotalPages(0); setCurrentPage(0);
                console.info("Nenhum agendamento futuro encontrado.");
                return;
            }

            const data: PaginatedAgendaResponse = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                observacao: dto.observacao || '',
            }));

            setAgendamentos(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);

        } catch (err: any) {
            setError(err.message || "Falha ao carregar relatório de agendamentos futuros.");
            setAgendamentos([]); setTotalPages(0);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchAgendamentosFuturos(currentPage);
    }, [currentPage, pageSize]);

    // Funções de Paginação
    const handlePreviousPage = () => { if (currentPage > 0) { fetchAgendamentosFuturos(currentPage - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { fetchAgendamentosFuturos(currentPage + 1); } };

    return (
        <>
            <NavBar active="relatorio"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Relatório: Agendamentos Futuros</h1>

                {/* Mensagens */}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {/* Tabela de Agendamentos */}
                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando relatório...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Agendada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                {/* Adicionar colunas de Cliente/Veículo se implementar no backend */}
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {agendamentos.length === 0 ? (
                                <tr><td colSpan={3} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento futuro encontrado.</td></tr> // Ajustar colSpan se adicionar colunas
                            ) : (
                                agendamentos.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-lg truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        {/* Adicionar tds de Cliente/Veículo aqui */}
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Controles de Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        {/* ... botões de paginação ... */}
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Anterior
                        </button>
                        <span className="text-slate-300">
                             Página {currentPage + 1} de {totalPages}
                         </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Próxima
                        </button>
                    </div>
                )}
            </main>
        </>
    );
}

// --- Arquivo: app\relatorio\servicos-agendados\page.tsx
// --- Componente: RelatorioServicosAgendadosPage
// app/relatorio/servicos-agendados/page.tsx
"use client";

import { useState, useEffect } from 'react';
import NavBar from '@/components/nav-bar';
// --- Ícones importados ---
import { CalendarDays, Hash, RectangleHorizontal, AlertTriangle, Stethoscope } from 'lucide-react';

// --- Interfaces ---
interface ServicoAgendado { agendaId: number; dataAgendamento: string; veiculoPlaca: string | null; descricaoProblema: string | null; diagnostico: string | null; }
interface PaginatedServicosResponse { content: ServicoAgendadoDto[]; totalPages: number; number: number; size: number; }
interface ServicoAgendadoDto { agendaId: number; dataAgendamento: string; veiculoPlaca: string | null; descricaoProblema: string | null; diagnostico: string | null; }
// ----------------

export default function RelatorioServicosAgendadosPage() {
    const [servicos, setServicos] = useState<ServicoAgendado[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(10); // Ajustado para 10, modifique se necessário

    useEffect(() => {
        const fetchServicos = async (page = 0) => {
            setIsLoading(true); setError(null);
            const today = new Date().toISOString().split('T')[0];
            const params = new URLSearchParams({
                page: page.toString(), size: pageSize.toString(),
                sort: 'dataAgendamento,asc', dataInicio: today
            });
            const apiUrl = `http://localhost:8080/rest/relatorios/servicos-agendados?${params.toString()}`;
            console.info("Buscando serviços agendados:", apiUrl);

            try {
                const response = await fetch(apiUrl);
                if (!response.ok) { /* ... tratamento de erro ... */
                    if (response.status === 404) throw new Error("Endpoint de serviços agendados não encontrado (404).");
                    if (response.status >= 500) throw new Error(`Erro no servidor (${response.status}).`);
                    throw new Error(`Erro HTTP ${response.status}`);
                }
                if (response.status === 204) { setServicos([]); setTotalPages(0); setCurrentPage(0); return; }

                const data: PaginatedServicosResponse = await response.json();
                const formatados: ServicoAgendado[] = data.content.map(dto => ({
                    agendaId: dto.agendaId,
                    dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                    veiculoPlaca: dto.veiculoPlaca || '-',
                    descricaoProblema: dto.descricaoProblema || '-',
                    diagnostico: dto.diagnostico || 'Pendente'
                }));
                setServicos(formatados); setTotalPages(data.totalPages); setCurrentPage(data.number);
            } catch (err: any) {
                if (err instanceof TypeError && err.message === "Failed to fetch") { setError("Falha ao conectar ao servidor."); }
                else { setError(err.message || "Falha ao carregar relatório."); }
                setServicos([]); setTotalPages(0);
            } finally { setIsLoading(false); }
        };
        fetchServicos(currentPage);
    }, [currentPage, pageSize]);

    // Funções de Paginação
    const handlePreviousPage = () => { if (currentPage > 0) { setCurrentPage(prev => prev - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { setCurrentPage(prev => prev + 1); } };


    return (
        <>
            <NavBar active="relatorio-servicos-agendados"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título com Ícone */}
                <h1 className="text-3xl font-bold mb-6 text-center flex justify-center items-center gap-2">
                    <Stethoscope className="h-8 w-8" /> {/* Ícone de exemplo */}
                    Relatório: Serviços Agendados
                </h1>

                {error && ( <p className="text-center text-red-400 mb-4 p-3 bg-red-900/50 border border-red-500 rounded">{error}</p> )}

                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando relatório...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                {/* Cabeçalhos com Ícones */}
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase text-slate-300"><div className="flex items-center gap-2"><Hash size={16}/>Agenda ID</div></th>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase text-slate-300"><div className="flex items-center gap-2"><CalendarDays size={16}/>Data</div></th>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase text-slate-300"><div className="flex items-center gap-2"><RectangleHorizontal size={16}/>Placa</div></th>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase text-slate-300"><div className="flex items-center gap-2"><AlertTriangle size={16}/>Problema Descrito</div></th>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase text-slate-300"><div className="flex items-center gap-2"><Stethoscope size={16}/>Diagnóstico Preliminar</div></th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {servicos.length === 0 && !error ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum serviço agendado encontrado a partir de hoje.</td></tr>
                            ) : (
                                servicos.map((s, index) => {
                                    const rowClass = index % 2 === 0 ? 'bg-slate-900' : 'bg-slate-800/50';
                                    return (
                                        <tr key={s.agendaId} className={`${rowClass} hover:bg-sky-900/50`}>
                                            {/* Células de dados */}
                                            <td className="px-4 py-4 whitespace-nowrap text-sm">{s.agendaId}</td>
                                            <td className="px-4 py-4 whitespace-nowrap text-sm">
                                                {/* Adicionando ícone na célula da data também */}
                                                <div className="flex items-center gap-2">
                                                    <CalendarDays className="h-4 w-4 text-sky-400 flex-shrink-0"/>
                                                    {s.dataAgendamento}
                                                </div>
                                            </td>
                                            <td className="px-4 py-4 whitespace-nowrap text-sm font-mono"> {/* Placa com mono */}
                                                {s.veiculoPlaca}
                                            </td>
                                            <td className="px-4 py-4 text-sm whitespace-normal max-w-sm break-words">{s.descricaoProblema}</td>
                                            <td className="px-4 py-4 text-sm whitespace-normal max-w-sm break-words">{s.diagnostico}</td>
                                        </tr>
                                    );
                                })
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Controles de Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fillRule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/></svg>Anterior </button>
                        <span className="text-slate-300"> Página {currentPage + 1} de {totalPages} </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1"> Próxima <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fillRule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/></svg></button>
                    </div>
                )}
            </main>
        </>
    );
}

// --- Arquivo: app\veiculo\alterar\[id]\page.tsx
// --- Componente: AlterarVeiculoPage
// src/app/veiculo/alterar/[id]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o path

// Defina ou importe as interfaces aqui
interface VeiculoResponse { id: number; tipoVeiculo: string; renavam: string; placa: string; modelo: string; proprietario: string; montadora: string; cor: string; motor: string; anoFabricacao: string; }
interface VeiculoFormData { tipoVeiculo: string; renavam: string; placa: string; modelo: string; proprietario: string; montadora: string; cor: string; motor: string; anoFabricacao: string; }

// --- LISTA EXPANDIDA DE MONTADORAS (IDÊNTICA AO CADASTRO) ---
const montadoras = [
    "Agrale", "Aston Martin", "Audi", "Bentley", "BMW", "BYD",
    "CAOA Chery", "Chery", "Chevrolet", "Chrysler", "Citroën",
    "Dodge", "Effa", "Ferrari", "Fiat", "Ford",
    "GMC", "GWM", "Hafei", "Honda", "Hyundai",
    "Iveco", "Jac", "Jaguar", "Jeep", "Jinbei",
    "Kia", "Lamborghini", "Land Rover", "Lexus", "Lifan",
    "Maserati", "Mercedes-AMG", "Mercedes-Benz", "Mini", "Mitsubishi",
    "Nissan", "Peugeot", "Porsche",
    "RAM", "Renault", "Rolls-Royce",
    "Shineray", "SsangYong", "Subaru", "Suzuki",
    "Toyota", "Troller",
    "Volkswagen", "Volvo",
    "Outra"
].sort();
// -------------------------------------------------------------

// Opções de exemplo para outros selects (IDÊNTICO AO CADASTRO)
const tiposVeiculo = ["Carro", "Moto", "Caminhão", "Ônibus", "Utilitário", "Outro"];
const cores = ["Preto", "Branco", "Prata", "Cinza", "Vermelho", "Azul", "Verde", "Amarelo", "Marrom", "Bege", "Dourado", "Laranja", "Roxo", "Vinho", "Outra"];

export default function AlterarVeiculoPage() {
    const router = useRouter();
    const params = useParams();
    const id = params.id as string;

    const [formData, setFormData] = useState<VeiculoFormData>({
        tipoVeiculo: '', renavam: '', placa: '', modelo: '', proprietario: '',
        montadora: '', cor: '', motor: '', anoFabricacao: '',
    });
    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [originalData, setOriginalData] = useState<VeiculoResponse | null>(null);

    // Busca dados do veículo (sem alterações na lógica)
    useEffect(() => {
        if (!id) { setError("ID do veículo não fornecido."); setIsFetching(false); return; }
        const fetchVeiculo = async () => {
            setIsFetching(true); setError(null);
            const apiUrl = `http://localhost:8080/rest/veiculo/${id}`;
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) { throw new Error(`Erro ao buscar veículo ${id}: ${response.status}`); }
                const data: VeiculoResponse = await response.json();
                setOriginalData(data);
                setFormData({
                    tipoVeiculo: data.tipoVeiculo || '', renavam: data.renavam || '',
                    placa: data.placa || '', modelo: data.modelo || '',
                    proprietario: data.proprietario || '', montadora: data.montadora || '',
                    cor: data.cor || '', motor: data.motor || '',
                    anoFabricacao: data.anoFabricacao || '',
                });
            } catch (err: any) { setError(err.message || "Falha ao carregar dados."); }
            finally { setIsFetching(false); }
        };
        fetchVeiculo();
    }, [id]);

    // Handler genérico (sem alterações)
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    // Submete a atualização (sem alterações na lógica)
    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault(); setIsLoading(true); setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/${id}`;
        try {
            const response = await fetch(apiUrl, {
                method: 'PUT', headers: { 'Content-Type': 'application/json', },
                body: JSON.stringify(formData),
            });
            if (!response.ok) { throw new Error(`Erro ao atualizar veículo ${id}: ${response.status}`); }
            router.push('/veiculo/listar');
        } catch (err: any) { setError(err.message || "Falha ao atualizar."); }
        finally { setIsLoading(false); }
    };

    // Renderização condicional (sem alterações)
    if (isFetching) { /* ... JSX de carregando ... */
        return (
            <>
                <NavBar active="veiculo" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-sky-300">Carregando dados do veículo...</p>
                </main>
            </>
        );
    }
    if (error && !isFetching && !originalData) { /* ... JSX de erro ao carregar ... */
        return (
            <>
                <NavBar active="veiculo" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-2xl mx-auto text-center">
                        <h1 className="text-xl font-bold mb-4 text-red-400">Erro ao Carregar Veículo</h1>
                        <p className="mb-4 text-red-300">{error}</p>
                        <Link href="/veiculo/listar">
                            <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow">Voltar para Lista</button>
                        </Link>
                    </div>
                </main>
            </>
        );
    }

    // Renderização do formulário (com a lista de montadoras atualizada)
    return (
        <>
            <NavBar active="veiculo-alterar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-4xl mx-auto">
                    <h1 className="text-2xl md:text-3xl font-bold mb-8 text-center">Alterar Veículo (ID: {id})</h1>
                    {error && ( /* Erro do submit */
                        <div className="mb-4 text-red-400 bg-red-900/50 p-3 rounded border border-red-500 text-sm">{error}</div>
                    )}
                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* --- Seção: Detalhes do Veículo --- */}
                        <section>
                            <h2 className="text-xl font-semibold text-sky-300 mb-4 border-b border-slate-700 pb-2">Detalhes do Veículo</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                                <div>
                                    <label htmlFor="tipoVeiculo" className="block text-sm font-medium text-slate-300 mb-1">Tipo Veículo</label>
                                    <select id="tipoVeiculo" name="tipoVeiculo" value={formData.tipoVeiculo} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione o tipo</option>
                                        {tiposVeiculo.map(tipo => (<option key={tipo} value={tipo}>{tipo}</option>))}
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="modelo" className="block text-sm font-medium text-slate-300 mb-1">Modelo</label>
                                    <input type="text" id="modelo" name="modelo" value={formData.modelo} onChange={handleChange} required maxLength={100} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                {/* --- SELECT MONTADORA ATUALIZADO --- */}
                                <div>
                                    <label htmlFor="montadora" className="block text-sm font-medium text-slate-300 mb-1">Montadora</label>
                                    <select id="montadora" name="montadora" value={formData.montadora} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione a montadora</option>
                                        {montadoras.map(m => (<option key={m} value={m}>{m}</option>))}
                                    </select>
                                </div>
                                {/* ----------------------------------- */}
                                <div>
                                    <label htmlFor="anoFabricacao" className="block text-sm font-medium text-slate-300 mb-1">Ano Fabricação</label>
                                    <input type="date" id="anoFabricacao" name="anoFabricacao" value={formData.anoFabricacao} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div>
                                    <label htmlFor="cor" className="block text-sm font-medium text-slate-300 mb-1">Cor</label>
                                    <select id="cor" name="cor" value={formData.cor} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione a cor</option>
                                        {cores.map(c => (<option key={c} value={c}>{c}</option>))}
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="motor" className="block text-sm font-medium text-slate-300 mb-1">Motor</label>
                                    <input type="text" id="motor" name="motor" value={formData.motor} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                            </div>
                        </section>

                        {/* --- Seção: Identificação --- */}
                        <section>
                            <h2 className="text-xl font-semibold text-sky-300 mb-4 border-b border-slate-700 pb-2">Identificação</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                                <div>
                                    <label htmlFor="placa" className="block text-sm font-medium text-slate-300 mb-1">Placa</label>
                                    <input type="text" id="placa" name="placa" placeholder="AAA1234 ou ABC1D23" value={formData.placa} onChange={handleChange} required maxLength={7} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div>
                                    <label htmlFor="renavam" className="block text-sm font-medium text-slate-300 mb-1">Renavam</label>
                                    <input type="text" id="renavam" name="renavam" placeholder="Apenas números" value={formData.renavam} onChange={handleChange} required maxLength={13} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div className="md:col-span-2">
                                    <label htmlFor="proprietario" className="block text-sm font-medium text-slate-300 mb-1">Proprietário</label>
                                    <input type="text" id="proprietario" name="proprietario" value={formData.proprietario} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                            </div>
                        </section>

                        {/* Botões */}
                        <div className="flex justify-end gap-4 pt-6">
                            <Link href="/veiculo/listar"><button type="button" className="px-5 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow">Cancelar</button></Link>
                            <button type="submit" disabled={isLoading || isFetching} className={`px-5 py-2 font-semibold rounded-md shadow ${isLoading || isFetching ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}>{isLoading ? 'Atualizando...' : 'Atualizar Veículo'}</button>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
} // <<< FIM DO ARQUIVO

// --- Arquivo: app\veiculo\buscar\page.tsx
// --- Componente: BuscarVeiculoPage
// src/app/veiculo/buscar/page.tsx
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o path se necessário

// Defina ou importe as interfaces aqui (ou de @/types/veiculo)
interface VeiculoResponse {
    id: number;
    tipoVeiculo: string;
    renavam: string;
    placa: string;
    modelo: string;
    proprietario: string;
    montadora: string;
    cor: string;
    motor: string;
    anoFabricacao: string;
}

// Tipo para definir as opções de busca
type SearchField = 'placa' | 'proprietario' | 'modelo'; // Adicione 'modelo' se desejar

export default function BuscarVeiculoPage() {
    const router = useRouter();
    // Estado para o campo de busca selecionado
    const [searchField, setSearchField] = useState<SearchField>('placa'); // Inicia com 'placa'
    // Estado para o valor único de busca
    const [searchValue, setSearchValue] = useState('');

    const [results, setResults] = useState<VeiculoResponse[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);

    // Handlers (sem alterações na lógica)
    const handleFieldChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setSearchField(e.target.value as SearchField);
        setSearchValue(''); setError(null); setResults([]); setHasSearched(false);
    };
    const handleValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchValue(e.target.value);
    };

    // Lógica de busca (sem alterações na lógica)
    const handleSearch = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault(); setIsLoading(true); setError(null); setResults([]); setHasSearched(true);
        if (!searchValue.trim()) { setError("Por favor, digite um valor para buscar."); setIsLoading(false); return; }
        const queryParams = new URLSearchParams();
        queryParams.append(searchField, searchValue.trim());
        const apiUrl = `http://localhost:8080/rest/veiculo/all?${queryParams.toString()}`;
        console.log("Buscando em:", apiUrl);
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`;
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                throw new Error(errorMsg);
            }
            if (response.status === 204) { setResults([]); }
            else { const data: VeiculoResponse[] = await response.json(); setResults(data || []); }
        } catch (err: any) {
            setError(err.message || "Falha ao buscar veículos."); console.error("Erro:", err); setResults([]);
        } finally { setIsLoading(false); }
    };

    const navigateToDelete = (id: number) => { router.push(`/veiculo/deletar/${id}`); };

    return (
        <>
            <NavBar active="veiculo-buscar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-2xl md:text-3xl font-bold mb-8 text-center">Buscar Veículos</h1> {/* Aumentei margem inferior */}

                {/* Formulário de Busca Atualizado com Layout Horizontal */}
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-4xl mx-auto mb-8"> {/* Aumentei max-w */}
                    <form onSubmit={handleSearch}>
                        {/* Container Flex para alinhar horizontalmente */}
                        <div className="flex flex-wrap items-end gap-4"> {/* items-end para alinhar na base */}

                            {/* Grupo: Label + Select */}
                            <div className="flex-shrink-0"> {/* Evita que o select estique demais */}
                                <label htmlFor="searchField" className="block text-sm font-medium text-slate-300 mb-1">Buscar por:</label>
                                <select
                                    id="searchField"
                                    name="searchField"
                                    value={searchField}
                                    onChange={handleFieldChange}
                                    className="h-10 px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500" // Ajuste altura (h-10)
                                >
                                    <option value="placa">Placa</option>
                                    <option value="proprietario">Proprietário</option>
                                    <option value="modelo">Modelo</option>
                                </select>
                            </div>

                            {/* Grupo: Label + Input (ocupa espaço restante) */}
                            <div className="flex-grow"> {/* Faz o input ocupar o espaço */}
                                <label htmlFor="searchValue" className="block text-sm font-medium text-slate-300 mb-1">Termo de Busca:</label>
                                <input
                                    type="text"
                                    id="searchValue"
                                    name="searchValue"
                                    value={searchValue}
                                    onChange={handleValueChange}
                                    required
                                    placeholder={`Digite ${searchField === 'placa' ? 'a placa' : searchField === 'proprietario' ? 'parte do nome' : 'parte do modelo'}`}
                                    className="w-full h-10 px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500" // Ajuste altura (h-10)
                                />
                            </div>

                            {/* Botão Buscar */}
                            <div className="flex-shrink-0"> {/* Evita que o botão estique */}
                                <button
                                    type="submit"
                                    disabled={isLoading}
                                    className={`h-10 px-5 py-2 font-semibold rounded-md shadow ${isLoading ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`} // Ajuste altura (h-10)
                                >
                                    {isLoading ? 'Buscando...' : 'Buscar'}
                                </button>
                            </div>
                        </div>
                        {error && (
                            <p className="mt-3 text-sm text-red-400">{error}</p> // Erro abaixo do form
                        )}
                    </form>
                </div>

                {/* Área de Resultados (sem alterações na estrutura da tabela) */}
                {hasSearched && !isLoading && (
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold mb-4">Resultados da Busca</h2>
                        {results.length > 0 ? (
                            <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                                <table className="min-w-full table-auto">
                                    <thead className="bg-slate-800 border-b border-slate-700">
                                    <tr>{/* ... th iguais ao listar ... */}
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Tipo</th>
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Placa</th>
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Modelo</th>
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Montadora</th>
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cor</th>
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Ano</th>
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Proprietário</th>
                                        <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Renavam</th>
                                        <th className="px-4 sm:px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                                    </tr>
                                    </thead>
                                    <tbody className="divide-y divide-slate-700">
                                    {results.map((veiculo, index) => {
                                        const isIdValid = veiculo.id !== null && veiculo.id !== undefined;
                                        if (!isIdValid) { console.error("Veículo com ID inválido:", veiculo); }
                                        const rowClass = index % 2 === 0 ? 'bg-slate-900' : 'bg-slate-800/50';
                                        return (
                                            <tr key={isIdValid ? veiculo.id : `invalid-${index}`} className={`${rowClass} hover:bg-sky-900/50 ${!isIdValid ? 'opacity-50' : ''}`}>
                                                <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{isIdValid ? veiculo.id : 'Inválido'}</td>
                                                <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.tipoVeiculo || '-'}</td>
                                                <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm font-mono">{veiculo.placa || '-'}</td>
                                                <td className="px-4 sm:px-6 py-4 text-sm whitespace-normal break-words min-w-[150px]">{veiculo.modelo || '-'}</td>
                                                <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.montadora || '-'}</td>
                                                <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.cor || '-'}</td>
                                                <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.anoFabricacao ? veiculo.anoFabricacao.split('-')[0] : '-'}</td>
                                                <td className="px-4 sm:px-6 py-4 text-sm whitespace-normal break-words min-w-[150px]">{veiculo.proprietario || '-'}</td>
                                                <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.renavam || '-'}</td>
                                                <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-center text-sm space-x-2">
                                                    {isIdValid ? (
                                                        <>
                                                            <Link href={`/veiculo/alterar/${veiculo.id}`}><button className="px-2 py-1 text-xs sm:px-3 sm:py-1 sm:text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">Editar</button></Link>
                                                            <button onClick={() => navigateToDelete(veiculo.id)} className="px-2 py-1 text-xs sm:px-3 sm:py-1 sm:text-sm bg-red-600 hover:bg-red-700 text-white rounded">Deletar</button>
                                                        </>
                                                    ) : ( <span className="text-xs text-red-400">ID Inválido</span> )}
                                                </td>
                                            </tr>
                                        );
                                    })}
                                    </tbody>
                                </table>
                            </div>
                        ) : (
                            hasSearched && <p className="text-center text-slate-400 py-6">Nenhum veículo encontrado para os critérios informados.</p>
                        )}
                    </div>
                )}
                {isLoading && (
                    <p className="text-center text-sky-300 py-10">Buscando veículos...</p>
                )}

                <div className="mt-8 text-center">
                    <Link href="/veiculo/listar">
                        <button className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow">
                            Voltar para Lista Completa
                        </button>
                    </Link>
                </div>
            </main>
        </>
    );
}

// --- Arquivo: app\veiculo\cadastrar\page.tsx
// --- Componente: CadastrarVeiculoPage
// src/app/veiculo/cadastrar/page.tsx
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o path se necessário

// Defina ou importe a interface
interface VeiculoFormData { tipoVeiculo: string; renavam: string; placa: string; modelo: string; proprietario: string; montadora: string; cor: string; motor: string; anoFabricacao: string; }

// --- LISTA EXPANDIDA DE MONTADORAS (AJUSTE CONFORME NECESSÁRIO) ---
// Ordenada alfabeticamente para facilitar
const montadoras = [
    "Agrale", "Aston Martin", "Audi", "Bentley", "BMW", "BYD",
    "CAOA Chery", "Chery", "Chevrolet", "Chrysler", "Citroën",
    "Dodge", "Effa", "Ferrari", "Fiat", "Ford",
    "GMC", "GWM", "Hafei", "Honda", "Hyundai",
    "Iveco", "Jac", "Jaguar", "Jeep", "Jinbei",
    "Kia", "Lamborghini", "Land Rover", "Lexus", "Lifan",
    "Maserati", "Mercedes-AMG", "Mercedes-Benz", "Mini", "Mitsubishi",
    "Nissan", "Peugeot", "Porsche",
    "RAM", "Renault", "Rolls-Royce",
    "Shineray", "SsangYong", "Subaru", "Suzuki",
    "Toyota", "Troller",
    "Volkswagen", "Volvo",
    "Outra" // Mantém a opção "Outra"
].sort(); // Garante ordem alfabética
// -------------------------------------------------------------------


// Opções de exemplo para outros selects (AJUSTE)
const tiposVeiculo = ["Carro", "Moto", "Caminhão", "Ônibus", "Utilitário", "Outro"]; // Exemplo mais completo
const cores = ["Preto", "Branco", "Prata", "Cinza", "Vermelho", "Azul", "Verde", "Amarelo", "Marrom", "Bege", "Dourado", "Laranja", "Roxo", "Vinho", "Outra"]; // Exemplo mais completo

export default function CadastrarVeiculoPage() {
    const router = useRouter();
    const [formData, setFormData] = useState<VeiculoFormData>({
        tipoVeiculo: '', renavam: '', placa: '', modelo: '', proprietario: '',
        montadora: '', cor: '', motor: '', anoFabricacao: '',
    });
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault(); setIsLoading(true); setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo`;
        try {
            const response = await fetch(apiUrl, {
                method: 'POST', headers: { 'Content-Type': 'application/json', },
                body: JSON.stringify(formData),
            });
            if (!response.ok) {
                let errorMsg = `Erro HTTP ${response.status}`; try { const d = await response.json(); errorMsg = d.message || errorMsg; } catch (e) {} throw new Error(errorMsg);
            }
            router.push('/veiculo/listar');
        } catch (err: any) { setError(err.message || "Falha ao cadastrar."); console.error("Erro:", err); }
        finally { setIsLoading(false); }
    };

    return (
        <>
            <NavBar active="veiculo-cadastrar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-4xl mx-auto">
                    <h1 className="text-2xl md:text-3xl font-bold mb-8 text-center">Cadastrar Novo Veículo</h1>
                    {error && ( <div className="mb-4 text-red-400 bg-red-900/50 p-3 rounded border border-red-500 text-sm">{error}</div> )}
                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* --- Seção: Detalhes do Veículo --- */}
                        <section>
                            <h2 className="text-xl font-semibold text-sky-300 mb-4 border-b border-slate-700 pb-2">Detalhes do Veículo</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                                <div>
                                    <label htmlFor="tipoVeiculo" className="block text-sm font-medium text-slate-300 mb-1">Tipo Veículo</label>
                                    <select id="tipoVeiculo" name="tipoVeiculo" value={formData.tipoVeiculo} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione o tipo</option>
                                        {tiposVeiculo.map(tipo => (<option key={tipo} value={tipo}>{tipo}</option>))}
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="modelo" className="block text-sm font-medium text-slate-300 mb-1">Modelo</label>
                                    <input type="text" id="modelo" name="modelo" value={formData.modelo} onChange={handleChange} required maxLength={100} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                {/* --- SELECT MONTADORA ATUALIZADO --- */}
                                <div>
                                    <label htmlFor="montadora" className="block text-sm font-medium text-slate-300 mb-1">Montadora</label>
                                    <select id="montadora" name="montadora" value={formData.montadora} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione a montadora</option>
                                        {montadoras.map(m => (<option key={m} value={m}>{m}</option>))}
                                    </select>
                                </div>
                                {/* ----------------------------------- */}
                                <div>
                                    <label htmlFor="anoFabricacao" className="block text-sm font-medium text-slate-300 mb-1">Ano Fabricação</label>
                                    <input type="date" id="anoFabricacao" name="anoFabricacao" value={formData.anoFabricacao} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div>
                                    <label htmlFor="cor" className="block text-sm font-medium text-slate-300 mb-1">Cor</label>
                                    <select id="cor" name="cor" value={formData.cor} onChange={handleChange} required className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500">
                                        <option value="" disabled>Selecione a cor</option>
                                        {cores.map(c => (<option key={c} value={c}>{c}</option>))}
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="motor" className="block text-sm font-medium text-slate-300 mb-1">Motor</label>
                                    <input type="text" id="motor" name="motor" value={formData.motor} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                            </div>
                        </section>

                        {/* --- Seção: Identificação --- */}
                        <section>
                            <h2 className="text-xl font-semibold text-sky-300 mb-4 border-b border-slate-700 pb-2">Identificação</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                                <div>
                                    <label htmlFor="placa" className="block text-sm font-medium text-slate-300 mb-1">Placa</label>
                                    <input type="text" id="placa" name="placa" placeholder="AAA1234 ou ABC1D23" value={formData.placa} onChange={handleChange} required maxLength={7} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div>
                                    <label htmlFor="renavam" className="block text-sm font-medium text-slate-300 mb-1">Renavam</label>
                                    <input type="text" id="renavam" name="renavam" placeholder="Apenas números" value={formData.renavam} onChange={handleChange} required maxLength={13} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                                <div className="md:col-span-2">
                                    <label htmlFor="proprietario" className="block text-sm font-medium text-slate-300 mb-1">Proprietário</label>
                                    <input type="text" id="proprietario" name="proprietario" value={formData.proprietario} onChange={handleChange} required maxLength={50} className="w-full px-3 py-2 bg-slate-800 border border-slate-700 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                            </div>
                        </section>

                        {/* Botões */}
                        <div className="flex justify-end gap-4 pt-6">
                            <Link href="/veiculo/listar"><button type="button" className="px-5 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow">Cancelar</button></Link>
                            <button type="submit" disabled={isLoading} className={`px-5 py-2 font-semibold rounded-md shadow ${isLoading ? 'bg-sky-800 cursor-not-allowed' : 'bg-sky-600 hover:bg-sky-700'}`}>{isLoading ? 'Salvando...' : 'Salvar Veículo'}</button>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
} // <<< FIM DO ARQUIVO

// --- Arquivo: app\veiculo\deletar\[id]\page.tsx
// --- Componente: DeletarVeiculoPage
// src/app/veiculo/deletar/[id]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o path

// Defina ou importe a interface aqui
interface VeiculoResponse {
    id: number;
    tipoVeiculo: string;
    renavam: string;
    placa: string;
    modelo: string;
    proprietario: string;
    montadora: string;
    cor: string;
    motor: string;
    anoFabricacao: string;
}

export default function DeletarVeiculoPage() {
    const router = useRouter();
    const params = useParams();
    const id = params.id as string;

    const [veiculo, setVeiculo] = useState<VeiculoResponse | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // Busca dados para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID do veículo não fornecido.");
            setIsFetching(false);
            return;
        }
        const fetchVeiculo = async () => {
            setIsFetching(true);
            setError(null);
            const apiUrl = `http://localhost:8080/rest/veiculo/${id}`; // Endpoint GET por ID
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) {
                    let errorMsg = `Erro ao buscar veículo ${id}: ${response.status}`;
                    try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                    throw new Error(errorMsg);
                }
                const data: VeiculoResponse = await response.json();
                setVeiculo(data);
            } catch (err: any) {
                setError(err.message || "Falha ao carregar dados do veículo para exclusão.");
                console.error("Erro ao buscar veículo:", err);
                setVeiculo(null);
            } finally {
                setIsFetching(false);
            }
        };
        fetchVeiculo();
    }, [id]);

    // Executa a exclusão
    const handleDelete = async () => {
        if (!id) { setError("ID inválido para exclusão."); return; }
        setIsLoading(true);
        setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/${id}`; // Endpoint DELETE
        try {
            const response = await fetch(apiUrl, { method: 'DELETE' });
            if (!response.ok) {
                let errorMsg = `Erro ${response.status} ao deletar veículo.`;
                if(response.status === 404) errorMsg = "Veículo não encontrado para exclusão.";
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                throw new Error(errorMsg);
            }
            if (response.status === 204) { // No Content = Sucesso
                console.log('Veículo deletado com sucesso!');
                router.push('/veiculo/listar');
            } else {
                console.warn("Resposta inesperada após DELETE:", response.status);
                router.push('/veiculo/listar');
            }
        } catch (err: any) {
            setError(err.message || "Falha ao deletar veículo.");
            console.error("Erro ao deletar veículo:", err);
        } finally {
            setIsLoading(false);
        }
    };

    // Renderização condicional
    if (isFetching) {
        return (
            <>
                <NavBar active="veiculo" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-sky-300">Carregando dados para confirmação...</p>
                </main>
            </>
        );
    }
    if (!veiculo) { // Erro ao buscar
        return (
            <>
                <NavBar active="veiculo" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-lg mx-auto text-center">
                        <h1 className="text-xl font-bold mb-4 text-red-400">Erro</h1>
                        <p className="mb-4 text-red-300">{error || "Não foi possível carregar os dados do veículo."}</p>
                        <Link href="/veiculo/listar">
                            <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow">Voltar para Lista</button>
                        </Link>
                    </div>
                </main>
            </>
        );
    }

    // Página de confirmação
    return (
        <>
            <NavBar active="veiculo" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-lg max-w-lg mx-auto">
                    <h1 className="text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">Confirmar Exclusão</h1>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o veículo abaixo? Esta ação não pode ser desfeita.</p>
                    <div className="mb-6 p-4 bg-slate-800 rounded border border-slate-700 text-sm">
                        <p><strong>ID:</strong> {veiculo.id}</p>
                        <p><strong>Placa:</strong> {veiculo.placa}</p>
                        <p><strong>Modelo:</strong> {veiculo.modelo}</p>
                        <p><strong>Proprietário:</strong> {veiculo.proprietario}</p>
                    </div>
                    {error && (
                        <div className="mb-4 text-red-400 bg-red-900/50 p-3 rounded border border-red-500 text-sm">{error}</div>
                    )}
                    <div className="flex justify-center gap-4">
                        <Link href="/veiculo/listar">
                            <button type="button" className="px-5 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md shadow" disabled={isLoading}>Cancelar</button>
                        </Link>
                        <button
                            onClick={handleDelete}
                            disabled={isLoading}
                            className={`px-5 py-2 font-semibold rounded-md shadow ${isLoading ? 'bg-red-800 cursor-not-allowed' : 'bg-red-600 hover:bg-red-700'}`}
                        >
                            {isLoading ? 'Excluindo...' : 'Excluir Veículo'}
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
} // <<< FIM DO ARQUIVO - Sem chaves extras

// --- Arquivo: app\veiculo\listar\page.tsx
// --- Componente: ListarVeiculosPage
// /src/app/veiculo/listar/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar'; // Ajuste o path se necessário

// Defina ou importe a interface (se você não criou /types/veiculo.ts)
interface VeiculoResponse {
    id: number;
    tipoVeiculo: string;
    renavam: string;
    placa: string;
    modelo: string;
    proprietario: string;
    montadora: string;
    cor: string;
    motor: string;
    anoFabricacao: string;
}
// Ou importe se o arquivo existe:
// import { VeiculoResponse } from '@/types/veiculo';


export default function ListarVeiculosPage() {
    const [veiculos, setVeiculos] = useState<VeiculoResponse[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const router = useRouter();

    // --- Fetch direto no useEffect ---
    useEffect(() => {
        const fetchVeiculos = async () => {
            setIsLoading(true);
            setError(null);
            const apiUrl = `http://localhost:8080/rest/veiculo/all`;
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) {
                    let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`;
                    try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch (e) {}
                    throw new Error(errorMsg);
                }
                if (response.status === 204) {
                    setVeiculos([]);
                } else {
                    const data: VeiculoResponse[] = await response.json();
                    setVeiculos(data || []);
                }
            } catch (err: any) {
                setError(err.message || "Falha ao carregar veículos.");
                console.error("Erro ao buscar veículos:", err);
                setVeiculos([]);
            } finally {
                setIsLoading(false);
            }
        };
        fetchVeiculos();
    }, []);

    const navigateToDelete = (id: number) => {
        if (!id && id !== 0) {
            console.error("Tentativa de navegar para deletar com ID inválido:", id);
            setError("Não é possível deletar: ID do veículo inválido na lista.");
            return;
        }
        router.push(`/veiculo/deletar/${id}`);
    };

    return (
        <>
            <NavBar active="veiculo-listar" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho e Botões - BOTÃO "NOVO VEÍCULO" REMOVIDO */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="text-2xl md:text-3xl font-bold text-center sm:text-left">Lista de Veículos</h1>
                    <div className="flex gap-2 flex-wrap justify-center">
                        {/* O botão "Novo Veículo" foi removido daqui */}
                        <Link href="/veiculo/buscar">
                            <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                                Buscar Veículo
                            </button>
                        </Link>
                    </div>
                </div>

                {/* Mensagens */}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <span className="block sm:inline">{error}</span>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button>
                    </div>
                )}

                {/* Tabela de Veículos */}
                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando veículos...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                {/* Colunas */}
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Tipo</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Placa</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Modelo</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Montadora</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cor</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Ano</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Proprietário</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Renavam</th>
                                <th className="px-4 sm:px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {veiculos.length === 0 ? (
                                <tr><td colSpan={10} className="px-6 py-4 text-center text-slate-400">Nenhum veículo encontrado.</td></tr>
                            ) : (
                                veiculos.map((veiculo, index) => {
                                    const isIdValid = veiculo.id !== null && veiculo.id !== undefined;
                                    if (!isIdValid) { console.error("Veículo com ID inválido:", veiculo); }
                                    const rowClass = index % 2 === 0 ? 'bg-slate-900' : 'bg-slate-800/50';

                                    return (
                                        <tr key={isIdValid ? veiculo.id : `invalid-${index}`} className={`${rowClass} hover:bg-sky-900/50 ${!isIdValid ? 'opacity-50' : ''}`}>
                                            {/* Células */}
                                            <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{isIdValid ? veiculo.id : 'Inválido'}</td>
                                            <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.tipoVeiculo || '-'}</td>
                                            <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm font-mono">{veiculo.placa || '-'}</td>
                                            <td className="px-4 sm:px-6 py-4 text-sm whitespace-normal break-words min-w-[150px]">{veiculo.modelo || '-'}</td>
                                            <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.montadora || '-'}</td>
                                            <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.cor || '-'}</td>
                                            <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.anoFabricacao ? veiculo.anoFabricacao.split('-')[0] : '-'}</td>
                                            <td className="px-4 sm:px-6 py-4 text-sm whitespace-normal break-words min-w-[150px]">{veiculo.proprietario || '-'}</td>
                                            <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.renavam || '-'}</td>
                                            <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-center text-sm space-x-2">
                                                {isIdValid ? (
                                                    <>
                                                        <Link href={`/veiculo/alterar/${veiculo.id}`}><button className="px-2 py-1 text-xs sm:px-3 sm:py-1 sm:text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">Editar</button></Link>
                                                        <button onClick={() => navigateToDelete(veiculo.id)} className="px-2 py-1 text-xs sm:px-3 sm:py-1 sm:text-sm bg-red-600 hover:bg-red-700 text-white rounded">Deletar</button>
                                                    </>
                                                ) : (
                                                    <span className="text-xs text-red-400">ID Inválido</span>
                                                )}
                                            </td>
                                        </tr>
                                    );
                                })
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
        </>
    );
}

// --- Arquivo: components\nav-bar.tsx
// --- Componente: NavBar
// src/components/nav-bar.tsx
"use client";

import Link from 'next/link';
import { useState } from 'react';
// Importar ícones do react-icons
import {
    MdHome,
    MdPeople,
    MdDirectionsCar,
    MdBuild,
    MdSchedule,
    MdBarChart,
    MdPayment,
    MdContactMail
} from 'react-icons/md';

interface NavBarProps {
    active:
        | "inicio"
        | "clientes"
        | "cadastrar"
        | "oficinaOnline"
        | "agendamento"
        | "veiculo"
        | "veiculo-listar"
        | "veiculo-cadastrar"
        | "veiculo-buscar"
        | "veiculo-alterar"
        | "veiculo-deletar"
        | "relatorio"
        | "pagamento"
        | "contato"
        | "relatorio-agendamentos-futuros"
        | "relatorio-contagem-mensal"
        | "relatorio-historico-cliente"
        | "relatorio-servicos-agendados";
}

type OpenMenuType = null | 'clientes' | 'veiculo' | 'oficina' | 'agendamento' | 'relatorio';

export default function NavBar({ active }: NavBarProps) {
    const baseLinkClass = "flex items-center px-1 pb-1 transition-colors duration-200 ease-in-out";
    const activeLinkClass = "text-sky-100 font-semibold";
    const inactiveLinkClass = "hover:text-sky-200";

    const [openMenu, setOpenMenu] = useState<OpenMenuType>(null);

    const toggleMenu = (menu: OpenMenuType) => {
        setOpenMenu(current => (current === menu ? null : menu));
    };

    const getItemClass = (section: string): string => {
        if ((section === "inicio" && active === "inicio") ||
            (section === "pagamento" && active === "pagamento") ||
            (section === "contato" && active === "contato")) {
            return `${baseLinkClass} ${activeLinkClass}`;
        } else if (section !== "inicio" && section !== "pagamento" && section !== "contato" && active.startsWith(section)) {
            return `${baseLinkClass} ${activeLinkClass}`;
        } else {
            return `${baseLinkClass} ${inactiveLinkClass}`;
        }
    };

    return (
        <nav className="flex justify-between items-center p-4 md:p-6 bg-gradient-to-r from-[#075985] to-[#012A46] text-white shadow-md relative z-50">
            {/* Logo/Título */}
            <Link href="/inicio">
                <h1 className="flex items-center text-xl md:text-2xl font-bold cursor-pointer hover:text-sky-200 transition-colors">
                    <MdBuild className="inline-block mr-2 text-2xl" />
                    Oficina On-line
                </h1>
            </Link>

            <ul className="flex flex-wrap gap-3 md:gap-5 text-sm md:text-base items-center">
                {/* Início */}
                <li>
                    <Link href="/inicio" className={getItemClass("inicio")}>
                        <MdHome className="inline-block mr-1" /> Início
                    </Link>
                </li>

                {/* Clientes */}
                <li className="relative">
                    <button
                        type="button"
                        onClick={() => toggleMenu('clientes')}
                        className={`${getItemClass("clientes")} cursor-pointer`}
                    >
                        <MdPeople className="inline-block mr-1" /> Clientes
                    </button>
                    {openMenu === 'clientes' && (
                        <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down">
                            <li><Link href="/clientes/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Listar Clientes</Link></li>
                            <li><Link href="/clientes/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Cadastrar Cliente</Link></li>
                            <li><Link href="/clientes/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Buscar Cliente</Link></li>
                        </ul>
                    )}
                </li>

                {/* Veículo */}
                <li className="relative">
                    <button
                        type="button"
                        onClick={() => toggleMenu('veiculo')}
                        className={`${getItemClass("veiculo")} cursor-pointer`}
                    >
                        <MdDirectionsCar className="inline-block mr-1" /> Veículo
                    </button>
                    {openMenu === 'veiculo' && (
                        <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down">
                            <li><Link href="/veiculo/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Listar Veículos</Link></li>
                            <li><Link href="/veiculo/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Cadastrar Veículo</Link></li>
                            <li><Link href="/veiculo/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Buscar Veículo</Link></li>
                        </ul>
                    )}
                </li>

                {/* Oficina Online */}
                <li className="relative">
                    <button
                        type="button"
                        onClick={() => toggleMenu('oficina')}
                        className={`${getItemClass("oficinaOnline")} cursor-pointer`}
                    >
                        <MdBuild className="inline-block mr-1" /> Oficina On-line
                    </button>
                    {openMenu === 'oficina' && (
                        <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down">
                            <li><Link href="/oficinaOnline/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Listar Registros</Link></li>
                            <li><Link href="/oficinaOnline/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Novo Diagnóstico</Link></li>
                            <li><Link href="/oficinaOnline/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Buscar Registro</Link></li>
                        </ul>
                    )}
                </li>

                {/* Agendamento */}
                <li className="relative">
                    <button
                        type="button"
                        onClick={() => toggleMenu('agendamento')}
                        className={`${getItemClass("agendamento")} cursor-pointer`}
                    >
                        <MdSchedule className="inline-block mr-1" /> Agendamento
                    </button>
                    {openMenu === 'agendamento' && (
                        <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down">
                            <li><Link href="/agendamento/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Listar Agendamentos</Link></li>
                            <li><Link href="/agendamento/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Novo Agendamento</Link></li>
                            <li><Link href="/agendamento/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Buscar Agendamento</Link></li>
                        </ul>
                    )}
                </li>

                {/* Relatório */}
                <li className="relative">
                    <button
                        type="button"
                        onClick={() => toggleMenu('relatorio')}
                        className={`${getItemClass("relatorio")} cursor-pointer`}
                    >
                        <MdBarChart className="inline-block mr-1" /> Relatório
                    </button>
                    {openMenu === 'relatorio' && (
                        <ul className="absolute left-0 mt-2 w-56 bg-slate-700 rounded-md shadow-lg py-1 animate-fade-in-down">
                            <li><Link href="/relatorio/agendamentos-futuros" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Agendamentos Futuros</Link></li>
                            <li><Link href="/relatorio/contagem-mensal" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Contagem Mensal</Link></li>
                            <li><Link href="/relatorio/historico-cliente" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Histórico por Cliente</Link></li>
                            <li><Link href="/relatorio/servicos-agendados" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors">Serviços Agendados</Link></li>
                        </ul>
                    )}
                </li>

                {/* Pagamento */}
                <li>
                    <Link href="/pagamento" className={getItemClass("pagamento")}>
                        <MdPayment className="inline-block mr-1" /> Pagamento
                    </Link>
                </li>

                {/* Contato */}
                <li>
                    <Link href="/contato" className={getItemClass("contato")}>
                        <MdContactMail className="inline-block mr-1" /> Contato
                    </Link>
                </li>
            </ul>

            {/* Avatar */}
            <img
                className="w-10 h-10 md:w-12 md:h-12 rounded-full border-2 border-sky-200"
                src="https://avatars.githubusercontent.com/u/4350623?v=4"
                alt="Avatar do usuário"
            />

            {/* Animação fade-in-down */}
            <style jsx>{`
                @keyframes fade-in-down {
                    from { opacity: 0; transform: translateY(-10px); }
                    to   { opacity: 1; transform: translateY(0); }
                }
                .animate-fade-in-down { animation: fade-in-down 0.2s ease-out forwards; }
            `}</style>
        </nav>
    );
}


