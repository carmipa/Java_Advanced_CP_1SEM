// Script: converte-classes-java-em-txt-unico (v3)
// Data de criação do arquivo de saída: 2025-05-08 15:36:01

// Estrutura de diretórios do projeto:
main/
    java/
        br/
            com/
                fiap/
                    mattu/
                        model/
                            box/
                            cliente/
                            filial/
                            patio/
                            rastreamento/
                            relacionamento/
                            veiculo/
                            zona/
    resources/
        static/
        templates/

// Arquivos encontrados (FQN => caminho relativo):
// br.com.fiap.mattu.MottuApplication => java\br\com\fiap\mattu\MottuApplication.java
// br.com.fiap.mattu.model.box.Box => java\br\com\fiap\mattu\model\box\Box.java
// br.com.fiap.mattu.model.cliente.Cliente => java\br\com\fiap\mattu\model\cliente\Cliente.java
// br.com.fiap.mattu.model.cliente.ClienteId => java\br\com\fiap\mattu\model\cliente\ClienteId.java
// br.com.fiap.mattu.model.cliente.ContatoCliente => java\br\com\fiap\mattu\model\cliente\ContatoCliente.java
// br.com.fiap.mattu.model.cliente.EnderecoCliente => java\br\com\fiap\mattu\model\cliente\EnderecoCliente.java
// br.com.fiap.mattu.model.filial.ContatoFilial => java\br\com\fiap\mattu\model\filial\ContatoFilial.java
// br.com.fiap.mattu.model.filial.EnderecoFilial => java\br\com\fiap\mattu\model\filial\EnderecoFilial.java
// br.com.fiap.mattu.model.filial.Filial => java\br\com\fiap\mattu\model\filial\Filial.java
// br.com.fiap.mattu.model.filial.FilialId => java\br\com\fiap\mattu\model\filial\FilialId.java
// br.com.fiap.mattu.model.patio.ContatoPatio => java\br\com\fiap\mattu\model\patio\ContatoPatio.java
// br.com.fiap.mattu.model.patio.EnderecoPatio => java\br\com\fiap\mattu\model\patio\EnderecoPatio.java
// br.com.fiap.mattu.model.patio.Patio => java\br\com\fiap\mattu\model\patio\Patio.java
// br.com.fiap.mattu.model.patio.PatioId => java\br\com\fiap\mattu\model\patio\PatioId.java
// br.com.fiap.mattu.model.rastreamento.Rastreamento => java\br\com\fiap\mattu\model\rastreamento\Rastreamento.java
// br.com.fiap.mattu.model.relacionamento.Cv => java\br\com\fiap\mattu\model\relacionamento\Cv.java
// br.com.fiap.mattu.model.relacionamento.CvId => java\br\com\fiap\mattu\model\relacionamento\CvId.java
// br.com.fiap.mattu.model.relacionamento.Fp => java\br\com\fiap\mattu\model\relacionamento\Fp.java
// br.com.fiap.mattu.model.relacionamento.FpId => java\br\com\fiap\mattu\model\relacionamento\FpId.java
// br.com.fiap.mattu.model.relacionamento.Fv => java\br\com\fiap\mattu\model\relacionamento\Fv.java
// br.com.fiap.mattu.model.relacionamento.FvId => java\br\com\fiap\mattu\model\relacionamento\FvId.java
// br.com.fiap.mattu.model.relacionamento.Vb => java\br\com\fiap\mattu\model\relacionamento\Vb.java
// br.com.fiap.mattu.model.relacionamento.VbId => java\br\com\fiap\mattu\model\relacionamento\VbId.java
// br.com.fiap.mattu.model.relacionamento.Vp => java\br\com\fiap\mattu\model\relacionamento\Vp.java
// br.com.fiap.mattu.model.relacionamento.VpId => java\br\com\fiap\mattu\model\relacionamento\VpId.java
// br.com.fiap.mattu.model.relacionamento.Vr => java\br\com\fiap\mattu\model\relacionamento\Vr.java
// br.com.fiap.mattu.model.relacionamento.VrId => java\br\com\fiap\mattu\model\relacionamento\VrId.java
// br.com.fiap.mattu.model.relacionamento.Vz => java\br\com\fiap\mattu\model\relacionamento\Vz.java
// br.com.fiap.mattu.model.relacionamento.VzId => java\br\com\fiap\mattu\model\relacionamento\VzId.java
// br.com.fiap.mattu.model.relacionamento.Zb => java\br\com\fiap\mattu\model\relacionamento\Zb.java
// br.com.fiap.mattu.model.relacionamento.ZbId => java\br\com\fiap\mattu\model\relacionamento\ZbId.java
// br.com.fiap.mattu.model.relacionamento.Zp => java\br\com\fiap\mattu\model\relacionamento\Zp.java
// br.com.fiap.mattu.model.relacionamento.ZpId => java\br\com\fiap\mattu\model\relacionamento\ZpId.java
// br.com.fiap.mattu.model.veiculo.Veiculo => java\br\com\fiap\mattu\model\veiculo\Veiculo.java
// br.com.fiap.mattu.model.zona.Zona => java\br\com\fiap\mattu\model\zona\Zona.java

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\MottuApplication.java   |   package br.com.fiap.mattu   |   class MottuApplication
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Info;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.web.client.RestTemplate; // <-- Importar RestTemplate



@EnableJpaRepositories
@SpringBootApplication
@EnableCaching
@OpenAPIDefinition(info = @Info(title="CHALLENGE-2025-FIAP-TEMMU-METAMIND SOLUTIONS-1.0", description = "CHALLENGE FIAP 2025", version = "v1"))
public class MottuApplication {

	public static void main(String[] args) {
		SpringApplication.run(MottuApplication.class, args);
	}

	@Bean
	public RestTemplate restTemplate(){
		return new RestTemplate();
	}

}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\box\Box.java   |   package br.com.fiap.mattu.model.box   |   class Box
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.box;

import br.com.fiap.mattu.model.zona.Zona;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Table(name = "TB_BOX")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Box {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_BOX")
    private long idBox;

    @Column(name = "NOME", nullable = false, length = 100)
    private String nome;

    @Column(name = "STATUS", nullable = false)
    private boolean status;

    @Column(name = "DATA_ENTRADA")
    private LocalDateTime dataEntrada;

    @Column(name = "DATA_SAIDA")
    private LocalDateTime dataSaida;

    @Column(name = "OBSERVACAO", length = 500)
    private String observacao;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TB_ZONA_ID_ZONA", nullable = false)
    private Zona zona;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\cliente\Cliente.java   |   package br.com.fiap.mattu.model.cliente   |   class Cliente
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.cliente;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate; // Usando java.time consistentemente

@Entity
@Table(name = "TB_CLI")
@Getter // Preferir @Getter/@Setter em vez de @Data para entidades JPA
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id") // Basear equals/hashCode na chave composta
@Builder
public class Cliente {

    // Chave Primária Composta - usa a classe ClienteId
    @EmbeddedId
    private ClienteId id;

    // Relacionamento mapeado para a parte 'enderecoClienteId' do EmbeddedId
    @ManyToOne(fetch = FetchType.LAZY) // Usar ManyToOne e LAZY
    @MapsId("enderecoClienteId") // Vincula ao atributo 'enderecoClienteId' em ClienteId
    @JoinColumn(
            name = "tb_end_c_id_endc", // Coluna FK em TB_CLI
            referencedColumnName = "id_endc", // Coluna PK em TB_END_C (assumindo que é 'id_endc')
            insertable = false, updatable = false // Obrigatório com @MapsId
    )
    private EnderecoCliente enderecoCliente;

    // Relacionamento mapeado para a parte 'contatoClienteId' do EmbeddedId
    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("contatoClienteId") // Vincula ao atributo 'contatoClienteId' em ClienteId
    @JoinColumn(
            name = "tb_cont_c_id_contc", // Coluna FK em TB_CLI
            referencedColumnName = "id_contc", // Coluna PK em TB_CONT_C (assumindo que é 'id_contc')
            insertable = false, updatable = false // Obrigatório com @MapsId
    )
    private ContatoCliente contatoCliente;

    // --- Outros campos da tabela ---

    // O campo 'id_cli' já está mapeado DENTRO do ClienteId

    // Os campos 'tb_end_c_id_endc' e 'tb_cont_c_id_contc' também estão no ClienteId
    // e são preenchidos/gerenciados através dos relacionamentos com @MapsId.
    // Não precisamos mais dos atributos 'enderecoId' e 'contatoId'.

    @Column(name = "DATA_CADASTRO", nullable = false, updatable = false)
    @Temporal(TemporalType.DATE) // Mapeando para DATE
    private LocalDate dataCadastro; // Usando LocalDate

    // 🔹 Método automático para definir a data de cadastro ao criar um objeto
    @PrePersist
    protected void onCreate() {
        this.dataCadastro = LocalDate.now();
    }

    @Column(name = "SEXO", length = 1, nullable = false)
    private String sexo; // CHAR(1) pode ser mapeado como String

    @Column(name = "NOME", length = 50, nullable = false)
    private String nome;

    @Column(name = "SOBRENOME", length = 50, nullable = false)
    private String sobrenome;

    @Column(name = "DATA_NASCIMENTO", nullable = false)
    @Temporal(TemporalType.DATE)
    private LocalDate dataNascimento; // Usando LocalDate

    @Column(name = "CPF", length = 11, nullable = false, unique = true)
    private String cpf;

    @Column(name = "PROFISSAO", length = 50) // Corrigido para 'profisao' conforme DDL
    private String profissao;

    @Column(name = "ESTADO_CIVIL", length = 50)
    private String estadoCivil;

    @Column(name = "STATUS", length = 1, nullable = false)
    private String status; // CHAR(1) pode ser mapeado como String

    // Construtor (opcional, dependendo do uso de Lombok @Builder/@AllArgsConstructor)
    public Cliente(ClienteId id, LocalDate dataCadastro, String sexo, String nome, String sobrenome, LocalDate dataNascimento, String cpf, String profissao, String estadoCivil, String status, EnderecoCliente enderecoCliente, ContatoCliente contatoCliente) {
        this.id = id;
        this.dataCadastro = dataCadastro;
        this.sexo = sexo;
        this.nome = nome;
        this.sobrenome = sobrenome;
        this.dataNascimento = dataNascimento;
        this.cpf = cpf;
        this.profissao = profissao;
        this.estadoCivil = estadoCivil;
        this.status = status;
        this.enderecoCliente = enderecoCliente;
        this.contatoCliente = contatoCliente;
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\cliente\ClienteId.java   |   package br.com.fiap.mattu.model.cliente   |   class ClienteId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.cliente;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable // Indica que esta classe pode ser embutida em uma entidade
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode // Essencial para chaves compostas
public class ClienteId implements Serializable {
    // Serializable é uma boa prática para IDs
    private static final long serialVersionUID = 1L;

    @Column(name = "id_cli", nullable = false) // Mapeia a coluna id_cli da PK composta
    private Long idCli;

    @Column(name = "tb_end_c_id_endc", nullable = false) // Mapeia a coluna tb_end_c_id_endc da PK composta (FK para EnderecoCliente)
    private Long enderecoClienteId; // Armazena o ID do EnderecoCliente relacionado

    @Column(name = "tb_cont_c_id_contc", nullable = false) // Mapeia a coluna tb_cont_c_id_contc da PK composta (FK para ContatoCliente)
    private Long contatoClienteId; // Armazena o ID do ContatoCliente relacionado
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\cliente\ContatoCliente.java   |   package br.com.fiap.mattu.model.cliente   |   class ContatoCliente
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.cliente;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "TB_CONT_C")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContatoCliente {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_CONTC")
    private Long idContato;

    @Column(name = "EMAIL", length = 100, nullable = false, unique = true)
    private String email;

    @Column(name = "TELEFONE", length = 20)
    private String telefone;

    @Column(name = "CELULAR", length = 20, nullable = false)
    private String celular;

    @Column(name = "OUTRO", length = 100)
    private String outro;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\cliente\EnderecoCliente.java   |   package br.com.fiap.mattu.model.cliente   |   class EnderecoCliente
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.cliente;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "TB_END_C")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoCliente {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_ENDC")
    private Long idEndereco;

    @Column(name = "CEP", length = 9, nullable = false)
    private String cep;

    @Column(name = "NUMERO", nullable = false)
    private Integer numero;

    @Column(name = "LOGRADOURO", length = 50, nullable = false)
    private String logradouro;

    @Column(name = "BAIRRO", length = 50, nullable = false)
    private String bairro;

    @Column(name = "CIDADE", length = 50, nullable = false)
    private String cidade;

    @Column(name = "ESTADO", length = 2, nullable = false)
    private String estado;

    @Column(name = "PAIS", length = 20, nullable = false)
    private String pais;

    @Column(name = "COMPLEMENTO", length = 60)
    private String complemento;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\filial\ContatoFilial.java   |   package br.com.fiap.mattu.model.filial   |   class ContatoFilial
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.filial;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "TB_CONTATO_FILIAL")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContatoFilial {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_CONTATO_FILIAL")
    private long idContatoFilial;

    @Column(name = "EMAIL", nullable = false, length = 100)
    private String email;

    @Column(name = "TELEFONE1", length = 20)
    private String telefone1;

    @Column(name = "TELEFONE2", length = 20)
    private String telefone2;

    @Column(name = "OUTRO", length = 100)
    private String outro;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\filial\EnderecoFilial.java   |   package br.com.fiap.mattu.model.filial   |   class EnderecoFilial
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.filial;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "TB_ENDERECO_FILIAL")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoFilial {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_ENDERECO_FILIAL")
    private long idEnderecoFilial;

    @Column(name = "CEP", nullable = false, length = 9)
    private String cep;

    @Column(name = "NUMERO", nullable = false)
    private int numero;

    @Column(name = "LOGRADOURO", nullable = false, length = 100)
    private String logradouro;

    @Column(name = "BAIRRO", nullable = false, length = 60)
    private String bairro;

    @Column(name = "CIDADE", nullable = false, length = 60)
    private String cidade;

    @Column(name = "ESTADO", nullable = false, length = 2)
    private String estado;

    @Column(name = "PAIS", nullable = false, length = 60)
    private String pais;

    @Column(name = "COMPLEMENTO", length = 100)
    private String complemento;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\filial\Filial.java   |   package br.com.fiap.mattu.model.filial   |   class Filial
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.filial;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Table(name = "TB_FILIAL")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
@Builder
public class Filial {

    @EmbeddedId
    private FilialId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("enderecoFilialId")
    @JoinColumn(
            name = "tb_end_f_id_endf",
            // CORREÇÃO: referencedColumnName deve bater com a PK de EnderecoFilial
            referencedColumnName = "ID_ENDERECO_FILIAL", // <-- CORRIGIDO de "id_endf"
            insertable = false, updatable = false
    )
    private EnderecoFilial enderecoFilial;

    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL, optional = false)
    @JoinColumn(
            name = "tb_cont_f_id_contf",
            // CORREÇÃO: referencedColumnName deve bater com a PK de ContatoFilial
            referencedColumnName = "ID_CONTATO_FILIAL", // <-- CORRIGIDO de "id_contf"
            nullable = false // Adicionado pois optional=false e a FK no DDL é NOT NULL
    )
    private ContatoFilial contatoFilial;

    @Column(name = "NOME", nullable = false, unique = true, length = 50)
    private String nome;

    @Column(name = "STATUS", nullable = false, length = 1)
    private String status;

    @Column(name = "DATA_ENTRADA", nullable = false)
    @Temporal(TemporalType.DATE)
    private LocalDate dataEntrada;

    @Column(name = "DATA_SAIDA")
    @Temporal(TemporalType.DATE)
    private LocalDate dataSaida;

    @Column(name = "OBSERVACAO", length = 100)
    private String observacao;

    // Construtor Opcional (mantido como estava)
    public Filial(FilialId id, String nome, String status, LocalDate dataEntrada, LocalDate dataSaida, String observacao, EnderecoFilial enderecoFilial, ContatoFilial contatoFilial) {
        this.id = id;
        this.nome = nome;
        this.status = status;
        this.dataEntrada = dataEntrada;
        this.dataSaida = dataSaida;
        this.observacao = observacao;
        this.enderecoFilial = enderecoFilial;
        this.contatoFilial = contatoFilial;
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\filial\FilialId.java   |   package br.com.fiap.mattu.model.filial   |   class FilialId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.filial;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class FilialId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_fil", nullable = false) // Coluna id_fil da PK composta
    private Long idFil;

    @Column(name = "tb_end_f_id_endf", nullable = false) // Coluna tb_end_f_id_endf da PK composta (FK para EnderecoFilial)
    private Long enderecoFilialId; // Armazena o ID do EnderecoFilial
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\patio\ContatoPatio.java   |   package br.com.fiap.mattu.model.patio   |   class ContatoPatio
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.patio;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "TB_CONTATO_PATIO")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContatoPatio {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_CONTATO_PATIO")
    private long idContatoPatio;

    @Column(name = "EMAIL", length = 100)
    private String email;

    @Column(name = "TELEFONE1", length = 15)
    private String telefone1;

    @Column(name = "TELEFONE2", length = 15)
    private String telefone2;

    @Column(name = "OUTRO", length = 15)
    private String outro;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\patio\EnderecoPatio.java   |   package br.com.fiap.mattu.model.patio   |   class EnderecoPatio
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.patio;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "TB_ENDERECO_PATIO")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoPatio {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_ENDERECO_PATIO")
    private long idEnderecoPatio;

    @Column(name = "CEP", nullable = false, length = 9)
    private String cep;

    @Column(name = "NUMERO", nullable = false)
    private int numero;

    @Column(name = "LOGRADOURO", nullable = false, length = 100)
    private String logradouro;

    @Column(name = "BAIRRO", nullable = false, length = 60)
    private String bairro;

    @Column(name = "CIDADE", nullable = false, length = 60)
    private String cidade;

    @Column(name = "ESTADO", nullable = false, length = 2)
    private String estado;

    @Column(name = "PAIS", nullable = false, length = 60)
    private String pais;

    @Column(name = "COMPLEMENTO", length = 100)
    private String complemento;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\patio\Patio.java   |   package br.com.fiap.mattu.model.patio   |   class Patio
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.patio;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Table(name = "TB_PATIO")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
@Builder
public class Patio {

    @EmbeddedId
    private PatioId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("contatoPatioId")
    @JoinColumn(
            name = "tb_cont_p_id_contp",
            // CORREÇÃO: referencedColumnName deve bater com a PK de ContatoPatio
            referencedColumnName = "ID_CONTATO_PATIO", // <-- CORRIGIDO de "id_contp"
            insertable = false, updatable = false
    )
    private ContatoPatio contatoPatio;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("enderecoPatioId")
    @JoinColumn(
            name = "tb_end_p_id_endp",
            // CORREÇÃO: referencedColumnName deve bater com a PK de EnderecoPatio
            referencedColumnName = "ID_ENDERECO_PATIO", // <-- CORRIGIDO de "id_endp"
            insertable = false, updatable = false
    )
    private EnderecoPatio enderecoPatio;

    @Column(name = "NOME_PATIO", nullable = false, unique = true, length = 50)
    private String nomePatio;

    // 'status' está no PatioId
    // 'id_patio' está no PatioId

    @Column(name = "DATA_ENTRADA", nullable = false)
    @Temporal(TemporalType.DATE)
    private LocalDate dataEntrada;

    @Column(name = "DATA_SAIDA")
    @Temporal(TemporalType.DATE)
    private LocalDate dataSaida;

    @Column(name = "OBSERVACAO", length = 100)
    private String observacao;

    // Construtor Opcional (mantido como estava)
    public Patio(PatioId id, String nomePatio, LocalDate dataEntrada, LocalDate dataSaida, String observacao, ContatoPatio contatoPatio, EnderecoPatio enderecoPatio) {
        this.id = id;
        this.nomePatio = nomePatio;
        this.dataEntrada = dataEntrada;
        this.dataSaida = dataSaida;
        this.observacao = observacao;
        this.contatoPatio = contatoPatio;
        this.enderecoPatio = enderecoPatio;
    }
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\patio\PatioId.java   |   package br.com.fiap.mattu.model.patio   |   class PatioId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.patio; // Ou onde preferir colocar as classes Id

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode // Lombok gera equals/hashCode baseado nos campos
public class PatioId implements Serializable {
    private static final long serialVersionUID = 1L; // Boa prática para Serializable

    @Column(name = "id_patio")
    private Long idPatio;

    @Column(name = "tb_cont_p_id_contp") // Coluna FK que faz parte da PK composta
    private Long contatoPatioId; // Referencia o ID de ContatoPatio

    @Column(name = "status", length = 1) // Coluna status que faz parte da PK composta
    private String status; // Mapeado para String (CHAR(1) no DB)

    @Column(name = "tb_end_p_id_endp") // Coluna FK que faz parte da PK composta
    private Long enderecoPatioId; // Referencia o ID de EnderecoPatio
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\rastreamento\Rastreamento.java   |   package br.com.fiap.mattu.model.rastreamento   |   class Rastreamento
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.rastreamento;

import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

@Entity
@Table(name = "TB_RASTREAMENTO")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Rastreamento {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_RASTREAMENTO")
    private long idRastreamento;

    @Column(name = "STATUS")
    private boolean status;

    @Column(name = "IPS_X", precision = 7, scale = 3)
    private BigDecimal ipsX;

    @Column(name = "IPS_Y", precision = 7, scale = 3)
    private BigDecimal ipsY;

    @Column(name = "IPS_Z", precision = 7, scale = 3)
    private BigDecimal ipsZ;

    @Column(name = "DATA_HORA")
    private OffsetDateTime dataHora;

    @Column(name = "GPRS_LATITUDE", precision = 10, scale = 6)
    private BigDecimal gprslatitude;

    @Column(name = "GPRS_LONGITUDE", precision = 10, scale = 6)
    private BigDecimal gprsLongitude;

    @Column(name = "GPRS_ALTITUDE", precision = 7, scale = 3)
    private BigDecimal gprsAltitude;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Cv.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Cv
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.cliente.Cliente; // Ajuste o import se necessário
import br.com.fiap.mattu.model.veiculo.Veiculo; // Ajuste o import se necessário
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_cv")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id") // Baseado no ID embutido
public class Cv {

    @EmbeddedId
    private CvId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("clienteIdCli") // Mapeia a PARTE 'clienteIdCli' do CvId para a entidade Cliente
    @JoinColumns({
            @JoinColumn(name = "tb_cli_id_cli", referencedColumnName = "id_cli", insertable = false, updatable = false),
            @JoinColumn(name = "tb_cli_tb_end_c_id_endc", referencedColumnName = "tb_end_c_id_endc", insertable = false, updatable = false),
            @JoinColumn(name = "tb_cli_tb_cont_c_id_contc", referencedColumnName = "tb_cont_c_id_contc", insertable = false, updatable = false)
    })
    private Cliente cliente;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("veiculoId") // Mapeia a PARTE 'veiculoId' do CvId para a entidade Veiculo
    @JoinColumn(name = "tb_veiculo_id_veiculo", referencedColumnName = "id_veiculo", insertable = false, updatable = false)
    private Veiculo veiculo;

    // Adicionar outros campos se a tabela tb_cv tiver colunas além das chaves
    // Ex: @Column(name="data_locacao") private LocalDate dataLocacao;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\CvId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class CvId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class CvId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_cv")
    private Long idCv;

    // Parte da FK Composta para Cliente
    @Column(name = "tb_cli_id_cli")
    private Long clienteIdCli;

    @Column(name = "tb_cli_tb_end_c_id_endc")
    private Long clienteEnderecoClienteId;

    @Column(name = "tb_cli_tb_cont_c_id_contc")
    private Long clienteContatoClienteId;

    // FK Simples para Veiculo
    @Column(name = "tb_veiculo_id_veiculo")
    private Long veiculoId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Fp.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Fp
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.filial.Filial; // Ajuste o import
import br.com.fiap.mattu.model.patio.Patio;   // Ajuste o import
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_fp")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Fp {

    @EmbeddedId
    private FpId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("filialIdFil") // Mapeia a PARTE 'filialIdFil' do FpId
    @JoinColumns({
            @JoinColumn(name = "tb_filial_id_fil", referencedColumnName = "id_fil", insertable = false, updatable = false),
            @JoinColumn(name = "tb_filial_tb_end_f_id_endf", referencedColumnName = "tb_end_f_id_endf", insertable = false, updatable = false)
    })
    private Filial filial;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("patioIdPatio") // Mapeia a PARTE 'patioIdPatio' do FpId
    @JoinColumns({
            @JoinColumn(name = "tb_patio_id_patio", referencedColumnName = "id_patio", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_id_contp", referencedColumnName = "tb_cont_p_id_contp", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_status", referencedColumnName = "status", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_id_endp", referencedColumnName = "tb_end_p_id_endp", insertable = false, updatable = false)
    })
    private Patio patio;

    // Outros campos se houver...
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\FpId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class FpId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class FpId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_fp")
    private Long idFp;

    // Parte da FK Composta para Filial
    @Column(name = "tb_filial_id_fil")
    private Long filialIdFil;

    @Column(name = "tb_filial_tb_end_f_id_endf")
    private Long filialEnderecoFilialId;

    // Parte da FK Composta para Patio
    @Column(name = "tb_patio_id_patio")
    private Long patioIdPatio;

    @Column(name = "tb_patio_id_contp")
    private Long patioContatoPatioId;

    @Column(name = "tb_patio_status", length = 1)
    private String patioStatus;

    @Column(name = "tb_patio_id_endp")
    private Long patioEnderecoPatioId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Fv.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Fv
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.filial.Filial; // Ajuste o import
import br.com.fiap.mattu.model.veiculo.Veiculo; // Ajuste o import
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_fv")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Fv {

    @EmbeddedId
    private FvId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("filialIdFil") // Mapeia a PARTE 'filialIdFil' do FvId
    @JoinColumns({
            @JoinColumn(name = "tb_filial_id_fil", referencedColumnName = "id_fil", insertable = false, updatable = false),
            @JoinColumn(name = "tb_filial_tb_end_f_id_endf", referencedColumnName = "tb_end_f_id_endf", insertable = false, updatable = false)
    })
    private Filial filial;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("veiculoId") // Mapeia a PARTE 'veiculoId' do FvId
    @JoinColumn(name = "tb_veiculo_id_veiculo", referencedColumnName = "id_veiculo", insertable = false, updatable = false)
    private Veiculo veiculo;

    // Outros campos se houver...
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\FvId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class FvId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class FvId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_fv")
    private Long idFv;

    // Parte da FK Composta para Filial
    @Column(name = "tb_filial_id_fil")
    private Long filialIdFil;

    @Column(name = "tb_filial_tb_end_f_id_endf")
    private Long filialEnderecoFilialId;

    // FK Simples para Veiculo
    @Column(name = "tb_veiculo_id_veiculo")
    private Long veiculoId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Vb.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Vb
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.box.Box;         // Ajuste o import
import br.com.fiap.mattu.model.veiculo.Veiculo; // Ajuste o import
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_vb")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Vb {

    @EmbeddedId
    private VbId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("veiculoId") // Mapeia a PARTE 'veiculoId' do VbId
    @JoinColumn(name = "tb_veiculo_id_veiculo", referencedColumnName = "id_veiculo", insertable = false, updatable = false)
    private Veiculo veiculo;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("boxId") // Mapeia a PARTE 'boxId' do VbId
    @JoinColumn(name = "tb_box_id_box", referencedColumnName = "id_box", insertable = false, updatable = false)
    private Box box;

    // Outros campos se houver...
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\VbId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class VbId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class VbId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_vb")
    private Long idVb;

    @Column(name = "tb_veiculo_id_veiculo") // FK Simples para Veiculo
    private Long veiculoId;

    @Column(name = "tb_box_id_box") // FK Simples para Box
    private Long boxId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Vp.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Vp
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.patio.Patio;   // Ajuste o import
import br.com.fiap.mattu.model.veiculo.Veiculo; // Ajuste o import
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_vp")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Vp {

    @EmbeddedId
    private VpId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("veiculoId") // Mapeia a PARTE 'veiculoId' do VpId
    @JoinColumn(name = "tb_veiculo_id_veiculo", referencedColumnName = "id_veiculo", insertable = false, updatable = false)
    private Veiculo veiculo;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("patioIdPatio") // Mapeia a PARTE 'patioIdPatio' do VpId
    @JoinColumns({
            @JoinColumn(name = "tb_patio_id_patio", referencedColumnName = "id_patio", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_tb_cont_p_id_contp", referencedColumnName = "tb_cont_p_id_contp", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_status", referencedColumnName = "status", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_tb_end_p_id_endp", referencedColumnName = "tb_end_p_id_endp", insertable = false, updatable = false)
    })
    private Patio patio;

    // Outros campos se houver...
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\VpId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class VpId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class VpId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_vp")
    private Long idVp;

    @Column(name = "tb_veiculo_id_veiculo") // FK Simples para Veiculo
    private Long veiculoId;

    // Parte da FK Composta para Patio
    @Column(name = "tb_patio_id_patio")
    private Long patioIdPatio;

    @Column(name = "tb_patio_tb_cont_p_id_contp")
    private Long patioContatoPatioId;

    @Column(name = "tb_patio_status", length = 1)
    private String patioStatus;

    @Column(name = "tb_patio_tb_end_p_id_endp")
    private Long patioEnderecoPatioId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Vr.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Vr
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.rastreamento.Rastreamento;
import br.com.fiap.mattu.model.veiculo.Veiculo;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_vr")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Vr {

    @EmbeddedId
    private VrId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("veiculoId")
    @JoinColumn(name = "tb_veiculo_id_veiculo", referencedColumnName = "ID_VEICULO", insertable = false, updatable = false) // <-- CORRIGIDO referencedColumnName (assumindo PK de Veiculo é ID_VEICULO)
    private Veiculo veiculo;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("rastreamentoId")
    @JoinColumn(
            name = "tb_rastreamento_id_rast",
            // CORREÇÃO: referencedColumnName deve bater com a PK de Rastreamento
            referencedColumnName = "ID_RASTREAMENTO", // <-- CORRIGIDO de "id_rast"
            insertable = false, updatable = false
    )
    private Rastreamento rastreamento;

    // Outros campos se houver...
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\VrId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class VrId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class VrId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_vr")
    private Long idVr;

    @Column(name = "tb_veiculo_id_veiculo") // FK Simples para Veiculo
    private Long veiculoId;

    @Column(name = "tb_rastreamento_id_rast") // FK Simples para Rastreamento
    private Long rastreamentoId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Vz.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Vz
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.veiculo.Veiculo; // Ajuste o import
import br.com.fiap.mattu.model.zona.Zona;       // Ajuste o import
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_vz")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Vz {

    @EmbeddedId
    private VzId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("veiculoId") // Mapeia a PARTE 'veiculoId' do VzId
    @JoinColumn(name = "tb_veiculo_id_veiculo", referencedColumnName = "id_veiculo", insertable = false, updatable = false)
    private Veiculo veiculo;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("zonaId") // Mapeia a PARTE 'zonaId' do VzId
    @JoinColumn(name = "tb_zona_id_zona", referencedColumnName = "id_zona", insertable = false, updatable = false)
    private Zona zona;

    // Outros campos se houver...
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\VzId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class VzId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class VzId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_vz")
    private Long idVz;

    @Column(name = "tb_veiculo_id_veiculo") // FK Simples para Veiculo
    private Long veiculoId;

    @Column(name = "tb_zona_id_zona") // FK Simples para Zona
    private Long zonaId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Zb.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Zb
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.box.Box;   // Ajuste o import
import br.com.fiap.mattu.model.zona.Zona; // Ajuste o import
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_zb")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Zb {

    @EmbeddedId
    private ZbId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("zonaId") // Mapeia a PARTE 'zonaId' do ZbId
    @JoinColumn(name = "tb_zona_id_zona", referencedColumnName = "id_zona", insertable = false, updatable = false)
    private Zona zona;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("boxId") // Mapeia a PARTE 'boxId' do ZbId
    @JoinColumn(name = "tb_box_id_box", referencedColumnName = "id_box", insertable = false, updatable = false)
    private Box box;

    // Outros campos se houver...
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\ZbId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class ZbId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class ZbId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_zb")
    private Long idZb;

    @Column(name = "tb_zona_id_zona") // FK Simples para Zona
    private Long zonaId;

    @Column(name = "tb_box_id_box") // FK Simples para Box
    private Long boxId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\Zp.java   |   package br.com.fiap.mattu.model.relacionamento   |   class Zp
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import br.com.fiap.mattu.model.patio.Patio; // Ajuste o import
import br.com.fiap.mattu.model.zona.Zona;   // Ajuste o import
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tb_zp")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Zp {

    @EmbeddedId
    private ZpId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("patioIdPatio") // Mapeia a PARTE 'patioIdPatio' do ZpId
    @JoinColumns({
            @JoinColumn(name = "tb_patio_id_patio", referencedColumnName = "id_patio", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_tb_cont_p_id_contp", referencedColumnName = "tb_cont_p_id_contp", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_status", referencedColumnName = "status", insertable = false, updatable = false),
            @JoinColumn(name = "tb_patio_tb_end_p_id_endp", referencedColumnName = "tb_end_p_id_endp", insertable = false, updatable = false)
    })
    private Patio patio;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("zonaId") // Mapeia a PARTE 'zonaId' do ZpId
    @JoinColumn(name = "tb_zona_id_zona", referencedColumnName = "id_zona", insertable = false, updatable = false)
    private Zona zona;

    // Outros campos se houver...
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\relacionamento\ZpId.java   |   package br.com.fiap.mattu.model.relacionamento   |   class ZpId
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.relacionamento;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

import java.io.Serializable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
public class ZpId implements Serializable {
    private static final long serialVersionUID = 1L;

    @Column(name = "id_zp")
    private Long idZp;

    // Parte da FK Composta para Patio
    @Column(name = "tb_patio_id_patio")
    private Long patioIdPatio;

    @Column(name = "tb_patio_tb_cont_p_id_contp")
    private Long patioContatoPatioId;

    @Column(name = "tb_patio_status", length = 1)
    private String patioStatus;

    @Column(name = "tb_patio_tb_end_p_id_endp")
    private Long patioEnderecoPatioId;

    // FK Simples para Zona
    @Column(name = "tb_zona_id_zona")
    private Long zonaId;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\veiculo\Veiculo.java   |   package br.com.fiap.mattu.model.veiculo   |   class Veiculo
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.veiculo;

import br.com.fiap.mattu.model.cliente.Cliente;
import br.com.fiap.mattu.model.filial.Filial;
import br.com.fiap.mattu.model.patio.Patio;
import br.com.fiap.mattu.model.zona.Zona;
import br.com.fiap.mattu.model.box.Box;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "TB_VEICULO")
@Data // Pode manter @Data ou usar @Getter/@Setter se preferir
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Veiculo {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_VEICULO")
    private long idVeiculo;

    @Column(name = "PLACA", length = 10, nullable = false, unique = true)
    private String placa;

    @Column(name = "RENAVAM", length = 20, nullable = false, unique = true)
    private String renavam;

    @Column(name = "CHASSI", length = 25, nullable = false, unique = true)
    private String chassi;

    @Column(name = "FABRICANTE", length = 50)
    private String fabricante;

    @Column(name = "MODELO", length = 50)
    private String modelo;

    @Column(name = "MOTOR", length = 30)
    private String motor;

    @Column(name = "ANO")
    private int ano;

    @Column(name = "COMBUSTIVEL", length = 20)
    private String combustivel;

    @Column(name = "STATUS")
    private boolean status;

    // --- CORREÇÕES ABAIXO ---
    // Relacionamentos com entidades de CHAVE COMPOSTA precisam de @JoinColumns

    @ManyToOne(fetch = FetchType.LAZY)
    // CORREÇÃO: Usar @JoinColumns para chave composta de Cliente
    @JoinColumns({
            // ATENÇÃO: Verifique se os nomes das colunas FK ('name=...') existem na sua tabela TB_VEICULO
            @JoinColumn(name = "TB_CLI_ID_CLI", referencedColumnName = "id_cli"), // Mapeia para id_cli em ClienteId
            @JoinColumn(name = "TB_CLI_TB_END_C_ID_ENDC", referencedColumnName = "tb_end_c_id_endc"), // Mapeia para tb_end_c_id_endc em ClienteId
            @JoinColumn(name = "TB_CLI_TB_CONT_C_ID_CONTC", referencedColumnName = "tb_cont_c_id_contc") // Mapeia para tb_cont_c_id_contc em ClienteId
    })
    private Cliente cliente;

    @ManyToOne(fetch = FetchType.LAZY)
    // CORREÇÃO: Usar @JoinColumns para chave composta de Filial
    @JoinColumns({
            // ATENÇÃO: Verifique se os nomes das colunas FK ('name=...') existem na sua tabela TB_VEICULO
            @JoinColumn(name = "TB_FILIAL_ID_FIL", referencedColumnName = "id_fil"), // Mapeia para id_fil em FilialId
            @JoinColumn(name = "TB_FILIAL_TB_END_F_ID_ENDF", referencedColumnName = "tb_end_f_id_endf") // Mapeia para tb_end_f_id_endf em FilialId
    })
    private Filial filial;

    @ManyToOne(fetch = FetchType.LAZY)
    // CORREÇÃO: Usar @JoinColumns para chave composta de Patio
    @JoinColumns({
            // ATENÇÃO: Verifique se os nomes das colunas FK ('name=...') existem na sua tabela TB_VEICULO
            @JoinColumn(name = "TB_PATIO_ID_PATIO", referencedColumnName = "id_patio"),               // Mapeia para id_patio em PatioId
            @JoinColumn(name = "TB_PATIO_TB_CONT_P_ID_CONTP", referencedColumnName = "tb_cont_p_id_contp"), // Mapeia para tb_cont_p_id_contp em PatioId
            @JoinColumn(name = "TB_PATIO_STATUS", referencedColumnName = "status"),                 // Mapeia para status em PatioId
            @JoinColumn(name = "TB_PATIO_TB_END_P_ID_ENDP", referencedColumnName = "tb_end_p_id_endp")   // Mapeia para tb_end_p_id_endp em PatioId
    })
    private Patio patio;

    // Relacionamentos com entidades de CHAVE SIMPLES podem usar @JoinColumn

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TB_ZONA_ID_ZONA", referencedColumnName = "ID_ZONA") // Assumindo PK de Zona é ID_ZONA
    private Zona zona;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TB_BOX_ID_BOX", referencedColumnName = "ID_BOX") // Assumindo PK de Box é ID_BOX
    private Box box;
}

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// java\br\com\fiap\mattu\model\zona\Zona.java   |   package br.com.fiap.mattu.model.zona   |   class Zona
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

package br.com.fiap.mattu.model.zona;

import br.com.fiap.mattu.model.box.Box;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "TB_ZONA")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Zona {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_ZONA")
    private long idZona;

    @Column(name = "NOME", nullable = false, length = 50)
    private String nome;

    @Column(name = "STATUS", nullable = false)
    private boolean status;

    @Column(name = "DATA_ENTRADA")
    private LocalDateTime dataEntrada;

    @Column(name = "DATA_SAIDA")
    private LocalDateTime dataSaida;

    @Column(name = "OBSERVACAO", length = 255)
    private String observacao;

    @OneToMany(mappedBy = "zona", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Box> boxes;
}

