
/* --- app\layout.tsx --- */
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================================================================================

/* --- app\page.tsx --- */


import NabBar from "@/components/nav-bar";

export default function Home(){
    return(
        <div>
            <NabBar active={"inicio"} />
        </div>
    )
}
================================================================================

/* --- app\agendamento\page.tsx --- */
import NavBar from "@/components/nav-bar";

export default function AgendamentoPage(){
    return(
        <>
            <NavBar active="agendamento"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Agendamento</h2>
                </div>
            </main>
        </>

    )
}
================================================================================

/* --- app\agendamento\alterar\[id]\page.tsx --- */
// app/agendamento/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';

// Interface para a resposta da API
interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string; // Vem comofirstSending-MM-DD
    observacao: string | null;
}

export default function AlterarAgendamentoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    // Estados do Formulário
    const [dataAgendamento, setDataAgendamento] = useState("");
    const [observacao, setObservacao] = useState("");

    // Estados de Controle
    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // --- useEffect para buscar dados do agendamento ---
    useEffect(() => {
        if (id) {
            setIsLoading(true); setError(null); setSuccess(null);
            const fetchAgendamentoData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/agenda/${id}`; // Endpoint GET Agenda por ID
                    const response = await fetch(apiUrl);
                    if (response.status === 404) { throw new Error("Agendamento não encontrado."); }
                    if (!response.ok) { throw new Error(`Erro ao buscar dados: ${response.statusText}`); }
                    const data: AgendamentoApiResponseDto = await response.json();

                    // Ajuste para garantir que a data esteja no formato AAAA-MM-DD para o input type="date"
                    setDataAgendamento(data.dataAgendamento ? data.dataAgendamento.split('T')[0] : '');
                    setObservacao(data.observacao || '');

                } catch (err: any) { setError(err.message || "Falha ao carregar dados para edição.");
                } finally { setIsLoading(false); }
            };
            fetchAgendamentoData();
        } else { setError("ID do agendamento inválido na URL."); setIsLoading(false); }
    }, [id]);

    // --- Manipulador para salvar as alterações ---
    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!id) { setError("ID inválido para salvar."); return; }
        setIsSaving(true); setError(null); setSuccess(null);

        const agendamentoData = { dataAgendamento, observacao };
        const apiUrl = `http://localhost:8080/rest/agenda/${id}`; // Endpoint PUT Agenda

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(agendamentoData),
            });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }
            const result = await response.json();
            console.log("Update Success:", result);
            setSuccess("Agendamento atualizado com sucesso!");
            setTimeout(() => { setSuccess(null); }, 5000);
            // Não limpa form na edição
        } catch (err: any) { setError(err.message || "Falha ao salvar alterações.");
        } finally { setIsSaving(false); }
    };

    // --- Renderização ---
    if (isLoading) {
        return ( <> <NavBar active="agendamento" /> <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white"> <p className="text-center text-sky-300 py-10">Carregando dados do agendamento...</p> </main> </> );
    }
    if (error && !agendamentoInfo && !isLoading) { // Exibe erro se falhou em carregar e não está mais carregando
        return (
            <> <NavBar active="agendamento" /> <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white"> <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl mx-auto"> <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">Erro ao Carregar</h2> <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p> <div className="text-center"> <Link href="/agendamento/listar"> <button className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700"> Voltar para Lista </button> </Link> </div> </div> </main> </>
        );
    }


    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">
                        Alterar Agendamento (ID: {id})
                    </h2>
                    <form onSubmit={handleUpdate}>
                        {/* Mensagem de Erro */}
                        {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                        {/* Mensagem de Sucesso */}
                        {success && ( <p className="text-center text-green-400 mb-4">{success}</p> )}

                        {/* Campos do Formulário */}
                        <div className="mb-4">
                            <label htmlFor="dataAgendamento" className="block mb-1">Data do Agendamento:</label>
                            <input type="date" id="dataAgendamento" name="dataAgendamento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataAgendamento} onChange={(e) => setDataAgendamento(e.target.value)} />
                        </div>
                        <div className="mb-6">
                            <label htmlFor="observacao" className="block mb-1">Observação:</label>
                            <textarea id="observacao" name="observacao" rows={5} className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={observacao} onChange={(e) => setObservacao(e.target.value)} maxLength={400} />
                        </div>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button type="submit" className={`px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isSaving || isLoading}>
                                {isSaving ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/agendamento/listar" className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}
================================================================================

/* --- app\agendamento\buscar\page.tsx --- */
// app/agendamento/buscar/page.tsx
"use client";

import { useState, useEffect, ChangeEvent, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';

// --- Interfaces ---
interface AgendamentoParaLista {
    id: number; dataAgendamento: string; observacao: string; }

interface PaginatedAgendaResponse {
    content: AgendamentoApiResponseDto[];
    totalPages: number; totalElements: number; number: number; size: number; }

interface AgendamentoApiResponseDto {
    id: number; dataAgendamento: string; observacao: string | null; }
// ----------------

type TipoBuscaAgendamento = 'id' | 'observacao' | 'dataInicio' | 'dataFim';

export default function BuscarAgendamentosPage() {
    const [resultadosBusca, setResultadosBusca] = useState<AgendamentoParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaAgendamento>('observacao');
    const [termoBusca, setTermoBusca] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // Estados de Paginação
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(10);

    const router = useRouter();

    // --- Função de Busca que chama a API Backend ---
    const handleSearch = async (event?: FormEvent<HTMLFormElement>, page = 0) => {
        if (event) { event.preventDefault(); }
        setIsSearching(true);
        setBuscaRealizada(true);
        setError(null);
        setResultadosBusca([]);

        // Tratamento especial para busca por ID
        if (tipoBusca === 'id') {
            const idNumerico = parseInt(termoBusca.trim(), 10);
            if (isNaN(idNumerico) || idNumerico <= 0) {
                setError("Por favor, insira um ID numérico válido.");
                setIsSearching(false);
                setBuscaRealizada(false);
                return;
            }
            const apiUrl = `http://localhost:8080/rest/agenda/${idNumerico}`;
            console.info("Buscando agendamento por ID:", apiUrl);
            try {
                const response = await fetch(apiUrl);
                if (response.status === 404) {
                    setResultadosBusca([]); setTotalPages(0); setCurrentPage(0);
                    console.info(`Agendamento com ID ${idNumerico} não encontrado.`);
                } else if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}` }));
                    throw new Error(errorData.message || `Erro HTTP ${response.status}`);
                } else {
                    const data: AgendamentoApiResponseDto = await response.json();
                    const agendamentoFormatado: AgendamentoParaLista = {
                        id: data.id,
                        dataAgendamento: data.dataAgendamento ? new Date(data.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                        observacao: data.observacao || '',
                    };
                    setResultadosBusca([agendamentoFormatado]); setTotalPages(1); setCurrentPage(0);
                }
            } catch (err: any) {
                setError(err.message || "Falha ao buscar agendamento por ID.");
                setResultadosBusca([]); setTotalPages(0);
            } finally {
                setIsSearching(false);
            }
            return;
        }

        // --- Lógica para outros tipos de busca ---
        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
        });
        if (termoBusca.trim()) {
            if (tipoBusca === 'dataInicio' || tipoBusca === 'dataFim') {
                if (/^\d{4}-\d{2}-\d{2}$/.test(termoBusca.trim())) {
                    params.append(tipoBusca, termoBusca.trim());
                } else {
                    setError("Formato de data inválido. Use AAAA-MM-DD.");
                    setIsSearching(false); setBuscaRealizada(false); return;
                }
            } else { // 'observacao'
                params.append(tipoBusca, termoBusca.trim());
            }
        } else if (tipoBusca !== 'observacao') {
            setError("Termo de busca é obrigatório para filtros de data.");
            setIsSearching(false); setBuscaRealizada(false); return;
        }

        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.info("Buscando agendamentos na API com filtros:", apiUrl);
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 400) {
                    const errorData = await response.json().catch(() => ({ message: "Requisição inválida (400)." }));
                    throw new Error(errorData.message || `Erro HTTP ${response.status}`);
                }
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }
            if (response.status === 204) {
                setResultadosBusca([]); setTotalPages(0); setCurrentPage(0);
                console.info("Nenhum agendamento encontrado para a busca (204 No Content).");
            } else {
                const data: PaginatedAgendaResponse = await response.json();
                const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                    id: dto.id,
                    dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                    observacao: dto.observacao || '',
                }));
                setResultadosBusca(agendamentosFormatados);
                setTotalPages(data.totalPages);
                setCurrentPage(data.number);
            }
        } catch (err: any) {
            setError(err.message || "Falha ao buscar agendamentos.");
            setResultadosBusca([]); setTotalPages(0);
        } finally {
            setIsSearching(false);
        }
    };

    // --- Placeholder e Navegação ---
    const getPlaceholder = (): string => { /* ... (sem alterações) ... */
        switch (tipoBusca) {
            case 'id': return 'Digite o ID exato...';
            case 'dataInicio': return 'Data Início (AAAA-MM-DD)...';
            case 'dataFim': return 'Data Fim (AAAA-MM-DD)...';
            case 'observacao': return 'Digite parte da observação...';
            default: return 'Digite o termo...';
        }
    };
    const handlePreviousPage = () => { if (currentPage > 0) { handleSearch(undefined, currentPage - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { handleSearch(undefined, currentPage + 1); } };
    // ---------------------------

    return (
        <>
            <NavBar active="agendamento" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Buscar Agendamentos</h1>

                {/* Formulário de Busca (sem alterações na estrutura) */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    {/* Select tipo de busca */}
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select id="tipoBusca" name="tipoBusca" className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoBusca} onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaAgendamento); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); setError(null); }}>
                            <option value="observacao">Observação</option>
                            <option value="id">ID</option>
                            <option value="dataInicio">Data Início</option>
                            {/* <option value="dataFim">Data Fim</option> */}
                        </select>
                    </div>
                    {/* Input termo */}
                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input
                            type={tipoBusca === 'id' ? 'number' : tipoBusca.includes('data') ? 'date' : 'text'}
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            value={termoBusca}
                            onChange={(e) => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()}
                            required={tipoBusca !== 'observacao'}
                        />
                    </div>
                    {/* Botão Buscar */}
                    <button type="submit" className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap" disabled={isSearching}>
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Mensagens de Erro */}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {/* Tabela de Resultados */}
                {buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            {/* ... thead ... */}
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento encontrado para esta busca.</td></tr>
                            ) : (
                                resultadosBusca.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-md truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Botão Editar */}
                                            <Link href={`/agendamento/alterar/${agendamento.id}`}>
                                                <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">Editar</button>
                                            </Link>
                                            {/* Botão Deletar - Navega para a página de exclusão */}
                                            <button
                                                onClick={() => router.push(`/agendamento/deletar/${agendamento.id}`)}
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            >
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Controles de Paginação (só mostrados para buscas não-ID com mais de 1 página) */}
                {buscaRealizada && tipoBusca !== 'id' && !isSearching && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        {/* ... botões de paginação ... */}
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Anterior
                        </button>
                        <span className="text-slate-300">
                             Página {currentPage + 1} de {totalPages}
                         </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Próxima
                        </button>
                    </div>
                )}

            </main>

            {/* REMOVIDO: Modais de Deleção - A lógica agora está na página /deletar/[id] */}

            {/* Estilo global para input date */}
            <style jsx global>{`
                 .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                 /* Adicione outros estilos globais se necessário */
             `}</style>
        </>
    );
}
================================================================================

/* --- app\agendamento\cadastrar\page.tsx --- */
// app/agendamento/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';

export default function CadastrarAgendamentoPage() {

    const today = new Date().toISOString().split('T')[0];
    const initialState = {
        dataAgendamento: today,
        observacao: ""
    };

    // Estados do Formulário
    const [dataAgendamento, setDataAgendamento] = useState(initialState.dataAgendamento);
    const [observacao, setObservacao] = useState(initialState.observacao);

    // Estados de Controle
    const [isLoading, setIsLoading] = useState(false); // Renomeado de isSaving
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Função para Limpar o Formulário
    const resetForm = () => {
        setDataAgendamento(initialState.dataAgendamento);
        setObservacao(initialState.observacao);
        setError(null);
    };

    // --- Manipulador de Submissão do Formulário ---
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true); setError(null); setSuccess(null);

        const agendamentoData = { dataAgendamento, observacao };

        console.log('Salvando agendamento:', JSON.stringify(agendamentoData, null, 2));
        const apiUrl = "http://localhost:8080/rest/agenda"; // Endpoint POST Agenda

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(agendamentoData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Save Success:", result);
            setSuccess("Agendamento criado com sucesso!");
            resetForm(); // Limpa o formulário
            setTimeout(() => { setSuccess(null); }, 5000); // Limpa msg após 5s

        } catch (err: any) {
            setError(err.message || "Falha ao criar agendamento.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg"> {/* Ajustado max-width */}
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">Novo Agendamento</h2>
                    <form onSubmit={handleSubmit}>
                        {/* Mensagens */}
                        {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                        {success && ( <p className="text-center text-green-400 mb-4">{success}</p> )}

                        {/* Campos do Formulário */}
                        <div className="mb-4">
                            <label htmlFor="dataAgendamento" className="block mb-1">Data do Agendamento:</label>
                            <input
                                type="date"
                                id="dataAgendamento"
                                name="dataAgendamento"
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                                value={dataAgendamento}
                                onChange={(e) => setDataAgendamento(e.target.value)}
                            />
                        </div>
                        <div className="mb-6">
                            <label htmlFor="observacao" className="block mb-1">Observação:</label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={5}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                                value={observacao}
                                onChange={(e) => setObservacao(e.target.value)}
                                maxLength={400} // Baseado no DTO/Model
                            />
                        </div>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button type="submit" className={`px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isLoading}>
                                {isLoading ? 'Salvando...' : 'Salvar Agendamento'}
                            </button>
                            <Link href="/agendamento/listar" className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

================================================================================

/* --- app\agendamento\deletar\[id]\page.tsx --- */
// app/agendamento/deletar/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho se necessário

// Interface para buscar os dados (opcional, mas bom para confirmação)
interface AgendamentoInfo {
    id: number;
    dataAgendamento: string; // Formato AAAA-MM-DD vindo da API
    observacao: string | null;
}

export default function DeletarAgendamentoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [agendamentoInfo, setAgendamentoInfo] = useState<AgendamentoInfo | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Busca dados do agendamento para confirmação
    useEffect(() => {
        if (id) {
            setIsLoadingInfo(true);
            setError(null);
            const fetchAgendamentoData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/agenda/${id}`;
                    const response = await fetch(apiUrl);
                    if (response.status === 404) { throw new Error("Agendamento não encontrado para confirmar exclusão."); }
                    if (!response.ok) { throw new Error(`Erro ao buscar dados: ${response.statusText}`); }
                    const data: AgendamentoInfo = await response.json();
                    setAgendamentoInfo(data);
                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados do agendamento para exclusão.");
                    setAgendamentoInfo(null);
                } finally {
                    setIsLoadingInfo(false);
                }
            };
            fetchAgendamentoData();
        } else {
            setError("ID do agendamento inválido na URL.");
            setIsLoadingInfo(false);
        }
    }, [id]);

    // Função para confirmar e executar a exclusão
    const handleConfirmDelete = async () => {
        if (!id) {
            setError("Não é possível excluir: ID inválido.");
            return;
        }
        setIsDeleting(true);
        setError(null);
        const apiUrl = `http://localhost:8080/rest/agenda/${id}`;

        try {
            const response = await fetch(apiUrl, { method: 'DELETE' });

            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao excluir agendamento: ${errorText || response.statusText}`);
            }
            console.log(`Agendamento ID ${id} excluído com sucesso.`);
            router.push('/agendamento/listar'); // Redireciona para a lista

        } catch (err: any) {
            setError(err.message || "Falha ao excluir agendamento.");
            setIsDeleting(false); // Permite tentar novamente se der erro
        }
        // Não define isDeleting como false em caso de sucesso, pois navega para fora
    };

    // Função para cancelar e voltar
    const handleCancel = () => {
        router.push('/agendamento/listar'); // Ou router.back() se preferir
    };

    // --- Renderização ---
    if (isLoadingInfo) {
        return (
            <> <NavBar active="agendamento" /> <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white"> <p className="text-center text-sky-300 py-10">Carregando dados para confirmação...</p> </main> </>
        );
    }

    // Se ID inválido ou erro ao buscar info inicial
    if (error || !id) {
        return (
            <> <NavBar active="agendamento" /> <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white"> <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto"> <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">Erro</h2> <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error || "ID não fornecido."}</p> <div className="text-center"> <button onClick={handleCancel} className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700"> Voltar </button> </div> </div> </main> </>
        );
    }

    // Se não encontrou o agendamento para confirmar
    if (!agendamentoInfo) {
        return (
            <> <NavBar active="agendamento" /> <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white"> <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto"> <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center text-yellow-400">Agendamento Não Encontrado</h2> <p className="text-center text-yellow-400 bg-yellow-900/50 p-3 rounded border border-yellow-500 mb-6">O agendamento ID {id} não foi encontrado ou pode já ter sido excluído.</p> <div className="text-center"> <button onClick={handleCancel} className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700"> Voltar </button> </div> </div> </main> </>
        );
    }

    // Tela de confirmação
    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6">Tem certeza que deseja excluir o seguinte agendamento?</p>

                    <div className='text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded'>
                        <p><strong>ID:</strong> {agendamentoInfo.id}</p>
                        <p><strong>Data:</strong> {new Date(agendamentoInfo.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' })}</p>
                        <p><strong>Observação:</strong> {agendamentoInfo.observacao || '-'}</p>
                    </div>

                    {/* Mostra erro se a exclusão falhar */}
                    {error && ( <p className="text-center text-red-400 mb-4">{error}</p> )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : 'Sim, Excluir'}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}
================================================================================

/* --- app\agendamento\listar\page.tsx --- */
// app/agendamento/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Importar useRouter
import NavBar from '@/components/nav-bar';

// --- Interfaces ---
interface AgendamentoParaLista {
    id: number;
    dataAgendamento: string;
    observacao: string;
}
interface PaginatedAgendaResponse {
    content: AgendamentoApiResponseDto[];
    totalPages: number;
    totalElements: number;
    number: number;
    size: number;
}
interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string;
    observacao: string | null;
}
// ----------------

export default function ListarAgendamentosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(10); // Ou outro valor padrão

    const router = useRouter(); // Inicializar o router

    // --- Função para buscar agendamentos paginados ---
    const fetchAgendamentos = async (page = 0) => {
        setIsLoading(true);
        setError(null);

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'dataAgendamento,desc' // Exemplo: Ordenar por data descendente
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 400) {
                    const errorData = await response.json().catch(() => ({ message: "Requisição inválida (400)." }));
                    throw new Error(errorData.message || `Erro HTTP ${response.status}`);
                }
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }

            if (response.status === 204) { // No Content
                setAgendamentos([]);
                setTotalPages(0);
                setCurrentPage(0);
                console.info("Nenhum agendamento encontrado (204 No Content).");
                return;
            }

            const data: PaginatedAgendaResponse = await response.json();

            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                observacao: dto.observacao || '',
            }));

            setAgendamentos(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);

        } catch (err: any) {
            setError(err.message || "Falha ao carregar agendamentos.");
            setAgendamentos([]);
            setTotalPages(0);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchAgendamentos(currentPage);
    }, [currentPage, pageSize]);

    // --- Funções para Navegação de Página ---
    const handlePreviousPage = () => {
        if (currentPage > 0) {
            fetchAgendamentos(currentPage - 1);
        }
    };
    const handleNextPage = () => {
        if (currentPage < totalPages - 1) {
            fetchAgendamentos(currentPage + 1);
        }
    };
    // --------------------------------------

    return (
        <>
            <NavBar active="agendamento" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho e Botão Novo */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Agendamentos</h1>
                    <Link href="/agendamento/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Novo Agendamento
                        </button>
                    </Link>
                </div>

                {/* Mensagens */}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {/* Tabela de Agendamentos */}
                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando agendamentos...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {agendamentos.length === 0 ? (
                                <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento encontrado.</td></tr>
                            ) : (
                                agendamentos.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-md truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Botão Editar */}
                                            <Link href={`/agendamento/alterar/${agendamento.id}`}>
                                                <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">Editar</button>
                                            </Link>
                                            {/* Botão Deletar - Navega para a página de exclusão */}
                                            <button
                                                onClick={() => router.push(`/agendamento/deletar/${agendamento.id}`)}
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            >
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Controles de Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Anterior
                        </button>
                        <span className="text-slate-300">
                            Página {currentPage + 1} de {totalPages}
                        </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Próxima
                        </button>
                    </div>
                )}
            </main>
        </>
    );
}
================================================================================

/* --- app\clientes\page.tsx --- */
// app/clientes/page.tsx
"use client";

import Link from 'next/link';
import NavBar from '@/components/nav-bar';

export default function ClientesMenuPage() {

    return (
        <>
            {/* Passa a prop 'active' correta para a NavBar */}
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-8 text-center">Gerenciar Clientes</h1>

                <div className="flex flex-col items-center gap-6 mt-10 md:flex-row md:justify-center">
                    {/* Botão/Link para Listar */}
                    <Link href="/clientes/listar">
                        <button className="w-60 px-6 py-3 text-lg font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-colors">
                            Listar Clientes
                        </button>
                    </Link>

                    {/* Botão/Link para Cadastrar */}
                    <Link href="/clientes/cadastrar">
                        <button className="w-60 px-6 py-3 text-lg font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-colors">
                            Cadastrar Novo Cliente
                        </button>
                    </Link>

                    {/* Você pode adicionar mais botões aqui para outras ações se desejar */}

                </div>
            </main>
        </>
    );
}

================================================================================

/* --- app\clientes\alterar\[idCliente]\[idEndereco]\page.tsx --- */

"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';

// Função auxiliar para limpar máscaras
const cleanMaskedValue = (value: string): string => {
    return value.replace(/\D/g, '');
};

// Interface para a resposta da API
interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    sexo: string;
    dataNascimento: string;
    atividadeProfissional: string;
    endereco: {
        codigo: number; numero: number; cep: string; logradouro: string;
        cidade: string; bairro: string; estado: string; complemento: string | null;
    } | null;
    contato: {
        codigo: number; celular: string; email: string; contato: string;
    } | null;
}

export default function AlterarClientePage() {
    const params = useParams();
    const router = useRouter();

    const idClienteParam = params?.idCliente;
    const idEnderecoParam = params?.idEndereco;
    const idCliente = typeof idClienteParam === 'string' ? parseInt(idClienteParam, 10) : null;
    const idEndereco = typeof idEnderecoParam === 'string' ? parseInt(idEnderecoParam, 10) : null;

    // Estados do Formulário
    const [tipoCliente, setTipoCliente] = useState("PF");
    const [nome, setNome] = useState("");
    const [sobrenome, setSobrenome] = useState("");
    const [sexo, setSexo] = useState("M");
    const [tipoDocumento, setTipoDocumento] = useState("CPF");
    const [numeroDocumento, setNumeroDocumento] = useState("");
    const [dataNascimento, setDataNascimento] = useState("");
    const [atividadeProfissional, setAtividadeProfissional] = useState("");
    const [celular, setCelular] = useState("");
    const [email, setEmail] = useState("");
    const [contato, setContato] = useState("");
    const [numeroCasa, setNumeroCasa] = useState("");
    const [cep, setCep] = useState("");
    const [logradouro, setLogradouro] = useState("");
    const [bairro, setBairro] = useState("");
    const [cidade, setCidade] = useState("");
    const [estado, setEstado] = useState("");
    const [complemento, setComplemento] = useState("");

    // Estados de Controle
    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Estado para a mensagem de sucesso

    // useEffect para buscar dados (mantido igual)
    useEffect(() => {
        if (idCliente && idEndereco) {
            setIsLoading(true); setError(null); setSuccess(null);
            const fetchClienteData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`;
                    const response = await fetch(apiUrl);
                    if (response.status === 404) { throw new Error("Cliente não encontrado."); }
                    if (!response.ok) { throw new Error(`Erro ao buscar dados: ${response.statusText}`); }
                    const data: ClienteApiResponseDto = await response.json();

                    // Preenche estados...
                    setTipoCliente(data.tipoCliente || 'PF');
                    setNome(data.nome || '');
                    setSobrenome(data.sobrenome || '');
                    setSexo(data.sexo || 'M');
                    setTipoDocumento(data.tipoDocumento || 'CPF');
                    setNumeroDocumento(data.numeroDocumento || '');
                    setDataNascimento(data.dataNascimento ? data.dataNascimento.split('T')[0] : '');
                    setAtividadeProfissional(data.atividadeProfissional || '');
                    setCelular(data.contato?.celular || '');
                    setEmail(data.contato?.email || '');
                    setContato(data.contato?.contato || '');
                    setNumeroCasa(data.endereco?.numero?.toString() || '');
                    setCep(data.endereco?.cep || '');
                    setLogradouro(data.endereco?.logradouro || '');
                    setBairro(data.endereco?.bairro || '');
                    setCidade(data.endereco?.cidade || ''); // Assume que DTO de resposta tem 'cidade'
                    setEstado(data.endereco?.estado || ''); // Assume que DTO de resposta tem 'estado'
                    setComplemento(data.endereco?.complemento || '');

                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados.");
                } finally {
                    setIsLoading(false);
                }
            };
            fetchClienteData();
        } else {
            setError("IDs inválidos na URL."); setIsLoading(false);
        }
    }, [idCliente, idEndereco]);

    // --- Manipulador para salvar as alterações (handleUpdate) ---
    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!idCliente || !idEndereco) { setError("IDs inválidos."); return; }

        setIsSaving(true); setError(null); setSuccess(null);

        const cleanedNumeroDocumento = cleanMaskedValue(numeroDocumento);
        const cleanedCelular = cleanMaskedValue(celular);
        const cleanedCep = cleanMaskedValue(cep);

        const clienteData = {
            tipoCliente, nome, sobrenome, sexo, tipoDocumento,
            numeroDocumento: cleanedNumeroDocumento, dataNascimento, atividadeProfissional,
            endereco: {
                numero: parseInt(numeroCasa, 10), cep: cleanedCep, logradouro, bairro,
                localidade: cidade, uf: estado, complemento,
            },
            contato: { celular: cleanedCelular, email, contato }
        };

        const apiUrl = `http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`;

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(clienteData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Update Success:", result);
            setSuccess("Cliente atualizado com sucesso!"); // <<< Define a mensagem de sucesso

            // Limpa a mensagem de sucesso após alguns segundos
            setTimeout(() => {
                setSuccess(null);
            }, 5000); // 5 segundos

            // Não limpamos o formulário na edição

        } catch (err: any) {
            setError(err.message || "Falha ao salvar alterações.");
        } finally {
            setIsSaving(false);
        }
    };

    // --- Lógica de busca de CEP (mantida) ---
    const handleCepChange = async (value: string) => {
        const maskedCep = value;
        const newCep = cleanMaskedValue(maskedCep);
        setCep(maskedCep);
        setLogradouro(''); setBairro(''); setCidade(''); setEstado('');
        if (newCep.length === 8) {
            setIsSaving(true); setError(null); // Reutiliza isSaving para indicar busca CEP
            try {
                const response = await fetch(`https://viacep.com.br/ws/${newCep}/json/`);
                if (!response.ok) throw new Error('CEP não encontrado');
                const data = await response.json();
                if (data.erro) { throw new Error('CEP inválido'); }
                setLogradouro(data.logradouro || ''); setBairro(data.bairro || '');
                setCidade(data.localidade || ''); setEstado(data.uf || '');
            } catch (cepError: any) { setError(`Erro CEP: ${cepError.message}`);
            } finally { setIsSaving(false); }
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    // --- Renderização ---
    if (isLoading) { /* ... código de loading ... */
        return (
            <>
                <NavBar active="clientes" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados do cliente...</p>
                </main>
            </>
        );
    }
    if (error && !nome) { /* ... código de erro fatal se não carregou nome ... */
        return (
            <>
                <NavBar active="clientes" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                        <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">Erro ao Carregar</h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <Link href="/clientes/listar">
                                <button className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                    Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="clientes" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">Alterar Cliente (ID: {idCliente})</h2>
                    <form onSubmit={handleUpdate}>
                        {/* Caixa de Mensagem de Erro (mantida com botão fechar) */}
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <span className="block sm:inline">{error}</span>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                    <span className="text-2xl" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        )}

                        {/* Fieldsets e Inputs (iguais ao cadastro, usando IMaskInput) */}
                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="mb-4">
                                    <label htmlFor="tipo_cliente" className="block mb-1">Tipo de Cliente:</label>
                                    <select id="tipo_cliente" name="tipo_cliente" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoCliente} onChange={(e) => setTipoCliente(e.target.value)}>
                                        <option value="PF">Pessoa Física</option>
                                        <option value="PJ">Pessoa Jurídica</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="nome" className="block mb-1">Nome:</label>
                                    <input type="text" id="nome" name="nome" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={nome} onChange={(e) => setNome(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="sobrenome" className="block mb-1">Sobrenome:</label>
                                    <input type="text" id="sobrenome" name="sobrenome" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={sobrenome} onChange={(e) => setSobrenome(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="sexo" className="block mb-1">Sexo:</label>
                                    <select id="sexo" name="sexo" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={sexo} onChange={(e) => setSexo(e.target.value)}>
                                        <option value="M">Masculino</option>
                                        <option value="F">Feminino</option>
                                        <option value="O">Outro</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="tipo_documento" className="block mb-1">Tipo de Documento:</label>
                                    <select id="tipo_documento" name="tipo_documento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoDocumento} onChange={(e) => { setTipoDocumento(e.target.value); setNumeroDocumento(''); }}>
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="numero_documento" className="block mb-1">Número do Documento:</label>
                                    <IMaskInput mask={tipoDocumento === 'CPF' ? cpfMask : cnpjMask} value={numeroDocumento} unmask={false} onAccept={(value) => setNumeroDocumento(value)} id="numero_documento" name="numero_documento" placeholder={tipoDocumento === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="data_nascimento" className="block mb-1">Data de Nascimento:</label>
                                    <input type="date" id="data_nascimento" name="data_nascimento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataNascimento} onChange={(e) => setDataNascimento(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="atividade_profissional" className="block mb-1">Atividade Profissional:</label>
                                    <input type="text" id="atividade_profissional" name="atividade_profissional" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={atividadeProfissional} onChange={(e) => setAtividadeProfissional(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="mb-4">
                                    <label htmlFor="celular" className="block mb-1">Celular:</label>
                                    <IMaskInput mask="(00) 00000-0000" value={celular} unmask={false} onAccept={(value) => setCelular(value)} type="tel" id="celular" name="celular" placeholder="(99) 99999-9999" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="email" className="block mb-1">E-mail:</label>
                                    <input type="email" id="email" name="email" placeholder="exemplo@dominio.com" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={email} onChange={(e) => setEmail(e.target.value)} />
                                </div>
                                <div className="mb-4 md:col-span-2">
                                    <label htmlFor="contato" className="block mb-1">Nome do Contato Principal:</label>
                                    <input type="text" id="contato" name="contato" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={contato} onChange={(e) => setContato(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div className="mb-4 md:col-span-1">
                                    <label htmlFor="cep" className="block mb-1">CEP:</label>
                                    <IMaskInput mask="00000-000" value={cep} unmask={false} onAccept={handleCepChange} id="cep" name="cep" placeholder="00000-000" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4 md:col-span-2">
                                    <label htmlFor="logradouro" className="block mb-1">Logradouro:</label>
                                    <input type="text" id="logradouro" name="logradouro" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={logradouro} onChange={(e) => setLogradouro(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="numeroCasa" className="block mb-1">Número:</label>
                                    <input type="text" id="numeroCasa" name="numeroCasa" maxLength={8} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={numeroCasa} onChange={(e) => setNumeroCasa(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="complemento" className="block mb-1">Complemento:</label>
                                    <input type="text" id="complemento" name="complemento" maxLength={100} className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={complemento} onChange={(e) => setComplemento(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="bairro" className="block mb-1">Bairro:</label>
                                    <input type="text" id="bairro" name="bairro" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={bairro} onChange={(e) => setBairro(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="cidade" className="block mb-1">Cidade:</label>
                                    <input type="text" id="cidade" name="cidade" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={cidade} onChange={(e) => setCidade(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="estado" className="block mb-1">Estado:</label>
                                    <input type="text" id="estado" name="estado" maxLength={2} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={estado} onChange={(e) => setEstado(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* <<< Mensagem de Sucesso Simples (acima dos botões) >>> */}
                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                className={`px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isSaving || isLoading}
                            >
                                {isSaving ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/clientes/listar" className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

================================================================================

/* --- app\clientes\buscar\page.tsx --- */
// app/clientes/buscar/page.tsx
"use client";

import { useState, useEffect, ChangeEvent, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';

// Interfaces (mantidas da versão anterior)
interface ClienteParaLista {
    idCli: number;
    idEndereco: number;
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}

interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: { codigo: number; cidade: string; estado: string; } | null;
    contato: { celular: string; email: string; } | null;
}

// Define os tipos de busca possíveis
type TipoBusca = 'nome' | 'id' | 'doc';

export default function BuscarClientesPage() {
    const [todosClientes, setTodosClientes] = useState<ClienteParaLista[]>([]);
    const [resultadosBusca, setResultadosBusca] = useState<ClienteParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBusca>('nome'); // <<< Novo estado: tipo de busca (padrão: nome)
    const [termoBusca, setTermoBusca] = useState(''); // <<< Novo estado: termo único de busca
    // const [termoBuscaNome, setTermoBuscaNome] = useState(''); // Removido
    // const [termoBuscaDoc, setTermoBuscaDoc] = useState(''); // Removido
    const [isLoading, setIsLoading] = useState(false);
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // --- Função para buscar TODOS os clientes (mantida) ---
    const fetchTodosClientes = async () => {
        if (todosClientes.length > 0) return;
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch("http://localhost:8080/rest/clientes/all");
            if (!response.ok) {
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }
            const data: ClienteApiResponseDto[] = await response.json();
            const clientesFormatados: ClienteParaLista[] = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0,
                nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A',
                cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} - ${dto.endereco.estado || 'N/A'}` : 'N/A',
            }));
            setTodosClientes(clientesFormatados);
        } catch (err: any) {
            console.error("Erro ao buscar dados da API:", err);
            setError(err.message || "Falha ao carregar dados base dos clientes.");
        } finally {
            setIsLoading(false);
        }
    };

    // --- Busca inicial (mantida) ---
    useEffect(() => {
        fetchTodosClientes();
    }, []);

    // --- Função para realizar a busca/filtro (CLIENT-SIDE - MODIFICADA) ---
    const handleSearch = (event?: FormEvent<HTMLFormElement>) => {
        if (event) event.preventDefault();
        setIsSearching(true);
        setBuscaRealizada(true);

        const query = termoBusca.trim().toLowerCase(); // Termo de busca geral
        if (!query) { // Se a busca for vazia, mostra todos ou nenhum? Vamos mostrar nenhum.
            setResultadosBusca([]);
            setIsSearching(false);
            return;
        }

        let resultados: ClienteParaLista[] = [];

        // Filtra baseado no tipo de busca selecionado
        switch (tipoBusca) {
            case 'nome':
                resultados = todosClientes.filter(cliente =>
                    cliente.nomeCompleto.toLowerCase().includes(query)
                );
                break;
            case 'id':
                // Filtra por ID do cliente (idCli) - compara como string
                resultados = todosClientes.filter(cliente =>
                    cliente.idCli.toString() === query.replace(/\D/g, '') // Compara ID como string, remove não-dígitos da busca
                );
                break;
            case 'doc':
                // Filtra por documento (CPF/CNPJ) - remove não-dígitos de ambos para comparar
                const docQuery = query.replace(/\D/g, '');
                resultados = todosClientes.filter(cliente =>
                    cliente.documento.replace(/\D/g, '').includes(docQuery)
                );
                break;
            default:
                resultados = []; // Tipo de busca desconhecido
        }

        setResultadosBusca(resultados);
        setIsSearching(false);
    };

    // --- Função para deletar cliente (mantida) ---
    const handleDelete = async (idCliente: number, idEndereco: number) => {
        if (!idCliente || !idEndereco) {
            setError("ID inválido para exclusão."); return;
        }
        if (!window.confirm(`Tem certeza que deseja excluir o cliente ID ${idCliente} (Endereço ID ${idEndereco})?`)) {
            return;
        }
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar cliente: ${errorText || response.statusText}`);
            }
            alert("Cliente excluído com sucesso!");
            setTodosClientes(prev => prev.filter(c => !(c.idCli === idCliente && c.idEndereco === idEndereco)));
            setResultadosBusca(prev => prev.filter(c => !(c.idCli === idCliente && c.idEndereco === idEndereco)));
        } catch (err: any) {
            console.error("Erro ao deletar cliente:", err);
            setError(err.message || "Falha ao excluir cliente.");
        } finally {
            // Lógica de loading aqui se necessário
        }
    };

    // Define placeholder dinâmico para o input de busca
    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'nome': return 'Digite parte do nome...';
            case 'id': return 'Digite o Código do Cliente (ID)...';
            case 'doc': return 'Digite parte do CPF ou CNPJ...';
            default: return 'Digite o termo de busca...';
        }
    }

    return (
        <>
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Buscar Clientes</h1>

                {/* Formulário de Busca Modificado */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    {/* <<< Select para escolher o tipo de busca >>> */}
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select
                            id="tipoBusca"
                            name="tipoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={tipoBusca}
                            onChange={(e) => {
                                setTipoBusca(e.target.value as TipoBusca);
                                setTermoBusca(''); // Limpa termo ao trocar tipo
                                setResultadosBusca([]); // Limpa resultados anteriores
                                setBuscaRealizada(false);
                            }}
                        >
                            <option value="nome">Nome</option>
                            <option value="id">Código Cliente</option>
                            <option value="doc">Documento (CPF/CNPJ)</option>
                        </select>
                    </div>

                    {/* <<< Input único para o termo de busca >>> */}
                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input
                            type={tipoBusca === 'id' ? 'number' : 'text'} // Muda para number se busca for por ID
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={termoBusca}
                            onChange={(e) => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()} // Placeholder dinâmico
                            required // Torna o campo obrigatório para buscar
                        />
                    </div>

                    <button
                        type="submit"
                        className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap"
                        disabled={isLoading || isSearching}
                    >
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Exibição de Loading Inicial e Erro */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando dados base...</p>}
                {error && <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500">{error}</p>}

                {/* Tabela de Resultados da Busca (lógica mantida) */}
                {!isLoading && !error && buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            {/* Cabeçalho da Tabela (thead) ... */}
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Completo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Documento</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum cliente encontrado com os critérios informados.</td></tr>
                            ) : (
                                // Corpo da Tabela (tbody) com map e botões (igual anterior) ...
                                resultadosBusca.map((cliente) => (
                                    <tr key={`${cliente.idCli}-${cliente.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {(cliente.idCli && cliente.idEndereco) ? (
                                                <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}>
                                                    <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">Alterar</button>
                                                </Link>
                                            ) : (
                                                <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Alterar</button>
                                            )}
                                            <button onClick={() => handleDelete(cliente.idCli, cliente.idEndereco)} className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded" disabled={isLoading || !cliente.idCli || !cliente.idEndereco}>
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
        </>
    );
}

================================================================================

/* --- app\clientes\cadastrar\page.tsx --- */
// Adicione esta diretiva no topo para usar Hooks React
"use client";

import NavBar from "@/components/nav-bar"; // Garanta que este componente exista no seu projeto
// import Link from "next/link"; // Removido pois o botão Voltar será removido
import { useState, FormEvent } from "react"; // Importa useState e FormEvent
import { IMaskInput } from 'react-imask'; // Importa da biblioteca 'react-imask'

// Função auxiliar para limpar máscaras (remover não-dígitos)
const cleanMaskedValue = (value: string): string => {
    return value.replace(/\D/g, '');
};

export default function CadastrarPage() {
    // --- Estados Iniciais ---
    const initialState = {
        tipoCliente: "PF", nome: "", sobrenome: "", sexo: "M", tipoDocumento: "CPF",
        numeroDocumento: "", dataNascimento: "", atividadeProfissional: "",
        celular: "", email: "", contato: "", numeroCasa: "", cep: "",
        logradouro: "", bairro: "", cidade: "", estado: "", complemento: ""
    };

    // --- Variáveis de Estado para os Inputs do Formulário ---
    const [tipoCliente, setTipoCliente] = useState(initialState.tipoCliente);
    const [nome, setNome] = useState(initialState.nome);
    const [sobrenome, setSobrenome] = useState(initialState.sobrenome);
    const [sexo, setSexo] = useState(initialState.sexo);
    const [tipoDocumento, setTipoDocumento] = useState(initialState.tipoDocumento);
    const [numeroDocumento, setNumeroDocumento] = useState(initialState.numeroDocumento);
    const [dataNascimento, setDataNascimento] = useState(initialState.dataNascimento);
    const [atividadeProfissional, setAtividadeProfissional] = useState(initialState.atividadeProfissional);
    const [celular, setCelular] = useState(initialState.celular);
    const [email, setEmail] = useState(initialState.email);
    const [contato, setContato] = useState(initialState.contato);
    const [numeroCasa, setNumeroCasa] = useState(initialState.numeroCasa);
    const [cep, setCep] = useState(initialState.cep);
    const [logradouro, setLogradouro] = useState(initialState.logradouro);
    const [bairro, setBairro] = useState(initialState.bairro);
    const [cidade, setCidade] = useState(initialState.cidade);
    const [estado, setEstado] = useState(initialState.estado);
    const [complemento, setComplemento] = useState(initialState.complemento);

    // --- Estado para Feedback da API ---
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Mantido para a mensagem de texto

    // --- Função para Limpar o Formulário ---
    const resetForm = () => {
        setTipoCliente(initialState.tipoCliente);
        setNome(initialState.nome);
        setSobrenome(initialState.sobrenome);
        setSexo(initialState.sexo);
        setTipoDocumento(initialState.tipoDocumento);
        setNumeroDocumento(initialState.numeroDocumento);
        setDataNascimento(initialState.dataNascimento);
        setAtividadeProfissional(initialState.atividadeProfissional);
        setCelular(initialState.celular);
        setEmail(initialState.email);
        setContato(initialState.contato);
        setNumeroCasa(initialState.numeroCasa);
        setCep(initialState.cep);
        setLogradouro(initialState.logradouro);
        setBairro(initialState.bairro);
        setCidade(initialState.cidade);
        setEstado(initialState.estado);
        setComplemento(initialState.complemento);
        setError(null); // Limpa erros também
        // setSuccess(null); // <<< REMOVIDO daqui para a msg não sumir imediatamente
    };


    // --- Manipulador de Submissão do Formulário ---
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null); // Limpa msg de sucesso anterior ao tentar novo envio

        const cleanedNumeroDocumento = cleanMaskedValue(numeroDocumento);
        const cleanedCelular = cleanMaskedValue(celular);
        const cleanedCep = cleanMaskedValue(cep);

        const clienteData = {
            tipoCliente, nome, sobrenome, sexo, tipoDocumento,
            numeroDocumento: cleanedNumeroDocumento, dataNascimento, atividadeProfissional,
            endereco: {
                numero: parseInt(numeroCasa, 10), cep: cleanedCep, logradouro, bairro,
                localidade: cidade, uf: estado, complemento,
            },
            contato: { celular: cleanedCelular, email, contato }
        };

        console.log('Enviando dados (limpos) para API:', JSON.stringify(clienteData, null, 2));
        const apiUrl = "http://localhost:8080/rest/clientes";

        try {
            const response = await fetch(apiUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(clienteData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}. Resposta não contém JSON.` }));
                throw new Error(errorData.message || `Erro ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            console.log("Success:", result);
            setSuccess("Cliente cadastrado com sucesso!"); // Define a mensagem
            resetForm(); // Limpa o formulário

            // Limpa a mensagem de sucesso após alguns segundos
            setTimeout(() => {
                setSuccess(null);
            }, 5000); // 5000 milissegundos = 5 segundos

        } catch (err: any) {
            console.error("API Error:", err);
            setError(err.message || "Falha ao conectar com a API ou processar a resposta.");
        } finally {
            setIsLoading(false);
        }
    };

    // --- Lógica de busca de CEP ---
    const handleCepChange = async (value: string) => {
        const maskedCep = value;
        const newCep = cleanMaskedValue(maskedCep);
        setCep(maskedCep);

        setLogradouro(''); setBairro(''); setCidade(''); setEstado('');

        if (newCep.length === 8) {
            setIsLoading(true);
            setError(null);
            try {
                const response = await fetch(`https://viacep.com.br/ws/${newCep}/json/`);
                if (!response.ok) throw new Error('CEP não encontrado ou falha na rede');
                const data = await response.json();
                if (data.erro) { throw new Error('CEP inválido retornado pela API'); }
                setLogradouro(data.logradouro || '');
                setBairro(data.bairro || '');
                setCidade(data.localidade || '');
                setEstado(data.uf || '');
            } catch (cepError: any) {
                console.error("CEP Error:", cepError);
                setError(`Erro ao buscar CEP: ${cepError.message}`);
            } finally {
                setIsLoading(false);
            }
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    return (
        <>
            <NavBar active="cadastrar" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">Cadastrar Cliente</h2>

                    <form onSubmit={handleSubmit}>

                        {/* Caixa de Mensagem de Erro (mantida) */}
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <span className="block sm:inline">{error}</span>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                    <span className="text-2xl" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        )}

                        {/* Formulário ... */}
                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* ... Inputs com IMaskInput onde aplicável ... */}
                                <div className="mb-4">
                                    <label htmlFor="tipo_cliente" className="block mb-1">Tipo de Cliente:</label>
                                    <select id="tipo_cliente" name="tipo_cliente" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoCliente} onChange={(e) => setTipoCliente(e.target.value)}>
                                        <option value="PF">Pessoa Física</option>
                                        <option value="PJ">Pessoa Jurídica</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="nome" className="block mb-1">Nome:</label>
                                    <input type="text" id="nome" name="nome" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={nome} onChange={(e) => setNome(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="sobrenome" className="block mb-1">Sobrenome:</label>
                                    <input type="text" id="sobrenome" name="sobrenome" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={sobrenome} onChange={(e) => setSobrenome(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="sexo" className="block mb-1">Sexo:</label>
                                    <select id="sexo" name="sexo" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={sexo} onChange={(e) => setSexo(e.target.value)}>
                                        <option value="M">Masculino</option>
                                        <option value="F">Feminino</option>
                                        <option value="O">Outro</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="tipo_documento" className="block mb-1">Tipo de Documento:</label>
                                    <select id="tipo_documento" name="tipo_documento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoDocumento} onChange={(e) => { setTipoDocumento(e.target.value); setNumeroDocumento(''); }}>
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="numero_documento" className="block mb-1">Número do Documento:</label>
                                    <IMaskInput mask={tipoDocumento === 'CPF' ? cpfMask : cnpjMask} value={numeroDocumento} unmask={false} onAccept={(value) => setNumeroDocumento(value)} id="numero_documento" name="numero_documento" placeholder={tipoDocumento === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="data_nascimento" className="block mb-1">Data de Nascimento:</label>
                                    <input type="date" id="data_nascimento" name="data_nascimento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataNascimento} onChange={(e) => setDataNascimento(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="atividade_profissional" className="block mb-1">Atividade Profissional:</label>
                                    <input type="text" id="atividade_profissional" name="atividade_profissional" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={atividadeProfissional} onChange={(e) => setAtividadeProfissional(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="mb-4">
                                    <label htmlFor="celular" className="block mb-1">Celular:</label>
                                    <IMaskInput mask="(00) 00000-0000" value={celular} unmask={false} onAccept={(value) => setCelular(value)} type="tel" id="celular" name="celular" placeholder="(99) 99999-9999" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="email" className="block mb-1">E-mail:</label>
                                    <input type="email" id="email" name="email" placeholder="exemplo@dominio.com" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={email} onChange={(e) => setEmail(e.target.value)} />
                                </div>
                                <div className="mb-4 md:col-span-2">
                                    <label htmlFor="contato" className="block mb-1">Nome do Contato Principal:</label>
                                    <input type="text" id="contato" name="contato" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={contato} onChange={(e) => setContato(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div className="mb-4 md:col-span-1">
                                    <label htmlFor="cep" className="block mb-1">CEP:</label>
                                    <IMaskInput mask="00000-000" value={cep} unmask={false} onAccept={handleCepChange} id="cep" name="cep" placeholder="00000-000" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4 md:col-span-2">
                                    <label htmlFor="logradouro" className="block mb-1">Logradouro:</label>
                                    <input type="text" id="logradouro" name="logradouro" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={logradouro} onChange={(e) => setLogradouro(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="numeroCasa" className="block mb-1">Número:</label>
                                    <input type="text" id="numeroCasa" name="numeroCasa" maxLength={8} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={numeroCasa} onChange={(e) => setNumeroCasa(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="complemento" className="block mb-1">Complemento:</label>
                                    <input type="text" id="complemento" name="complemento" maxLength={100} className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={complemento} onChange={(e) => setComplemento(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="bairro" className="block mb-1">Bairro:</label>
                                    <input type="text" id="bairro" name="bairro" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={bairro} onChange={(e) => setBairro(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="cidade" className="block mb-1">Cidade:</label>
                                    <input type="text" id="cidade" name="cidade" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={cidade} onChange={(e) => setCidade(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="estado" className="block mb-1">Estado:</label>
                                    <input type="text" id="estado" name="estado" maxLength={2} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={estado} onChange={(e) => setEstado(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* <<< Mensagem de Sucesso Simples (acima do botão) >>> */}
                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botões de Ação (Botão Voltar Removido) */}
                        <div className="flex items-center justify-center gap-4 mt-6"> {/* Ajustado para centralizar único botão */}
                            <button
                                type="submit"
                                className={`px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                {isLoading ? 'Cadastrando...' : 'Cadastrar Cliente'}
                            </button>
                            {/* Link Voltar Removido */}
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos CSS Globais (mantidos) */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

================================================================================

/* --- app\clientes\deletar\page.tsx --- */
// app/clientes/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';

// Interfaces (ajuste conforme sua API)
interface ClienteParaLista {
    idCli: number; idEndereco: number; nomeCompleto: string;
    documento: string; email: string; cidadeEstado: string;
}
interface ClienteApiResponseDto {
    idCli: number; nome: string; sobrenome: string; tipoCliente: string; numeroDocumento: string;
    endereco: { codigo: number; cidade: string; estado: string; } | null;
    contato: { celular: string; email: string; } | null;
}

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Estado para mensagem de sucesso/delete

    // --- Estados para o Modal de Deleção ---
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [clienteParaDeletar, setClienteParaDeletar] = useState<ClienteParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false); // Loading específico para delete
    // -----------------------------------------

    const fetchClientes = async () => {
        setIsLoading(true); setError(null); setSuccess(null); // Limpa sucesso ao recarregar
        try {
            const response = await fetch("http://localhost:8080/rest/clientes/all"); // Endpoint GET all
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: ClienteApiResponseDto[] = await response.json();
            const clientesFormatados: ClienteParaLista[] = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0, // Pega o ID do endereço
                nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A',
                cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} - ${dto.endereco.estado || 'N/A'}` : 'N/A',
            }));
            setClientes(clientesFormatados);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchClientes(); }, []);

    // --- Função para ABRIR o modal de confirmação ---
    const handleDeleteClick = (cliente: ClienteParaLista) => {
        setClienteParaDeletar(cliente); // Guarda o cliente a ser deletado
        setShowDeleteModal(true);      // Abre o modal
        setError(null);                // Limpa erros anteriores
        setSuccess(null);              // Limpa sucessos anteriores
    };

    // --- Função para CONFIRMAR a deleção (chamada pelo modal) ---
    const confirmDelete = async () => {
        if (!clienteParaDeletar) return;

        setIsDeleting(true); // Ativa loading do delete
        setError(null);
        setSuccess(null);

        const { idCli, idEndereco } = clienteParaDeletar;

        try {
            const response = await fetch(`http://localhost:8080/rest/clientes/${idCli}/${idEndereco}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar cliente: ${errorText || response.statusText}`);
            }

            // Sucesso! Define a mensagem e remove da lista local
            setSuccess("Cliente excluído com sucesso!"); // <<< Usa setSuccess
            setClientes(prev => prev.filter(c => !(c.idCli === idCli && c.idEndereco === idEndereco)));

            // Limpa a mensagem de sucesso após alguns segundos
            setTimeout(() => { setSuccess(null); }, 5000); // 5 segundos

        } catch (err: any) {
            console.error("Erro ao deletar cliente:", err);
            setError(err.message || "Falha ao excluir cliente.");
        } finally {
            setIsDeleting(false); // Desativa loading do delete
            setShowDeleteModal(false); // Fecha o modal
            setClienteParaDeletar(null); // Limpa cliente selecionado
        }
    };

    // --- Função para CANCELAR a deleção (chamada pelo modal) ---
    const cancelDelete = () => {
        setShowDeleteModal(false);
        setClienteParaDeletar(null);
    };

    return (
        <>
            <NavBar active="clientes" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título e botão Cadastrar */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Lista de Clientes</h1>
                    <Link href="/clientes/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Cadastrar Novo Cliente
                        </button>
                    </Link>
                </div>

                {/* Mensagens de Loading, Erro e Sucesso */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando...</p>}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <span className="block sm:inline">{error}</span>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                            <span className="text-2xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}
                {success && (
                    <div className="relative mb-4 text-green-400 bg-green-900/50 p-4 pr-10 rounded border border-green-500" role="alert">
                        <span className="block sm:inline">{success}</span>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-green-400 hover:text-green-200" onClick={() => setSuccess(null)} aria-label="Fechar">
                            <span className="text-2xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}

                {/* Tabela de Clientes */}
                {!isLoading && ( // Remove !error daqui para mostrar tabela mesmo com erro de delete
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Completo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Documento</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.length === 0 ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum cliente cadastrado.</td></tr>
                            ) : (
                                clientes.map((cliente) => (
                                    <tr key={`${cliente.idCli}-${cliente.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Botão Editar */}
                                            {(cliente.idCli && cliente.idEndereco) ? ( <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}
                                            {/* Botão Deletar agora abre o modal */}
                                            <button
                                                onClick={() => handleDeleteClick(cliente)} // <<< Chama handleDeleteClick
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                                disabled={isDeleting || !cliente.idCli || !cliente.idEndereco}
                                            >
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* --- Modal de Confirmação de Deleção --- */}
            {showDeleteModal && clienteParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4"> {/* Overlay */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500"> {/* Caixa do Modal */}
                        <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir o cliente?</p>
                        {/* Mostra alguns dados do cliente para confirmação */}
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                            <p><strong>ID:</strong> {clienteParaDeletar.idCli} / End. ID: {clienteParaDeletar.idEndereco}</p>
                            <p><strong>Nome:</strong> {clienteParaDeletar.nomeCompleto}</p>
                            <p><strong>Documento:</strong> {clienteParaDeletar.documento}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button
                                type="button"
                                className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-800"
                                onClick={cancelDelete} // Chama a função de cancelar
                                disabled={isDeleting} // Desabilita enquanto deleta
                            >
                                Não, cancelar
                            </button>
                            <button
                                type="button"
                                className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-800 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                onClick={confirmDelete} // Chama a função que realmente deleta
                                disabled={isDeleting} // Desabilita enquanto deleta
                            >
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

================================================================================

/* --- app\clientes\listar\page.tsx --- */
// app/clientes/page.tsx
"use client"; // Necessário para Hooks (useState, useEffect)

import { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Importa sua NavBar

// --- Interfaces para Tipagem ---
// Interface para representar os dados do cliente como exibidos na lista
// Ajuste conforme os campos que você quer mostrar e que sua API retorna
interface ClienteParaLista {
    idCli: number;
    idEndereco: number; // Precisamos do ID do endereço para formar a chave composta para editar/deletar
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}

// Interface para tipar a resposta esperada da API (baseado no seu ClienteResponseDto)
// É uma boa prática ter isso, ajuste se seu DTO for diferente
interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: {
        codigo: number; // ID do endereço
        cidade: string;
        estado: string;
        // outros campos de endereço se precisar
    } | null;
    contato: {
        celular: string;
        email: string;
        // outros campos de contato se precisar
    } | null;
    // outros campos do ClienteResponseDto
}
// -----------------------------

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteParaLista[]>([]); // Estado para a lista formatada
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // --- Função para buscar e formatar os clientes ---
    const fetchClientes = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch("http://localhost:8080/rest/clientes/all"); // Endpoint GET all
            if (!response.ok) {
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }
            const data: ClienteApiResponseDto[] = await response.json(); // Tipando a resposta da API

            // Mapeia os dados da API para o formato que queremos exibir na tabela
            const clientesFormatados: ClienteParaLista[] = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0, // Pega o ID do endereço (ou 0 se for nulo)
                nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A', // Pega email do contato
                cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} - ${dto.endereco.estado || 'N/A'}` : 'N/A',
            }));

            setClientes(clientesFormatados);

        } catch (err: any) {
            console.error("Erro ao buscar dados da API:", err);
            setError(err.message || "Falha ao carregar dados dos clientes.");
        } finally {
            setIsLoading(false);
        }
    };

    // --- useEffect para buscar dados na montagem ---
    useEffect(() => {
        fetchClientes();
    }, []); // Array vazio executa só uma vez

    // --- Função para deletar cliente ---
    const handleDelete = async (idCliente: number, idEndereco: number) => {
        if (!idCliente || !idEndereco) {
            setError("ID inválido para exclusão.");
            return;
        }
        if (!window.confirm(`Tem certeza que deseja excluir o cliente ID ${idCliente} (Endereço ID ${idEndereco})?`)) {
            return;
        }

        setIsLoading(true); // Pode usar um loading específico para delete
        setError(null);
        try {
            // Endpoint DELETE da sua API Java usando a chave composta
            const response = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`, {
                method: 'DELETE',
            });

            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar cliente: ${errorText}`);
            }

            // Se deletou com sucesso (status 204 No Content ou 200 OK)
            alert("Cliente excluído com sucesso!");
            // Remove o cliente da lista local para atualizar a UI imediatamente
            setClientes(prevClientes => prevClientes.filter(c => !(c.idCli === idCliente && c.idEndereco === idEndereco)));

        } catch (err: any) {
            console.error("Erro ao deletar cliente:", err);
            setError(err.message || "Falha ao excluir cliente.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            {/* Passa a prop 'active' correta para a NavBar */}
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Lista de Clientes</h1>
                    {/* Botão para ir para a página de cadastro */}
                    <Link href="/clientes/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Cadastrar Novo Cliente
                        </button>
                    </Link>
                </div>

                {/* Exibição de Loading e Erro */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando clientes...</p>}
                {error && <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500">{error}</p>}

                {/* Tabela de Clientes */}
                {!isLoading && !error && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                {/* Ajuste as colunas conforme necessário */}
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Completo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Documento</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.length === 0 ? (
                                <tr>
                                    <td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum cliente cadastrado.</td>
                                </tr>
                            ) : (
                                // Mapeia a lista de clientes formatados para linhas da tabela
                                clientes.map((cliente) => (
                                    <tr key={`${cliente.idCli}-${cliente.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição (leva para a página que ainda será criada) */}
                                            <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}>
                                                <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">
                                                    Alterar
                                                </button>
                                            </Link>
                                            {/* Botão Deletar */}
                                            <button
                                                onClick={() => handleDelete(cliente.idCli, cliente.idEndereco)}
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                                disabled={isLoading} // Desabilita enquanto outra ação ocorre
                                            >
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
        </>
    );
}

================================================================================

/* --- app\inicio\page.tsx --- */
import NavBar from "@/components/nav-bar";

export default function InicioPage() {
    return (
        <>
            <NavBar active="inicio" />

            {/* --- Modificações aqui --- */}
            <main
                className="flex items-center justify-center min-h-screen text-white bg-cover bg-center bg-no-repeat"
                // Define a imagem de fundo usando valor arbitrário do Tailwind
                // e define uma cor de fundo sólida como fallback caso a imagem não carregue
                style={{
                    backgroundImage: `url('/admin-ajax.png')`, // Caminho para a imagem na pasta public
                    backgroundColor: '#012A46', // Cor de fundo de fallback
                }}
            >
                {/* O conteúdo da seção agora fica sobre a imagem de fundo */}
                <section className="bg-black/50 backdrop-blur-sm max-w-2xl p-8 m-4 rounded-xl text-center"> {/* Ajustei o fundo da seção para melhor contraste */}
                    <h1 className="mb-4 text-4xl font-bold">Bem-vindo à Oficina Virtual</h1>
                    <p className="mb-8 text-lg">
                        Descubra uma nova forma de cuidar do seu veículo com praticidade e eficiência. Experimente nossa plataforma e agende seu serviço online.
                    </p>
                    {/* Você precisa adicionar o texto ou ícone do botão aqui */}
                    <button className="px-6 py-3 font-semibold text-white transition bg-[#075985] rounded-md shadow hover:bg-[#075985]/90">
                        Agendar Serviço {/* Exemplo de texto para o botão */}
                    </button>
                </section>
            </main>
            {/* --- Fim das Modificações --- */}
        </>
    );
}
================================================================================

/* --- app\oficinaOnline\alterar\[id]\page.tsx --- */
// app/oficinaOnline/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation'; // Hooks para params e navegação
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask'; // Importado caso precise (ex: horas)

// Função auxiliar para limpar máscaras (se usar alguma)
const cleanMaskedValue = (value: string): string => {
    return value.replace(/\D/g, '');
};

// Interface para a resposta da API (igual à da listagem)
interface OficinaApiResponseDto {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadas: string;
}

export default function AlterarOficinaPage() {
    const params = useParams();
    const router = useRouter();

    // Pega o ID da URL (vem como string ou string[])
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    // --- Estados do Formulário (iniciam vazios) ---
    const [dataOficina, setDataOficina] = useState(""); // Será preenchido pelo fetch
    const [descricaoProblema, setDescricaoProblema] = useState("");
    const [diagnostico, setDiagnostico] = useState("");
    const [partesAfetadas, setPartesAfetadas] = useState("");
    const [horasTrabalhadas, setHorasTrabalhadas] = useState("");

    // --- Estados de Controle ---
    const [isLoading, setIsLoading] = useState(true); // Loading inicial dos dados
    const [isSaving, setIsSaving] = useState(false); // Loading para salvar
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    // Não precisamos do estado diagnosticoIa aqui, pois o diagnóstico já existe

    // --- useEffect para buscar dados da oficina ao carregar ---
    useEffect(() => {
        if (id) { // Só busca se o ID for válido
            setIsLoading(true); setError(null); setSuccess(null);

            const fetchOficinaData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/oficina/${id}`; // Endpoint GET por ID
                    const response = await fetch(apiUrl);

                    if (response.status === 404) { throw new Error("Registro de oficina não encontrado."); }
                    if (!response.ok) { throw new Error(`Erro ao buscar dados: ${response.statusText}`); }

                    const data: OficinaApiResponseDto = await response.json();

                    // Preenche os estados com os dados recebidos
                    setDataOficina(data.dataOficina ? data.dataOficina.split('T')[0] : '');
                    setDescricaoProblema(data.descricaoProblema || '');
                    setDiagnostico(data.diagnostico || '');
                    setPartesAfetadas(data.partesAfetadas || '');
                    setHorasTrabalhadas(data.horasTrabalhadas || '');

                } catch (err: any) { setError(err.message || "Falha ao carregar dados para edição.");
                } finally { setIsLoading(false); }
            };
            fetchOficinaData();
        } else {
            setError("ID do registro inválido na URL."); setIsLoading(false);
        }
    }, [id]); // Roda quando o ID muda (só na primeira vez, geralmente)

    // --- Manipulador para SALVAR as alterações ---
    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!id) { setError("ID inválido para salvar."); return; }

        setIsSaving(true); setError(null); setSuccess(null);

        // Monta o objeto com os dados atuais do formulário
        const oficinaData = {
            dataOficina, descricaoProblema, diagnostico,
            partesAfetadas, horasTrabalhadas
        };

        // Endpoint PUT para atualização
        const apiUrl = `http://localhost:8080/rest/oficina/${id}`;

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT', // <<< Método PUT
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(oficinaData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Update Success:", result);
            setSuccess("Registro de oficina atualizado com sucesso!"); // Mensagem de sucesso

            // Limpa a mensagem de sucesso após alguns segundos
            setTimeout(() => { setSuccess(null); }, 5000);

            // Não limpamos o formulário na edição

        } catch (err: any) { setError(err.message || "Falha ao salvar alterações.");
        } finally { setIsSaving(false); }
    };

    // --- Renderização ---
    if (isLoading) { /* ... código de loading ... */
        return (
            <>
                <NavBar active="oficinaOnline" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados do registro...</p>
                </main>
            </>
        );
    }
    // Mostra erro fatal se não conseguiu carregar os dados iniciais
    if (error && !descricaoProblema) { // Verifica um campo que deveria ter sido carregado
        return (
            <>
                <NavBar active="oficinaOnline" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                        <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">Erro ao Carregar</h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <Link href="/oficinaOnline"> {/* Link para a lista principal */}
                                <button className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                    Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    // Renderiza o formulário de edição
    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-2xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">
                        Alterar Registro de Oficina (ID: {id})
                    </h2>

                    {/* Formulário chama handleUpdate */}
                    <form onSubmit={handleUpdate}>

                        {/* Mensagem de Erro (para salvar ou buscar CEP) */}
                        {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                        {/* Mensagem de sucesso será exibida acima dos botões */}

                        {/* Campos do Formulário - Reutiliza estrutura do cadastro */}
                        {/* Os values e onChanges estão ligados aos estados desta página */}
                        <div className="mb-4">
                            <label htmlFor="dataOficina" className="block mb-1">Data:</label>
                            <input type="date" id="dataOficina" name="dataOficina" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataOficina} onChange={(e) => setDataOficina(e.target.value)} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="descricaoProblema" className="block mb-1">Descrição do Problema (Cliente):</label>
                            <textarea id="descricaoProblema" name="descricaoProblema" rows={4} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={descricaoProblema} onChange={(e) => setDescricaoProblema(e.target.value)} maxLength={500} />
                        </div>
                        {/* Não colocamos o botão de buscar IA aqui, pois o diagnóstico já existe */}
                        <div className="mb-4">
                            <label htmlFor="partesAfetadas" className="block mb-1">Partes Afetadas:</label>
                            <input type="text" id="partesAfetadas" name="partesAfetadas" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={partesAfetadas} onChange={(e) => setPartesAfetadas(e.target.value)} maxLength={500} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="diagnostico" className="block mb-1">Diagnóstico:</label>
                            <textarea id="diagnostico" name="diagnostico" rows={4} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={diagnostico} onChange={(e) => setDiagnostico(e.target.value)} maxLength={4000} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="horasTrabalhadas" className="block mb-1">Horas Trabalhadas (Texto):</label>
                            <input type="text" id="horasTrabalhadas" name="horasTrabalhadas" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={horasTrabalhadas} onChange={(e) => setHorasTrabalhadas(e.target.value)} maxLength={5} placeholder="Ex: 2.5" />
                            <p className="text-xs text-slate-400 mt-1">Nota: Campo definido como texto no backend.</p>
                        </div>

                        {/* Mensagem de Sucesso Simples */}
                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button type="submit" className={`px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isSaving || isLoading}>
                                {isSaving ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            {/* Link para voltar para a lista principal da oficina */}
                            <Link href="/oficinaOnline" className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

================================================================================

/* --- app\oficinaOnline\buscar\page.tsx --- */
// app/oficinaOnline/buscar/page.tsx
"use client";

import { useState, useEffect, ChangeEvent, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';

// --- Interfaces para Tipagem (Reutilizadas/Adaptadas da Listagem) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string; // Pode ser útil mostrar
}

interface OficinaApiResponseDto {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadas: string;
}
// --------------------------------------------------------------------

// Define os tipos de busca possíveis para Oficina
type TipoBuscaOficina = 'id' | 'descricao' | 'diagnostico';

export default function BuscarOficinaPage() {
    const [todasOficinas, setTodasOficinas] = useState<OficinaParaLista[]>([]); // Guarda todos os registros
    const [resultadosBusca, setResultadosBusca] = useState<OficinaParaLista[]>([]); // Guarda os resultados filtrados
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaOficina>('descricao'); // <<< Padrão: buscar por descrição
    const [termoBusca, setTermoBusca] = useState('');
    const [isLoading, setIsLoading] = useState(false); // Loading para fetch inicial
    const [isSearching, setIsSearching] = useState(false); // Loading para busca/filtro
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Para msg de delete
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // --- Estados para o Modal de Deleção ---
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    // -----------------------------------------

    const router = useRouter();

    // --- Função para buscar TODOS os registros da API (apenas uma vez) ---
    const fetchTodasOficinas = async () => {
        if (todasOficinas.length > 0) return;
        setIsLoading(true); setError(null); setSuccess(null);
        try {
            const response = await fetch("http://localhost:8080/rest/oficina/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: OficinaApiResponseDto[] = await response.json();
            const oficinasFormatadas: OficinaParaLista[] = data.map(dto => ({
                id: dto.id,
                dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A',
                descricaoProblema: dto.descricaoProblema || 'N/A',
                diagnostico: dto.diagnostico || 'Pendente',
                horasTrabalhadas: dto.horasTrabalhadas || 'N/A',
            }));
            setTodasOficinas(oficinasFormatadas);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados base da oficina.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchTodasOficinas(); }, []);

    // --- Função para realizar a busca/filtro (CLIENT-SIDE) ---
    const handleSearch = (event?: FormEvent<HTMLFormElement>) => {
        if (event) event.preventDefault();
        setIsSearching(true); setBuscaRealizada(true); setSuccess(null); setError(null);
        const query = termoBusca.trim().toLowerCase();
        if (!query) { setResultadosBusca([]); setIsSearching(false); return; }

        let resultados: OficinaParaLista[] = [];

        switch (tipoBusca) {
            case 'id':
                resultados = todasOficinas.filter(o => o.id.toString() === query.replace(/\D/g, ''));
                break;
            case 'descricao':
                resultados = todasOficinas.filter(o => o.descricaoProblema.toLowerCase().includes(query));
                break;
            case 'diagnostico':
                resultados = todasOficinas.filter(o => o.diagnostico.toLowerCase().includes(query));
                break;
            default:
                resultados = [];
        }
        setResultadosBusca(resultados);
        setIsSearching(false);
    };

    // --- Funções de Deleção com Modal (adaptadas para Oficina) ---
    const handleDeleteClick = (oficina: OficinaParaLista) => {
        setOficinaParaDeletar(oficina); setShowDeleteModal(true); setError(null); setSuccess(null); };

    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        setIsDeleting(true); setError(null); setSuccess(null);
        const { id } = oficinaParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/oficina/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`); }
            setShowDeleteModal(false); setShowDeleteSuccessModal(true);
            // Remove da lista completa E dos resultados da busca atual
            setTodasOficinas(prev => prev.filter(o => o.id !== id));
            setResultadosBusca(prev => prev.filter(o => o.id !== id));
        } catch (err: any) { setError(err.message || "Falha ao excluir registro."); setShowDeleteModal(false);
        } finally { setIsDeleting(false); }
    };

    const cancelDelete = () => { setShowDeleteModal(false); setOficinaParaDeletar(null); };
    const closeSuccessModal = () => { setShowDeleteSuccessModal(false); setOficinaParaDeletar(null); };
    // -------------------------------------------------------------

    // Define placeholder dinâmico
    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'id': return 'Digite o ID do Registro...';
            case 'descricao': return 'Digite parte da descrição do problema...';
            case 'diagnostico': return 'Digite parte do diagnóstico...';
            default: return 'Digite o termo de busca...';
        }
    }

    return (
        <>
            <NavBar active="oficinaOnline" /> {/* Define item ativo na NavBar */}

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Buscar Registros da Oficina</h1>

                {/* Formulário de Busca */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    {/* Select para escolher o tipo de busca */}
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select
                            id="tipoBusca"
                            name="tipoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={tipoBusca}
                            onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaOficina); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); }}
                        >
                            <option value="descricao">Descrição Problema</option>
                            <option value="id">ID Registro</option>
                            <option value="diagnostico">Diagnóstico</option>
                        </select>
                    </div>

                    {/* Input único para o termo de busca */}
                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input
                            type={tipoBusca === 'id' ? 'number' : 'text'}
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={termoBusca}
                            onChange={(e) => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()}
                            required
                        />
                    </div>

                    <button type="submit" className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap" disabled={isLoading || isSearching}>
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Exibição de Loading Inicial e Erro/Sucesso (delete) */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando dados base...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                {/* Mensagem de sucesso do delete será via modal */}

                {/* Tabela de Resultados da Busca */}
                {!isLoading && buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Descrição Problema</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Diagnóstico</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum registro encontrado.</td></tr>
                            ) : (
                                resultadosBusca.map((oficina) => (
                                    <tr key={oficina.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>{oficina.descricaoProblema}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>{oficina.diagnostico}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição */}
                                            {oficina.id ? (
                                                <Link href={`/oficinaOnline/alterar/${oficina.id}`}>
                                                    <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Alterar</button>
                                                </Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}
                                            {/* Botão Deletar */}
                                            <button onClick={() => handleDeleteClick(oficina)} className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded" disabled={isDeleting || !oficina.id}>
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* Modal de Confirmação de Deleção */}
            {showDeleteModal && oficinaParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir este registro?</p>
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                            <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                            <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                            <p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>
                                Não, cancelar
                            </button>
                            <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Modal de Sucesso da Deleção */}
            {showDeleteSuccessModal && (
                <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                        <p className="text-white mb-6 text-center">Registro de oficina excluído.</p>
                        <div className="flex justify-center">
                            <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

================================================================================

/* --- app\oficinaOnline\cadastrar\page.tsx --- */
// app/oficinaOnline/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';

// Função auxiliar para limpar máscaras (mantida, pode ser útil no futuro)
const cleanMaskedValue = (value: string): string => {
    return value.replace(/\D/g, '');
};

export default function CadastrarOficinaPage() {

    // Pega a data atual no formato YYYY-MM-DD
    const today = new Date().toISOString().split('T')[0];
    const initialState = {
        dataOficina: today, // <<< Data inicial é hoje
        descricaoProblema: "", diagnostico: "",
        partesAfetadas: "", horasTrabalhadas: ""
    };

    // Estados do Formulário
    const [dataOficina, setDataOficina] = useState(initialState.dataOficina); // <<< Estado da data
    const [descricaoProblema, setDescricaoProblema] = useState(initialState.descricaoProblema);
    const [diagnostico, setDiagnostico] = useState(initialState.diagnostico);
    const [partesAfetadas, setPartesAfetadas] = useState(initialState.partesAfetadas);
    const [horasTrabalhadas, setHorasTrabalhadas] = useState(initialState.horasTrabalhadas);

    // Estados de Controle
    const [isSaving, setIsSaving] = useState(false);
    const [isIaLoading, setIsIaLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [diagnosticoIa, setDiagnosticoIa] = useState<string | null>(null);

    // Função para Limpar o Formulário
    const resetForm = () => {
        setDataOficina(initialState.dataOficina); // <<< Reseta para data atual do carregamento
        setDescricaoProblema(initialState.descricaoProblema);
        setDiagnostico(initialState.diagnostico);
        setPartesAfetadas(initialState.partesAfetadas);
        setHorasTrabalhadas(initialState.horasTrabalhadas);
        setError(null);
        setDiagnosticoIa(null);
    };

    // Função para BUSCAR diagnóstico na IA (mantida)
    const handleBuscaIa = async () => {
        if (!descricaoProblema || descricaoProblema.trim() === '') {
            setError("Por favor, descreva o problema antes de buscar na IA."); return; }
        setIsIaLoading(true); setError(null); setDiagnosticoIa(null); setSuccess(null);
        try {
            const apiUrl = `/rest/ia/diagnostico?descricao=${encodeURIComponent(descricaoProblema)}`;
            const response = await fetch(apiUrl);
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao buscar diagnóstico IA: ${errorText || response.statusText}`);
            }
            const diagnosticoGerado = await response.text();
            setDiagnosticoIa(diagnosticoGerado);
            setDiagnostico(diagnosticoGerado);
        } catch (err: any) {
            setError(err.message || "Falha ao comunicar com o serviço de IA.");
            setDiagnosticoIa("Falha ao obter diagnóstico.");
        } finally { setIsIaLoading(false); }
    };

    // Função para SALVAR o registro completo (mantida)
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsSaving(true); setError(null); setSuccess(null);

        const oficinaData = { // <<< O estado dataOficina já tem o valor correto
            dataOficina, descricaoProblema, diagnostico,
            partesAfetadas, horasTrabalhadas
        };

        console.log('Salvando registro no BD:', JSON.stringify(oficinaData, null, 2));
        const apiUrl = "http://localhost:8080/rest/oficina";

        try {
            const response = await fetch(apiUrl, {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(oficinaData), });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`); }
            const result = await response.json();
            console.log("Save Success:", result);
            setSuccess("Registro de oficina salvo com sucesso!");
            resetForm();
            setTimeout(() => { setSuccess(null); }, 5000);
        } catch (err: any) { setError(err.message || "Falha ao salvar registro de oficina.");
        } finally { setIsSaving(false); }
    };

    // Formata a data para exibição (DD/MM/YYYY)
    const formattedDate = new Date(dataOficina + 'T00:00:00').toLocaleDateString('pt-BR');

    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-2xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">Novo Registro de Oficina / Diagnóstico</h2>
                    <form onSubmit={handleSubmit}>
                        {/* Mensagens de Erro/Sucesso */}
                        {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                        {/* Mensagem de sucesso será exibida acima dos botões */}

                        {/* Campos do Formulário */}
                        {/* === CAMPO DE DATA ALTERADO === */}
                        <div className="mb-4">
                            <label htmlFor="dataOficinaDisplay" className="block mb-1">Data do Registro:</label>
                            <p
                                id="dataOficinaDisplay"
                                className="w-full p-2 rounded bg-slate-700 border border-slate-600 text-slate-300" // Estilo para parecer "travado"
                            >
                                {formattedDate} {/* Exibe a data formatada */}
                            </p>
                            {/* O valor real vem do estado 'dataOficina' e é enviado no handleSubmit */}
                        </div>
                        {/* ============================== */}

                        <div className="mb-4">
                            <label htmlFor="descricaoProblema" className="block mb-1">Descrição do Problema (Cliente):</label>
                            <textarea id="descricaoProblema" name="descricaoProblema" rows={4} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={descricaoProblema} onChange={(e) => setDescricaoProblema(e.target.value)} maxLength={500} />
                        </div>
                        <div className="mb-6 text-center">
                            <button type="button" onClick={handleBuscaIa} className={`px-5 py-2 font-semibold text-white bg-indigo-600 rounded-md shadow hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isIaLoading ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isIaLoading || !descricaoProblema}>
                                {isIaLoading ? 'Buscando na IA...' : 'Buscar Diagnóstico na IA'}
                            </button>
                        </div>
                        {diagnosticoIa !== null && (
                            <div className="mb-4 p-4 bg-slate-800 border border-slate-700 rounded">
                                <label className="block mb-2 font-semibold text-sky-300">Resultado da IA:</label>
                                <pre className="text-sm whitespace-pre-wrap break-words">{diagnosticoIa}</pre>
                            </div>
                        )}

                        <div className="mb-4">
                            <label htmlFor="diagnostico" className="block mb-1">Diagnóstico Final (Editável):</label>
                            <textarea id="diagnostico" name="diagnostico" rows={4} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={diagnostico} onChange={(e) => setDiagnostico(e.target.value)} maxLength={4000} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="partesAfetadas" className="block mb-1">Partes Afetadas (Sugestão/Manual):</label>
                            <input type="text" id="partesAfetadas" name="partesAfetadas" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={partesAfetadas} onChange={(e) => setPartesAfetadas(e.target.value)} maxLength={500} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="horasTrabalhadas" className="block mb-1">Tempo para gasto para solução: (Texto):</label>
                            <input type="text" id="horasTrabalhadas" name="horasTrabalhadas" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={horasTrabalhadas} onChange={(e) => setHorasTrabalhadas(e.target.value)} maxLength={5} placeholder="Ex: 2.5" />
                            <p className="text-xs text-slate-400 mt-1">Nota: Campo definido como texto no backend.</p>
                        </div>

                        {/* Mensagem de Sucesso Simples */}
                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botão de Ação Único (Salvar) */}
                        <div className="flex items-center justify-center gap-4 mt-6">
                            <button type="submit" className={`px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isSaving || isIaLoading}>
                                {isSaving ? 'Salvando...' : 'Salvar Registro'}
                            </button>
                            {/* Botão Voltar Removido */}
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}

================================================================================

/* --- app\oficinaOnline\deletar\page.tsx --- */
// app/oficinaOnline/page.tsx OU app/oficinaOnline/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Para navegação programática se necessário
import NavBar from '@/components/nav-bar'; // Importa sua NavBar

// --- Interfaces para Tipagem (Ajuste conforme sua API) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string;
}
interface OficinaApiResponseDto {
    id: number; dataOficina: string; descricaoProblema: string;
    diagnostico: string; partesAfetadas: string; horasTrabalhadas: string;
}
// ---------------------------------------------------------

export default function ListarOficinaPage() {
    const [oficinas, setOficinas] = useState<OficinaParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // --- Estados para o Modal de Deleção --- // <<< INÍCIO LÓGICA DELETE
    const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    // ----------------------------------------- // <<< FIM LÓGICA DELETE

    const router = useRouter();

    // --- Função para buscar e formatar os registros de oficina ---
    const fetchOficinas = async () => {
        setIsLoading(true); setError(null);
        // Limpa modais ao recarregar
        setShowDeleteConfirmModal(false); setShowDeleteSuccessModal(false); setOficinaParaDeletar(null);
        try {
            const response = await fetch("http://localhost:8080/rest/oficina/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: OficinaApiResponseDto[] = await response.json();
            const oficinasFormatadas: OficinaParaLista[] = data.map(dto => ({
                id: dto.id,
                dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A',
                descricaoProblema: dto.descricaoProblema || 'N/A',
                diagnostico: dto.diagnostico || 'Pendente',
                horasTrabalhadas: dto.horasTrabalhadas || 'N/A',
            }));
            setOficinas(oficinasFormatadas);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados da oficina.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchOficinas(); }, []);

    // --- Funções para o fluxo de deleção com modal --- // <<< INÍCIO LÓGICA DELETE
    const handleDeleteClick = (oficina: OficinaParaLista) => {
        setOficinaParaDeletar(oficina);
        setShowDeleteConfirmModal(true);
        setError(null);
    };

    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        setIsDeleting(true); setError(null);
        const { id } = oficinaParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/oficina/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`);
            }
            setShowDeleteConfirmModal(false);
            setShowDeleteSuccessModal(true); // Mostra modal de sucesso
            setOficinas(prev => prev.filter(o => o.id !== id)); // Remove da lista local
        } catch (err: any) {
            setError(err.message || "Falha ao excluir registro.");
            setShowDeleteConfirmModal(false);
        } finally {
            setIsDeleting(false);
            // Não limpa oficinaParaDeletar aqui para usar no modal de sucesso se precisar
        }
    };

    const cancelDelete = () => {
        setShowDeleteConfirmModal(false);
        setOficinaParaDeletar(null);
    };

    const closeSuccessModal = () => {
        setShowDeleteSuccessModal(false);
        setOficinaParaDeletar(null);
        // Poderia adicionar navegação aqui se quisesse: router.push('/algum-lugar');
    };
    // ---------------------------------------------------- // <<< FIM LÓGICA DELETE

    return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título e botão Cadastrar */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Registros da Oficina Online</h1>
                    <Link href="/oficinaOnline/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Novo Diagnóstico
                        </button>
                    </Link>
                </div>

                {/* Mensagens */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                {/* A mensagem de sucesso agora é o modal */}

                {/* Tabela de Registros */}
                {!isLoading && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Descrição Problema</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Diagnóstico</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {oficinas.length === 0 && !isLoading ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum registro encontrado.</td></tr>
                            ) : (
                                oficinas.map((oficina) => (
                                    <tr key={oficina.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>{oficina.descricaoProblema}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>{oficina.diagnostico}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição */}
                                            {(oficina.id) ? ( <Link href={`/oficinaOnline/alterar/${oficina.id}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}

                                            {/* Botão Deletar */} // <<< INÍCIO LÓGICA DELETE
                                            <button
                                            onClick={() => handleDeleteClick(oficina)} // Chama função para abrir modal
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            disabled={isDeleting || !oficina.id}
                                            >
                                            Deletar
                                        </button>
                                        {/* <<< FIM LÓGICA DELETE */}
                                    </td>
                                </tr>
                                ))
                                )}
                            </tbody>
                        </table>
                    </div>
                    )}
            </main>

            {/* --- Modal de Confirmação de Deleção --- */} // <<< INÍCIO LÓGICA DELETE
            {showDeleteConfirmModal && oficinaParaDeletar && (
            <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}>
                    <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                    <p className="text-white mb-3">Tem certeza que deseja excluir este registro?</p>
                    <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                        <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                        <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                        <p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p>
                    </div>
                    <div className="flex justify-end gap-4">
                        <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>
                            Não, cancelar
                        </button>
                        <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                            {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                        </button>
                    </div>
                </div>
            </div>
            )}

            {/* --- Modal de Sucesso da Deleção --- */}
            {showDeleteSuccessModal && (
            <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                    <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                    <p className="text-white mb-6 text-center">Registro de oficina excluído.</p>
                    <div className="flex justify-center">
                        <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>
                            OK
                        </button>
                    </div>
                </div>
            </div>
            )}
            {/* <<< FIM LÓGICA DELETE */}
        </>
    );
}

================================================================================

/* --- app\oficinaOnline\listar\page.tsx --- */
// app/oficinaOnline/listar/page.tsx (Código Original Revisado com Logs Extras)
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';

// --- Interfaces para Tipagem (Verifique se corresponde à sua API) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string; // Data formatada
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string;
}
interface OficinaApiResponseDto {
    id: number;
    dataOficina: string; // Vem como YYYY-MM-DD
    descricaoProblema: string | null;
    diagnostico: string | null;
    partesAfetadas: string | null; // Campo existe na API, mas não usado na lista
    horasTrabalhadas: string | null;
}
// --------------------------------------------------------------------

export default function ListarOficinaPage() {
    // Log Inicial - Fora de hooks/funções
    console.log("[Render] ListarOficinaPage - Iniciando renderização/re-renderização do componente.");

    const [oficinas, setOficinas] = useState<OficinaParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // --- Estados para o Modal de Deleção ---
    const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    // -----------------------------------------

    // Hooks devem ser chamados no nível superior
    const router = useRouter();
    console.log("[Render] Hooks useState e useRouter inicializados.");

    // --- Função para buscar e formatar os registros ---
    const fetchOficinas = async () => {
        console.log("[Fetch] Iniciando fetchOficinas...");
        setIsLoading(true); // Garante que isLoading é true ao iniciar
        setError(null);
        setShowDeleteConfirmModal(false);
        setShowDeleteSuccessModal(false);
        setOficinaParaDeletar(null);

        const apiUrl = "http://localhost:8080/rest/oficina/all";
        console.log(`[Fetch] Tentando buscar dados de: ${apiUrl}`);

        try {
            console.log("[Fetch] Antes do 'await fetch(apiUrl)'...");
            const response = await fetch(apiUrl);
            console.log(`[Fetch] Resposta recebida. Status: ${response.status}, OK: ${response.ok}`);

            if (!response.ok) {
                let errorBody = null;
                try {
                    errorBody = await response.text();
                    console.error("[Fetch] Corpo do erro da API (status não OK):", errorBody);
                } catch (e) {
                    console.warn("[Fetch] Não foi possível ler o corpo do erro da API (status não OK).");
                }
                // Joga um erro mais descritivo
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}. ${errorBody || '(Sem corpo de erro)'}`);
            }

            // Trata caso de 204 No Content (sem corpo JSON)
            if (response.status === 204) {
                console.log("[Fetch] Recebido status 204 (No Content). Definindo lista como vazia.");
                setOficinas([]);
            } else {
                console.log("[Fetch] Antes do 'await response.json()'...");
                const data: OficinaApiResponseDto[] | any = await response.json(); // Use 'any' temporariamente para verificar
                console.log('[Fetch] Dados brutos recebidos (após .json()):', data);

                // Verificação mais robusta se é um array
                if (!Array.isArray(data)) {
                    console.error("[Fetch] ERRO CRÍTICO: Resposta da API não é um array.", data);
                    throw new Error("Formato de resposta da API inválido (não é um array).");
                }

                console.log("[Fetch] Antes do 'data.map(...)'...");
                const oficinasFormatadas: OficinaParaLista[] = data.map((dto, index) => {
                    console.log(`[Fetch][Map] Mapeando item ${index}, ID: ${dto?.id}`); // Log para cada item
                    if (!dto || typeof dto !== 'object') {
                        console.warn(`[Fetch][Map] Item ${index} inválido encontrado: `, dto);
                        // Retorna um objeto inválido ou pula, dependendo da sua necessidade
                        // Aqui vamos pular para evitar erros, mas idealmente a API não deveria retornar isso
                        return null;
                    }
                    // Validação básica se o ID existe antes de prosseguir
                    if (dto.id === undefined || dto.id === null) {
                        console.warn(`[Fetch][Map] Item ${index} sem ID: `, dto);
                        return null; // Pula item sem ID
                    }
                    try {
                        const dataFormatada = dto.dataOficina
                            ? new Date(dto.dataOficina + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) // Adicionado Z para UTC explícito
                            : 'N/A';

                        return {
                            id: dto.id,
                            dataOficina: dataFormatada,
                            descricaoProblema: dto.descricaoProblema || '',
                            diagnostico: dto.diagnostico || 'Pendente',
                            horasTrabalhadas: dto.horasTrabalhadas || '',
                        };
                    } catch(mapError: any) {
                        console.error(`[Fetch][Map] Erro ao mapear item ${index} (ID: ${dto.id}):`, mapError, "DTO Original:", dto);
                        return null; // Retorna null se houver erro no mapeamento individual
                    }

                }).filter(item => item !== null) as OficinaParaLista[]; // Filtra itens que falharam no map

                console.log('[Fetch] Dados formatados para lista (após .map e .filter):', oficinasFormatadas);

                console.log("[Fetch] Antes do 'setOficinas(...)'...");
                setOficinas(oficinasFormatadas);
                console.log("[Fetch] Estado 'oficinas' atualizado com sucesso.");
            }

        } catch (err: any) {
            // Log aprimorado do erro capturado
            console.error("!!!!!!!! ERRO CAPTURADO NO BLOCO CATCH DO fetchOficinas !!!!!!!");
            console.error("[Fetch] Objeto de Erro Completo:", err); // Loga o objeto de erro inteiro
            console.error("[Fetch] Mensagem de Erro:", err.message);
            console.error("[Fetch] Stack Trace (se disponível):", err.stack);
            setError(err.message || "Falha ao carregar dados da oficina. Verifique o console."); // Mensagem mais genérica na UI
        } finally {
            console.log("[Fetch] Antes do 'setIsLoading(false)'...");
            setIsLoading(false);
            console.log("[Fetch] fetchOficinas finalizado (bloco finally executado).");
        }
    };

    useEffect(() => {
        console.log("[Effect] useEffect executando. Chamando fetchOficinas...");
        fetchOficinas();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // Roda apenas uma vez ao montar o componente

    // --- Funções de Deleção (sem alterações, mas com logs adicionados) ---
    const handleDeleteClick = (oficina: OficinaParaLista) => {
        console.log(`[Delete] Botão deletar clicado para ID: ${oficina.id}`);
        setOficinaParaDeletar(oficina); setShowDeleteConfirmModal(true); setError(null); };
    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        const { id } = oficinaParaDeletar;
        console.log(`[Delete] Confirmando exclusão para ID: ${id}`);
        setIsDeleting(true); setError(null);
        try {
            const deleteUrl = `http://localhost:8080/rest/oficina/${id}`;
            console.log(`[Delete] Tentando fetch DELETE para: ${deleteUrl}`);
            const response = await fetch(deleteUrl, { method: 'DELETE' });
            console.log(`[Delete] Resposta recebida. Status: ${response.status}, OK: ${response.ok}`);
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`); }
            setShowDeleteConfirmModal(false); setShowDeleteSuccessModal(true);
            console.log(`[Delete] Antes do 'setOficinas()' para remover ID: ${id}`);
            setOficinas(prev => prev.filter(o => o.id !== id));
            console.log(`[Delete] Registro ID ${id} removido do estado local 'oficinas'.`);
        } catch (err: any) {
            console.error("!!!!!!!! ERRO CAPTURADO NO confirmDelete !!!!!!!", err);
            setError(err.message || "Falha ao excluir registro.");
            setShowDeleteConfirmModal(false);
        } finally {
            console.log(`[Delete] Finalizando confirmDelete para ID: ${id} (bloco finally).`);
            setIsDeleting(false);
        }
    };
    const cancelDelete = () => { setShowDeleteConfirmModal(false); setOficinaParaDeletar(null); };
    const closeSuccessModal = () => { setShowDeleteSuccessModal(false); setOficinaParaDeletar(null); };
    // ----------------------------------------------------

    // Log de estado antes do return
    console.log(`[Render] Renderizando JSX... Estado atual: isLoading=${isLoading}, error='${error}', oficinas.length=${oficinas.length}`);

    return (
        <>
            {/* NavBar fora do main para ficar no topo */}
            <NavBar active="oficinaOnline" />

            {/* Conteúdo principal da página */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-[calc(100vh-var(--navbar-height,80px))] text-white"> {/* Ajuste min-h se necessário */}
                {console.log("[Render JSX] Renderizando <main>...")}

                {/* Cabeçalho da Página */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Registros da Oficina Online</h1>
                    <Link href="/oficinaOnline/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Novo Diagnóstico
                        </button>
                    </Link>
                </div>

                {/* Mensagens de Loading e Erro */}
                {isLoading && (
                    <>
                        {console.log("[Render JSX] Renderizando mensagem 'Carregando...'")}
                        <p className="text-center text-sky-300 py-4">Carregando...</p>
                    </>
                )}
                {error && (
                    <>
                        {console.error(`[Render JSX] Renderizando mensagem de ERRO: ${error}`)}
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                            <strong className="font-bold">Erro: </strong>
                            <span className="block sm:inline">{error}</span>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                <span className="text-2xl" aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </>
                )}

                {/* Tabela de Registros - Só renderiza se não estiver carregando E não houver erro */}
                {!isLoading && !error && (
                    <>
                        {console.log("[Render JSX] Renderizando DIV da tabela...")}
                        <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                            <table className="min-w-full table-auto">
                                <thead className="bg-slate-800 border-b border-slate-700">
                                <tr>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Descrição Problema</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Diagnóstico</th>
                                    <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                                </tr>
                                </thead>
                                <tbody className="divide-y divide-slate-700">
                                {console.log(`[Render Table Body] Condição: oficinas.length === 0 ? ${oficinas.length === 0}`)}
                                {oficinas.length === 0 ? (
                                    <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum registro encontrado.</td></tr>
                                ) : (
                                    oficinas.map((oficina, index) => {
                                        // Adicionado log dentro do map para cada linha
                                        console.log(`[Render Table Map] Renderizando linha ${index}, ID: ${oficina?.id}`);
                                        if (!oficina) { // Verificação extra
                                            console.warn(`[Render Table Map] Item 'oficina' inválido no índice ${index}`);
                                            return null; // Não renderiza linha se o item for inválido
                                        }
                                        return (
                                            <tr key={oficina.id} className="hover:bg-slate-800/50">
                                                <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                                <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                                <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>{oficina.descricaoProblema}</td>
                                                <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>{oficina.diagnostico}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                                    {(oficina.id) ? ( <Link href={`/oficinaOnline/alterar/${oficina.id}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                                    ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}
                                                    <button onClick={() => handleDeleteClick(oficina)} className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded" disabled={isDeleting || !oficina.id}>
                                                        Deletar
                                                    </button>
                                                </td>
                                            </tr>
                                        );
                                    })
                                )}
                                </tbody>
                            </table>
                        </div>
                    </>
                )}
                {console.log("[Render] Fim da renderização do componente ListarOficinaPage")}
            </main>

            {/* Modais de Deleção (sem alterações) */}
            {showDeleteConfirmModal && oficinaParaDeletar && ( <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}><div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}><h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3><p className="text-white mb-3">Tem certeza?</p><div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'><p><strong>ID:</strong> {oficinaParaDeletar.id}</p><p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p><p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p></div><div className="flex justify-end gap-4"><button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>Não</button><button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>{isDeleting ? 'Excluindo...' : 'Sim'}</button></div></div></div> )}
            {showDeleteSuccessModal && ( <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}><div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}><h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3><p className="text-white mb-6 text-center">Registro excluído.</p><div className="flex justify-center"><button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>OK</button></div></div></div> )}
        </>
    );
}
================================================================================

/* --- app\pagamento\page.tsx --- */
import NavBar from "@/components/nav-bar";

export default function PagamentoPage(){
    return(
        <>
            <NavBar active="pagamento"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Pagamento</h2>
                </div>
            </main>
        </>

    )
}
================================================================================

/* --- app\relatorio\page.tsx --- */
// app/relatorio/page.tsx
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho se necessário

export default function RelatoriosPage() {
    return (
        <>
            <NavBar active="relatorio"/> {/* Marca "Relatório" como ativo aqui */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-8 text-center">Central de Relatórios</h1>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {/* Card para Agendamentos Futuros */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Agendamentos Futuros</h2>
                        <p className="text-slate-300 mb-4">Visualize os próximos agendamentos registrados.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/agendamentos-futuros">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Contagem Mensal (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Contagem Mensal</h2>
                        <p className="text-slate-300 mb-4">Veja a quantidade de agendamentos por mês.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/contagem-mensal">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Histórico por Cliente (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Histórico por Cliente</h2>
                        <p className="text-slate-300 mb-4">Consulte o histórico de agendamentos de um cliente.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/historico-cliente">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Card para Serviços Agendados (Exemplo) */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-lg hover:shadow-sky-500/30 transition-shadow">
                        <h2 className="text-xl font-semibold mb-3 text-sky-400">Serviços Agendados</h2>
                        <p className="text-slate-300 mb-4">Detalhes dos serviços e diagnósticos agendados.</p>
                        {/* Link correto para a subpasta */}
                        <Link href="/relatorio/servicos-agendados">
                            <button className="w-full px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                                Ver Relatório
                            </button>
                        </Link>
                    </div>

                    {/* Adicione mais cards para outros relatórios aqui */}

                </div>
            </main>
        </>
    );
}
================================================================================

/* --- app\relatorio\agendamentos-futuros\page.tsx --- */
// app/relatorio/agendamentos-futuros/page.tsx
"use client";

import { useState, useEffect } from 'react';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho se necessário

// --- Interfaces ---
interface AgendamentoParaLista { id: number; dataAgendamento: string; observacao: string; }
interface PaginatedAgendaResponse { content: AgendamentoApiResponseDto[]; totalPages: number; totalElements: number; number: number; size: number; }
interface AgendamentoApiResponseDto { id: number; dataAgendamento: string; observacao: string | null; }
// ----------------

export default function RelatorioAgendamentosFuturosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(15);

    const fetchAgendamentosFuturos = async (page = 0) => {
        setIsLoading(true);
        setError(null);

        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        const dataInicioFiltro = `${year}-${month}-${day}`;

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'dataAgendamento,asc',
            dataInicio: dataInicioFiltro
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.info("Buscando agendamentos futuros:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 400) {
                    const errorData = await response.json().catch(() => ({ message: "Requisição inválida (400)." }));
                    throw new Error(errorData.message || `Erro HTTP ${response.status}`);
                }
                // Trata outros erros comuns
                if (response.status === 404) { throw new Error("Endpoint não encontrado (404). Verifique a URL da API."); }
                if (response.status >= 500) { throw new Error(`Erro no servidor (${response.status}). Tente novamente mais tarde.`); }

                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }

            if (response.status === 204) { // No Content
                setAgendamentos([]); setTotalPages(0); setCurrentPage(0);
                console.info("Nenhum agendamento futuro encontrado.");
                return;
            }

            const data: PaginatedAgendaResponse = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                observacao: dto.observacao || '',
            }));

            setAgendamentos(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);

        } catch (err: any) {
            // Trata erro de fetch (rede, etc.)
            if (err instanceof TypeError && err.message === "Failed to fetch") {
                setError("Não foi possível conectar ao servidor. Verifique se o backend está rodando e acessível.");
            } else {
                setError(err.message || "Falha ao carregar relatório de agendamentos futuros.");
            }
            setAgendamentos([]); setTotalPages(0);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchAgendamentosFuturos(currentPage);
    }, [currentPage, pageSize]);

    const handlePreviousPage = () => { if (currentPage > 0) { fetchAgendamentosFuturos(currentPage - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { fetchAgendamentosFuturos(currentPage + 1); } };

    return (
        <>
            <NavBar active="relatorio-agendamentos-futuros"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Relatório: Agendamentos Futuros</h1>

                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando relatório...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Agendada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {agendamentos.length === 0 && !error ? ( // Mostra apenas se não houver erro
                                <tr><td colSpan={3} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento futuro encontrado.</td></tr>
                            ) : (
                                agendamentos.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-lg break-words" title={agendamento.observacao}>{agendamento.observacao}</td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed"> Anterior </button>
                        <span className="text-slate-300"> Página {currentPage + 1} de {totalPages} </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed"> Próxima </button>
                    </div>
                )}
            </main>
        </>
    );
}
================================================================================

/* --- app\relatorio\contagem-mensal\page.tsx --- */
// app/relatorio/contagem-mensal/page.tsx
"use client";

import { useState, useEffect } from 'react';
import NavBar from '@/components/nav-bar';

// --- Imports do Chart.js ---
import { Bar } from 'react-chartjs-2';
import {
    Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend,
} from 'chart.js';

// --- Registrar os componentes do Chart.js ---
ChartJS.register( CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend );
// ------------------------------------------

// Interface para os dados esperados do backend
interface ContagemMensalDto { mesAno: string; quantidade: number; }

// Tipo para controlar a visualização
type ViewMode = 'both' | 'table' | 'graph';

export default function RelatorioContagemMensalPage() {
    const [dadosContagem, setDadosContagem] = useState<ContagemMensalDto[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [viewMode, setViewMode] = useState<ViewMode>('both');

    useEffect(() => {
        const fetchContagem = async () => {
            setIsLoading(true); setError(null);
            const apiUrl = "http://localhost:8080/rest/relatorios/contagem-agendamentos-mensal";
            console.info("Buscando contagem em:", apiUrl);
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) { /* ... (tratamento de erro como antes) ... */
                    if (response.status === 404) throw new Error("Endpoint de contagem mensal não encontrado no backend (404).");
                    if (response.status >= 500 ) throw new Error(`Erro interno no servidor (${response.status}). Tente novamente.`);
                    throw new Error(`Erro ao buscar dados (${response.status})`);
                }
                if (response.status === 204) { setDadosContagem([]); return; }
                const data: ContagemMensalDto[] = await response.json();
                data.sort((a, b) => a.mesAno.localeCompare(b.mesAno));
                setDadosContagem(data);
            } catch (err: any) { /* ... (tratamento de erro como antes) ... */
                if (err instanceof TypeError && err.message.includes("fetch")) { setError("Falha ao conectar ao servidor para buscar contagem. Backend está rodando?"); }
                else { setError(err.message || "Falha ao carregar dados de contagem."); }
                setDadosContagem([]);
            } finally { setIsLoading(false); }
        };
        fetchContagem();
    }, []);

    // --- Preparar dados para o gráfico ---
    const chartLabels = dadosContagem.map(d => d.mesAno);
    const chartQuantidades = dadosContagem.map(d => d.quantidade);
    const backgroundColors = [
        'rgba(54, 162, 235, 0.7)', 'rgba(75, 192, 192, 0.7)', 'rgba(255, 206, 86, 0.7)',
        'rgba(153, 102, 255, 0.7)', 'rgba(255, 159, 64, 0.7)', 'rgba(255, 99, 132, 0.7)',
        'rgba(100, 116, 139, 0.7)' // Cinza (slate-500) com transparência
    ];
    const borderColors = [
        'rgba(54, 162, 235, 1)', 'rgba(75, 192, 192, 1)', 'rgba(255, 206, 86, 1)',
        'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)', 'rgba(255, 99, 132, 1)',
        'rgba(100, 116, 139, 1)'
    ];

    const chartData = {
        labels: chartLabels,
        datasets: [ { label: 'Nº de Agendamentos', data: chartQuantidades, backgroundColor: backgroundColors, borderColor: borderColors, borderWidth: 1, }, ],
    };

    // <<< === MODIFICAÇÃO AQUI: Cores dos textos/eixos para fundo branco === >>>
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: { position: 'top' as const, labels: { color: '#334155'} }, // Cor escura (slate-700)
            title: { display: true, text: 'Agendamentos por Mês/Ano', color: '#1e293b', font: { size: 16} }, // Cor escura (slate-800)
            tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.8)', titleColor: '#fff', bodyColor: '#fff', } // Tooltip pode continuar escuro
        },
        scales: {
            y: {
                beginAtZero: true,
                ticks: { color: '#475569', stepSize: 1 }, // Cor escura (slate-600)
                grid: { color: 'rgba(203, 213, 225, 0.5)' } // Cor clara para grid (slate-300/50)
            },
            x: {
                ticks: { color: '#475569' }, // Cor escura (slate-600)
                grid: { display: false }
            }
        }
    };
    // <<< ================================================================ >>>


    // Funções de Layout e Controle (sem alterações)
    const getLayoutClasses = () => { /* ... */
        switch (viewMode) {
            case 'table': case 'graph': return 'flex flex-col gap-6';
            case 'both': default: return 'flex flex-col lg:flex-row gap-6';
        }
    };
    const getSectionClasses = (section: 'table' | 'graph') => { /* ... */
        switch (viewMode) {
            case 'table': return section === 'table' ? 'w-full bg-slate-800 p-4 rounded' : 'hidden';
            case 'graph': return section === 'graph' ? 'w-full bg-white p-4 rounded' : 'hidden'; // <<< Adicionado bg-white aqui
            case 'both': default:
                return section === 'table'
                    ? 'lg:w-1/3 xl:w-1/4 bg-slate-800 p-4 rounded flex-shrink-0'
                    : 'lg:w-2/3 xl:w-3/4 bg-white p-4 rounded'; // <<< Adicionado bg-white aqui
        }
    };

    return (
        <>
            <NavBar active="relatorio-contagem-mensal"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Relatório: Contagem Mensal de Agendamentos</h1>

                {/* Botões de Controle */}
                <div className="mb-6 flex justify-center gap-3">
                    <button onClick={() => setViewMode('both')} className={`px-4 py-1.5 text-sm rounded-md transition-colors ${viewMode === 'both' ? 'bg-sky-600 text-white shadow' : 'bg-slate-600 hover:bg-slate-500 text-slate-200'}`}>Ambos</button>
                    <button onClick={() => setViewMode('table')} className={`px-4 py-1.5 text-sm rounded-md transition-colors ${viewMode === 'table' ? 'bg-sky-600 text-white shadow' : 'bg-slate-600 hover:bg-slate-500 text-slate-200'}`}>Tabela</button>
                    <button onClick={() => setViewMode('graph')} className={`px-4 py-1.5 text-sm rounded-md transition-colors ${viewMode === 'graph' ? 'bg-sky-600 text-white shadow' : 'bg-slate-600 hover:bg-slate-500 text-slate-200'}`}>Gráfico</button>
                </div>

                {error && ( <p className="text-center text-red-400 mb-4 p-3 bg-red-900/50 border border-red-500 rounded">{error}</p> )}

                {isLoading ? ( /* ... loading ... */
                    <p className="text-center text-sky-300 py-10">Carregando relatório...</p>
                ) : (
                    <div className="bg-slate-900 rounded-lg shadow p-4 md:p-6">
                        {dadosContagem.length === 0 && !error ? ( /* ... no data ... */
                            <p className="text-center text-slate-400">Nenhum dado encontrado para exibir.</p>
                        ) : !error ? (
                            <div className={getLayoutClasses()}>
                                {/* Tabela/Lista */}
                                <div className={getSectionClasses('table')}>
                                    <h2 className="text-lg mb-3 font-semibold text-white">Dados:</h2> {/* Garante texto branco aqui */}
                                    <ul className='list-disc pl-5 space-y-1 text-sm max-h-96 overflow-y-auto text-slate-300'> {/* Garante texto claro */}
                                        {dadosContagem.map(item => (
                                            <li key={item.mesAno}>
                                                {item.mesAno}: <span className="font-semibold text-slate-100">{item.quantidade}</span> agendamento(s)
                                            </li>
                                        ))}
                                    </ul>
                                </div>

                                {/* Gráfico */}
                                <div className={getSectionClasses('graph')}>
                                    {/* Título interno agora é definido nas opções do gráfico */}
                                    {/* <h2 className="text-lg mb-3 font-semibold text-center text-slate-800">Visualização Gráfica</h2> */ }
                                    <div className="relative h-64 md:h-96">
                                        {/* Renderiza o gráfico de barras */}
                                        <Bar options={chartOptions} data={chartData} />
                                    </div>
                                </div>
                            </div>
                        ) : null
                        }
                    </div>
                )}
            </main>
        </>
    );
}
================================================================================

/* --- app\relatorio\historico-cliente\page.tsx --- */
// app/relatorio/historico-cliente/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import NavBar from '@/components/nav-bar'; // Ajuste o caminho se necessário
import { useRouter } from 'next/navigation';

// --- Interfaces ---
interface ClienteInfoDTO {
    idCli: number;
    idEndereco: number;
    nome: string;
    sobrenome: string;
    numeroDocumento: string;
    getNomeCompleto?(): string;
}

interface HistoricoAgendamentoClienteDTO {
    dataAgendamento: string; // Formato AAAA-MM-DD
    observacao: string | null;
    veiculoPlaca: string | null;
}

interface AgendamentoHistorico {
    dataAgendamento: string; // Formatado DD/MM/AAAA
    observacao: string;
    veiculoPlaca: string;
}

type TipoBuscaCliente = 'nome' | 'documento' | 'idCliente';

const addGetNomeCompleto = (cliente: ClienteInfoDTO): ClienteInfoDTO => ({
    ...cliente,
    getNomeCompleto: function() {
        return `${this.nome || ''} ${this.sobrenome || ''}`.trim();
    }
});


export default function RelatorioHistoricoClientePage() {
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaCliente>('nome');
    const [termoBuscaCliente, setTermoBuscaCliente] = useState('');
    const [clientesEncontrados, setClientesEncontrados] = useState<ClienteInfoDTO[]>([]);
    const [isBuscandoCliente, setIsBuscandoCliente] = useState(false);

    const [clienteSelecionado, setClienteSelecionado] = useState<ClienteInfoDTO | null>(null);
    const [historico, setHistorico] = useState<AgendamentoHistorico[]>([]);
    const [isLoadingHistorico, setIsLoadingHistorico] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const router = useRouter();

    // --- Função para buscar clientes ---
    const buscarClientes = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsBuscandoCliente(true); setError(null); setClientesEncontrados([]);
        setClienteSelecionado(null); setHistorico([]);

        if (!termoBuscaCliente.trim()) {
            setError("Por favor, insira um termo para a busca.");
            setIsBuscandoCliente(false); return;
        }

        const params = new URLSearchParams();
        params.append(tipoBusca, termoBuscaCliente.trim());
        const apiUrl = `http://localhost:8080/rest/clientes/buscar?${params.toString()}`;
        console.info("Buscando clientes:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 400) throw new Error("Critério de busca inválido ou ausente.");
                if (response.status === 404 || response.status === 204) {
                    setClientesEncontrados([]); console.info("Nenhum cliente encontrado."); return; }
                const errorText = await response.text().catch(() => `Erro HTTP ${response.status}`);
                throw new Error(`Erro ao buscar clientes: ${errorText || response.statusText}`);
            }
            const responseBody = await response.text();
            if (!responseBody) { setClientesEncontrados([]); console.info("Nenhum cliente encontrado (resposta vazia)."); return; }
            const data: ClienteInfoDTO[] = JSON.parse(responseBody);
            setClientesEncontrados(data.map(addGetNomeCompleto));
            if (data.length === 0) { console.info("Nenhum cliente encontrado para o critério."); }
        } catch (err: any) {
            if (err instanceof TypeError && err.message.includes("fetch")) { setError("Falha ao conectar ao servidor para buscar clientes."); }
            else { setError(err.message || "Falha ao buscar clientes."); }
            setClientesEncontrados([]);
        } finally { setIsBuscandoCliente(false); }
    };

    // --- Função para buscar histórico ---
    const fetchHistorico = async (idCliente: number, idEndereco: number) => {
        setIsLoadingHistorico(true); setError(null); setHistorico([]);
        const apiUrl = `http://localhost:8080/rest/relatorios/historico-cliente/${idCliente}/${idEndereco}`;
        console.info("Buscando histórico em:", apiUrl);
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 404) throw new Error(`Cliente com ID ${idCliente}/${idEndereco} não encontrado ou API de histórico indisponível (404).`);
                if (response.status === 400) throw new Error(`ID inválido fornecido para busca de histórico (${idCliente}/${idEndereco}).`);
                if (response.status === 204) { // Sem histórico
                    setHistorico([]);
                    console.info("Nenhum histórico encontrado para este cliente (204).");
                    return;
                }
                throw new Error(`Erro ao buscar histórico: ${response.status}`);
            }

            const responseBody = await response.text();
            if (!responseBody) { // Se corpo vazio (pode acontecer com 200 OK)
                setHistorico([]);
                console.info("Nenhum histórico encontrado (resposta vazia).");
                return;
            }

            const data: HistoricoAgendamentoClienteDTO[] = JSON.parse(responseBody);
            const historicoFormatado: AgendamentoHistorico[] = data.map(dto => ({
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                observacao: dto.observacao || '-',
                veiculoPlaca: dto.veiculoPlaca || 'N/A'
            }));
            setHistorico(historicoFormatado);
        } catch (err: any) {
            if (err instanceof TypeError && err.message.includes("fetch")) { setError("Falha ao conectar ao servidor para buscar histórico."); }
            else { setError(err.message || "Falha ao carregar histórico."); }
            setHistorico([]);
        } finally { setIsLoadingHistorico(false); }
    };

    // --- Seleciona cliente e busca histórico ---
    const handleSelecionarCliente = (cliente: ClienteInfoDTO) => {
        console.log("Cliente selecionado:", cliente);
        // Limpa erro anterior antes de nova seleção/busca
        setError(null);
        setClienteSelecionado(cliente);
        setClientesEncontrados([]);
        if (cliente.idCli && cliente.idEndereco) {
            fetchHistorico(cliente.idCli, cliente.idEndereco);
        } else {
            setError("Erro: Informações do cliente selecionado estão incompletas (ID Cliente ou ID Endereço faltando). Verifique a API de busca.");
            setClienteSelecionado(null);
            setHistorico([]);
        }
    };

    // Placeholder dinâmico
    const getPlaceholder = (): string => { /* ... (código como antes) ... */
        switch(tipoBusca) {
            case 'nome': return 'Digite nome ou sobrenome...';
            case 'documento': return 'Digite CPF ou CNPJ exato...';
            case 'idCliente': return 'Digite o Código (ID) do Cliente...';
            default: return '';
        }
    };

    return (
        <>
            <NavBar active="relatorio-historico-cliente"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Relatório: Histórico por Cliente</h1>

                {/* Formulário de Busca de Cliente */}
                <form onSubmit={buscarClientes} className="mb-6 p-4 bg-slate-800 rounded-lg shadow flex flex-col sm:flex-row gap-3 items-end">
                    {/* Seletor */}
                    <div className='flex-shrink-0'>
                        <label htmlFor="tipoBuscaCliente" className="block text-sm mb-1 font-medium text-slate-300">Buscar por:</label>
                        <select id="tipoBuscaCliente" value={tipoBusca} onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaCliente); setTermoBuscaCliente(''); setClientesEncontrados([]); setClienteSelecionado(null); setHistorico([]); setError(null); }} className="w-full sm:w-auto p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500">
                            <option value="nome">Nome</option>
                            <option value="documento">Documento</option>
                            <option value="idCliente">Código Cliente</option>
                        </select>
                    </div>
                    {/* Input */}
                    <div className="flex-grow">
                        <label htmlFor="buscaCliente" className="block text-sm mb-1 font-medium text-slate-300">Termo:</label>
                        <input type={tipoBusca === 'idCliente' ? 'number' : 'text'} id="buscaCliente" value={termoBuscaCliente} onChange={(e) => setTermoBuscaCliente(e.target.value)} className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500" placeholder={getPlaceholder()} required/>
                    </div>
                    {/* Botão */}
                    <button type="submit" className="px-5 py-2 bg-sky-600 hover:bg-sky-700 rounded text-white font-semibold whitespace-nowrap" disabled={isBuscandoCliente}>
                        {isBuscandoCliente ? "Buscando..." : "Buscar Cliente"}
                    </button>
                </form>

                {/* Mensagem de Erro Geral */}
                {error && ( <p className="text-center text-red-400 mb-4 p-3 bg-red-900/50 border border-red-500 rounded">{error}</p> )}

                {/* Resultados da Busca de Cliente */}
                {isBuscandoCliente && <p className="text-sky-300 text-center">Buscando clientes...</p>}
                {!isBuscandoCliente && clientesEncontrados.length > 0 && (
                    <div className="mb-6 bg-slate-700 p-4 rounded shadow">
                        <h3 className="text-lg mb-2 font-semibold">Selecione o Cliente:</h3>
                        <ul className='space-y-1 max-h-48 overflow-y-auto'>
                            {clientesEncontrados.map(c => (
                                <li key={`${c.idCli}-${c.idEndereco}`} onClick={() => handleSelecionarCliente(c)} className="p-2 hover:bg-sky-600 cursor-pointer rounded text-sm flex justify-between items-center" title={`ID End: ${c.idEndereco}`} >
                                    <span>{c.getNomeCompleto?.()} (ID: {c.idCli})</span>
                                    <span className='text-xs text-slate-400 ml-2'>Doc: {c.numeroDocumento}</span>
                                </li>
                            ))}
                        </ul>
                    </div>
                )}
                {!isBuscandoCliente && termoBuscaCliente && clientesEncontrados.length === 0 && !clienteSelecionado && !error && (
                    <p className="text-center text-slate-400 mb-4">Nenhum cliente encontrado com o critério informado.</p>
                )}

                {/* Exibição do Histórico */}
                {clienteSelecionado && !error && ( // Só mostra histórico se não houver erro geral
                    <div className="mt-8">
                        <h2 className="text-2xl font-semibold mb-4">Histórico de Agendamentos para: {clienteSelecionado.getNomeCompleto?.()} (ID: {clienteSelecionado.idCli} / End: {clienteSelecionado.idEndereco})</h2>
                        {isLoadingHistorico ? (
                            <p className="text-center text-sky-300 py-5">Carregando histórico...</p>
                        ) : (
                            <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                                <table className="min-w-full table-auto">
                                    <thead className="bg-slate-800 border-b border-slate-700">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Agendada</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Veículo (Placa)</th>
                                    </tr>
                                    </thead>
                                    <tbody className="divide-y divide-slate-700">
                                    {historico.length === 0 ? (
                                        <tr><td colSpan={3} className="px-6 py-4 text-center text-slate-400">Nenhum histórico de agendamento encontrado para este cliente.</td></tr>
                                    ) : (
                                        historico.map((item, index) => (
                                            <tr key={index} className="hover:bg-slate-800/50">
                                                <td className="px-6 py-4 whitespace-nowrap">{item.dataAgendamento}</td>
                                                <td className="px-6 py-4 whitespace-normal max-w-lg break-words">{item.observacao}</td>
                                                <td className="px-6 py-4 whitespace-nowrap">{item.veiculoPlaca}</td>
                                            </tr>
                                        ))
                                    )}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                )}

                {/* Mensagem inicial */}
                {!clienteSelecionado && !isBuscandoCliente && clientesEncontrados.length === 0 && !error && (
                    <p className="text-center text-slate-400 mt-10">Use a busca acima para encontrar um cliente e ver seu histórico.</p>
                )}

            </main>
        </>
    );
}
================================================================================

/* --- app\relatorio\listar\page.tsx --- */
// app/relatorio/agendamentos-futuros/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link'; // Link pode não ser necessário aqui, a menos que link para detalhes
import NavBar from '@/components/nav-bar';

// --- Interfaces (podem ser as mesmas da listagem) ---
interface AgendamentoParaLista { id: number; dataAgendamento: string; observacao: string; }
interface PaginatedAgendaResponse { content: AgendamentoApiResponseDto[]; totalPages: number; totalElements: number; number: number; size: number; }
interface AgendamentoApiResponseDto { id: number; dataAgendamento: string; observacao: string | null; }
// ----------------------------------------------------

export default function RelatorioAgendamentosFuturosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(15); // Pode aumentar o tamanho para relatórios

    // --- Função para buscar agendamentos futuros paginados ---
    const fetchAgendamentosFuturos = async (page = 0) => {
        setIsLoading(true);
        setError(null);

        const today = new Date().toISOString().split('T')[0]; // Pega data de hoje no formato AAAA-MM-DD

        const params = new URLSearchParams({
            page: page.toString(),
            size: pageSize.toString(),
            sort: 'dataAgendamento,asc', // Ordenar por data ascendente
            dataInicio: today // <<< FILTRO PRINCIPAL DESTE RELATÓRIO
        });
        const apiUrl = `http://localhost:8080/rest/agenda?${params.toString()}`;
        console.info("Buscando agendamentos futuros:", apiUrl);

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                if (response.status === 400) {
                    const errorData = await response.json().catch(() => ({ message: "Requisição inválida (400)." }));
                    throw new Error(errorData.message || `Erro HTTP ${response.status}`);
                }
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }

            if (response.status === 204) { // No Content
                setAgendamentos([]); setTotalPages(0); setCurrentPage(0);
                console.info("Nenhum agendamento futuro encontrado.");
                return;
            }

            const data: PaginatedAgendaResponse = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.content.map(dto => ({
                id: dto.id,
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                observacao: dto.observacao || '',
            }));

            setAgendamentos(agendamentosFormatados);
            setTotalPages(data.totalPages);
            setCurrentPage(data.number);

        } catch (err: any) {
            setError(err.message || "Falha ao carregar relatório de agendamentos futuros.");
            setAgendamentos([]); setTotalPages(0);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchAgendamentosFuturos(currentPage);
    }, [currentPage, pageSize]);

    // Funções de Paginação
    const handlePreviousPage = () => { if (currentPage > 0) { fetchAgendamentosFuturos(currentPage - 1); } };
    const handleNextPage = () => { if (currentPage < totalPages - 1) { fetchAgendamentosFuturos(currentPage + 1); } };

    return (
        <>
            <NavBar active="relatorio"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Relatório: Agendamentos Futuros</h1>

                {/* Mensagens */}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {/* Tabela de Agendamentos */}
                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando relatório...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data Agendada</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                {/* Adicionar colunas de Cliente/Veículo se implementar no backend */}
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {agendamentos.length === 0 ? (
                                <tr><td colSpan={3} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento futuro encontrado.</td></tr> // Ajustar colSpan se adicionar colunas
                            ) : (
                                agendamentos.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-lg truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        {/* Adicionar tds de Cliente/Veículo aqui */}
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Controles de Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        {/* ... botões de paginação ... */}
                        <button onClick={handlePreviousPage} disabled={currentPage === 0} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Anterior
                        </button>
                        <span className="text-slate-300">
                             Página {currentPage + 1} de {totalPages}
                         </span>
                        <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1} className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md disabled:opacity-50 disabled:cursor-not-allowed">
                            Próxima
                        </button>
                    </div>
                )}
            </main>
        </>
    );
}
================================================================================

/* --- app\relatorio\servicos-agendados\page.tsx --- */
// app/relatorio/servicos-agendados/page.tsx
"use client";

import { useState, useEffect } from 'react';
import NavBar from '@/components/nav-bar';

// Interfaces (adaptar conforme DTO do backend)
interface ServicoAgendado {
    agendaId: number;
    dataAgendamento: string; // Formatada
    veiculoPlaca: string | null;
    descricaoProblema: string | null;
    diagnostico: string | null;
}
interface PaginatedServicosResponse {
    content: ServicoAgendadoDto[]; totalPages: number; number: number; size: number; }
interface ServicoAgendadoDto {
    agendaId: number; dataAgendamento: string; veiculoPlaca: string | null; descricaoProblema: string | null; diagnostico: string | null; }

export default function RelatorioServicosAgendadosPage() {
    const [servicos, setServicos] = useState<ServicoAgendado[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [pageSize, setPageSize] = useState(10);

    useEffect(() => {
        const fetchServicos = async (page = 0) => {
            setIsLoading(true);
            setError(null);

            const today = new Date().toISOString().split('T')[0];
            const params = new URLSearchParams({
                page: page.toString(),
                size: pageSize.toString(),
                sort: 'dataAgendamento,asc',
                dataInicio: today
            });
            // !!! SUBSTITUIR PELA URL REAL DO BACKEND QUANDO CRIADO !!!
            const apiUrl = `http://localhost:8080/rest/relatorios/servicos-agendados?${params.toString()}`;
            console.warn("Buscando serviços agendados em:", apiUrl, "(Endpoint precisa existir no backend)");

            try {
                const response = await fetch(apiUrl);
                if (!response.ok) {
                    if (response.status === 404) throw new Error("Endpoint de serviços agendados não encontrado (404).");
                    throw new Error(`Erro HTTP ${response.status}`); }
                if (response.status === 204) { setServicos([]); setTotalPages(0); return; }

                const data: PaginatedServicosResponse = await response.json();
                const formatados: ServicoAgendado[] = data.content.map(dto => ({
                    agendaId: dto.agendaId,
                    dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A',
                    veiculoPlaca: dto.veiculoPlaca || '-',
                    descricaoProblema: dto.descricaoProblema || '-',
                    diagnostico: dto.diagnostico || 'Pendente'
                }));
                setServicos(formatados);
                setTotalPages(data.totalPages);
                setCurrentPage(data.number);
            } catch (err: any) {
                if (err instanceof TypeError && err.message === "Failed to fetch") { setError("Falha ao conectar ao servidor para buscar serviços."); }
                else { setError(err.message || "Falha ao carregar relatório."); }
                setServicos([]); setTotalPages(0);
            } finally {
                setIsLoading(false);
            }
        };
        fetchServicos(currentPage);
    }, [currentPage, pageSize]);

    // Funções de Paginação
    const handlePreviousPage = () => { /* ... */ }; // Implementar igual aos outros
    const handleNextPage = () => { /* ... */ }; // Implementar igual aos outros


    return (
        <>
            <NavBar active="relatorio-servicos-agendados"/>
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Relatório: Serviços Agendados</h1>

                {error && ( <p className="text-center text-red-400 mb-4 p-3 bg-red-900/50 border border-red-500 rounded">{error}</p> )}

                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando relatório...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase">Agenda ID</th>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase">Data</th>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase">Placa</th>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase">Problema Descrito</th>
                                <th className="px-4 py-3 text-left text-xs font-medium uppercase">Diagnóstico Preliminar</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {servicos.length === 0 && !error ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum serviço agendado encontrado.</td></tr>
                            ) : (
                                servicos.map((s) => (
                                    <tr key={s.agendaId} className="hover:bg-slate-800/50">
                                        <td className="px-4 py-4 whitespace-nowrap">{s.agendaId}</td>
                                        <td className="px-4 py-4 whitespace-nowrap">{s.dataAgendamento}</td>
                                        <td className="px-4 py-4 whitespace-nowrap">{s.veiculoPlaca}</td>
                                        <td className="px-4 py-4 whitespace-normal max-w-sm break-words">{s.descricaoProblema}</td>
                                        <td className="px-4 py-4 whitespace-normal max-w-sm break-words">{s.diagnostico}</td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Controles de Paginação */}
                {!isLoading && totalPages > 1 && (
                    <div className="flex justify-center items-center mt-6 gap-4">
                        {/* ... botões de paginação ... */}
                    </div>
                )}

            </main>
        </>
    );
}
================================================================================

/* --- app\veiculo\alterar\[id]\page.tsx --- */
// /src/app/veiculo/alterar/[id]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';         // Ajuste o path
import { VeiculoForm } from '@/components/VeiculoForm'; // Ajuste o path
import { VeiculoFormData, VeiculoResponse } from '@/types/veiculo';  // Ajuste o path

export default function AlterarVeiculoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id as string;
    const id = parseInt(idParam, 10);

    const [veiculo, setVeiculo] = useState<VeiculoResponse | null>(null); // Armazena dados carregados
    const [isLoading, setIsLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Para mensagem de sucesso

    // --- Fetch inicial dos dados do veículo ---
    useEffect(() => {
        if (isNaN(id)) {
            setError("ID do veículo inválido na URL.");
            setIsLoading(false);
            return;
        }

        setIsLoading(true);
        setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/${id}`; // Endpoint GET Veiculo por ID

        const fetchVeiculoData = async () => {
            try {
                const response = await fetch(apiUrl);
                if (response.status === 404) { throw new Error("Veículo não encontrado."); }
                if (!response.ok) {
                    let errorMsg = `Erro ${response.status}: ${response.statusText}`;
                    try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch(e){}
                    throw new Error(errorMsg);
                }
                const data: VeiculoResponse = await response.json();

                // Ajusta anoFabricacao para conter apenas o ano para o form
                const formData = {
                    ...data,
                    anoFabricacao: data.anoFabricacao ? data.anoFabricacao.split('-')[0] : ''
                };
                setVeiculo(formData as VeiculoResponse); // Armazena formatado

            } catch (err: any) {
                setError(err.message || "Falha ao carregar dados do veículo.");
                console.error(err);
            } finally {
                setIsLoading(false);
            }
        };
        fetchVeiculoData();
    }, [id]);

    // --- Handler para submeter a atualização ---
    const handleUpdateSubmit = async (data: VeiculoFormData) => {
        if (isNaN(id)) return;

        // O VeiculoForm já formata anoFabricacao para YYYY-MM-DD no payload
        setIsSubmitting(true);
        setError(null);
        setSuccess(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/${id}`; // Endpoint PUT Veiculo

        console.log('Atualizando na API:', JSON.stringify(data, null, 2));

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });

            if (!response.ok) {
                let errorMsg = `Erro ${response.status}: ${response.statusText}`;
                try {
                    const errorData = await response.json();
                    errorMsg = errorData.message || errorData.error || JSON.stringify(errorData);
                } catch (e) { /* Ignora se não for JSON */ }
                throw new Error(errorMsg);
            }

            const updatedVeiculo = await response.json();
            console.log("Update Success:", updatedVeiculo);
            setSuccess(`Veículo ${updatedVeiculo.modelo} (Placa: ${updatedVeiculo.placa}) atualizado com sucesso!`);

            setTimeout(() => {
                router.push('/veiculo/listar'); // Volta para a lista
            }, 2000);

        } catch (err: any) {
            console.error('Erro ao atualizar veículo:', err);
            setError(err.message || 'Falha ao atualizar veículo. Verifique os dados e tente novamente.');
            setIsSubmitting(false);
        }
        // Não seta isSubmitting p/ false no sucesso por causa do redirect
    };

    // --- Renderização ---
    return (
        <>
            <NavBar active="veiculo-alterar" /> {/* Atualiza 'active' */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <Link href="/veiculo/listar" className="text-blue-400 hover:underline mb-4 inline-block">
                    &larr; Voltar para Lista de Veículos
                </Link>
                <h1 className="text-2xl md:text-3xl font-bold mb-6 text-center">
                    {isLoading ? 'Carregando Veículo...' : veiculo ? `Alterar Veículo (ID: ${id})` : 'Erro ao Carregar'}
                </h1>

                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-3xl mx-auto">
                    {/* Mensagens de Erro/Sucesso */}
                    {error && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                            <span className="block sm:inline">{error}</span>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                <span className="text-2xl" aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    )}
                    {success && (
                        <p className="mb-4 text-center text-green-400 bg-green-900/50 p-3 rounded border border-green-500">{success}</p>
                    )}

                    {/* Formulário */}
                    {isLoading ? (
                        <p className="text-center text-sky-300">Carregando formulário...</p>
                    ) : veiculo ? (
                        // Passa os dados carregados (com apenas o ano) como defaultValues
                        <VeiculoForm
                            onSubmit={handleUpdateSubmit}
                            defaultValues={veiculo}
                            isSubmitting={isSubmitting}
                        />
                    ) : (
                        // Se não está carregando e não tem veículo (e não deu erro antes), mostra mensagem
                        !error && <p className="text-center text-yellow-400">Não foi possível encontrar os dados do veículo para edição.</p>
                    )}
                </div>
            </main>
            <style jsx global>{` /* ... */ `}</style>
        </>
    );
}
================================================================================

/* --- app\veiculo\buscar\page.tsx --- */
// /src/app/veiculo/buscar/page.tsx
'use client';

import React, { useState, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';         // Ajuste o path
import { VeiculoResponse } from '@/types/veiculo';  // Ajuste o path

// Interface para os resultados da busca (pode ser igual a VeiculoResponse ou simplificada)
type VeiculoSearchResult = VeiculoResponse;

export default function BuscarVeiculosPage() {
    const [resultadosBusca, setResultadosBusca] = useState<VeiculoSearchResult[]>([]);
    const [tipoBusca, setTipoBusca] = useState<'placa' | 'modelo' | 'proprietario'>('placa'); // Exemplo de filtros
    const [termoBusca, setTermoBusca] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);
    const router = useRouter(); // Para navegação

    // --- Função de Busca (PRECISA DE API OU FILTRO FRONTEND) ---
    const handleSearch = async (event?: FormEvent<HTMLFormElement>) => {
        if (event) { event.preventDefault(); }
        if (!termoBusca.trim()) {
            setError("Por favor, insira um termo para buscar.");
            return;
        }
        setIsSearching(true);
        setBuscaRealizada(true);
        setError(null);
        setResultadosBusca([]);

        // *** PONTO DE ATENÇÃO: Implementar a chamada API ou filtro aqui ***
        // Exemplo com chamada API (SUPONDO um endpoint /rest/veiculo/buscar)
        const params = new URLSearchParams();
        params.append(tipoBusca, termoBusca.trim()); // Adiciona o parâmetro correto
        const apiUrl = `http://localhost:8080/rest/veiculo/buscar?${params.toString()}`; // Endpoint HIPOTÉTICO

        console.info(`Buscando veículos na API: ${apiUrl}`);
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                let errorMsg = `Erro ${response.status}: ${response.statusText}`;
                try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch(e){}
                throw new Error(errorMsg);
            }
            if (response.status === 204) {
                setResultadosBusca([]);
            } else {
                const data: VeiculoSearchResult[] = await response.json();
                setResultadosBusca(data || []);
            }
        } catch (err: any) {
            setError(err.message || "Falha ao buscar veículos.");
            console.error("Erro na busca:", err);
            setResultadosBusca([]);
        } finally {
            setIsSearching(false);
        }

        // Exemplo com filtro Frontend (BUSCAR TODOS PRIMEIRO - NÃO RECOMENDADO PARA MUITOS DADOS)
        /*
        console.info("Buscando todos e filtrando no frontend...");
        try {
            const fetchAllUrl = `http://localhost:8080/rest/veiculo/all`;
            const response = await fetch(fetchAllUrl);
            if (!response.ok) throw new Error(`Erro ao buscar todos: ${response.statusText}`);
            if (response.status === 204) {
                 setResultadosBusca([]);
            } else {
                const todosVeiculos: VeiculoResponse[] = await response.json();
                const termoLower = termoBusca.toLowerCase();
                const filtrados = todosVeiculos.filter(v => {
                    switch (tipoBusca) {
                        case 'placa': return v.placa.toLowerCase().includes(termoLower);
                        case 'modelo': return v.modelo.toLowerCase().includes(termoLower);
                        case 'proprietario': return v.proprietario.toLowerCase().includes(termoLower);
                        default: return false;
                    }
                });
                setResultadosBusca(filtrados);
            }

        } catch (err: any) {
             setError(err.message || "Falha ao buscar/filtrar veículos.");
             console.error("Erro na busca/filtro:", err);
             setResultadosBusca([]);
        } finally {
            setIsSearching(false);
        }
        */
        // *** FIM DO PONTO DE ATENÇÃO ***
    };

    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'placa': return 'Digite a placa ou parte dela...';
            case 'modelo': return 'Digite o modelo ou parte dele...';
            case 'proprietario': return 'Digite o nome do proprietário...';
            default: return 'Digite o termo...';
        }
    };

    return (
        <>
            <NavBar active="veiculo-buscar" /> {/* Atualiza 'active' */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <Link href="/veiculo/listar" className="text-blue-400 hover:underline mb-4 inline-block">
                    &larr; Voltar para Lista de Veículos
                </Link>
                <h1 className="text-3xl font-bold mb-6 text-center">Buscar Veículos</h1>

                {/* Formulário de Busca */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    {/* Select tipo de busca */}
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select
                            id="tipoBusca"
                            name="tipoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={tipoBusca}
                            onChange={(e) => { setTipoBusca(e.target.value as 'placa' | 'modelo' | 'proprietario'); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); setError(null); }}
                        >
                            <option value="placa">Placa</option>
                            <option value="modelo">Modelo</option>
                            <option value="proprietario">Proprietário</option>
                        </select>
                    </div>
                    {/* Input termo */}
                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input
                            type='text'
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={termoBusca}
                            onChange={(e) => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()}
                            required
                        />
                    </div>
                    {/* Botão Buscar */}
                    <button type="submit" className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap" disabled={isSearching}>
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Mensagens de Erro */}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <span className="block sm:inline">{error}</span>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                            <span className="text-2xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}

                {/* Tabela de Resultados */}
                {buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                {/* Colunas da tabela de resultados */}
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Placa</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Modelo</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Proprietário</th>
                                <th className="px-4 sm:px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum veículo encontrado para esta busca.</td></tr>
                            ) : (
                                resultadosBusca.map((veiculo) => (
                                    <tr key={veiculo.id} className="hover:bg-slate-800/50">
                                        {/* Dados do resultado */}
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.id}</td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm font-mono">{veiculo.placa}</td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.modelo}</td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.proprietario}</td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-center text-sm space-x-2">
                                            {/* Ações para os resultados */}
                                            <Link href={`/veiculo/alterar/${veiculo.id}`}>
                                                <button className="px-2 py-1 text-xs sm:px-3 sm:py-1 sm:text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">Editar</button>
                                            </Link>
                                            <button
                                                onClick={() => router.push(`/veiculo/deletar/${veiculo.id}`)}
                                                className="px-2 py-1 text-xs sm:px-3 sm:py-1 sm:text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            >
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
                {/* TODO: Adicionar paginação se a API de busca suportar */}
            </main>
            <style jsx global>{` /* ... */ `}</style>
        </>
    );
}
================================================================================

/* --- app\veiculo\cadastrar\page.tsx --- */
// /src/app/veiculo/cadastrar/page.tsx
'use client';

import React, { useState, FormEvent } from 'react'; // Adicionado FormEvent
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';         // Ajuste o path
import { VeiculoForm } from '@/components/VeiculoForm'; // Ajuste o path
import { VeiculoFormData } from '@/types/veiculo';  // Ajuste o path

export default function CadastrarVeiculoPage() {
    const router = useRouter();
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Para mensagem de sucesso

    // --- Manipulador de Submissão ---
    const handleCreateSubmit = async (data: VeiculoFormData) => {
        // O VeiculoForm já formata anoFabricacao para YYYY-MM-DD
        setIsSubmitting(true);
        setError(null);
        setSuccess(null);
        const apiUrl = `http://localhost:8080/rest/veiculo`; // Endpoint POST Veiculo

        console.log('Enviando para API:', JSON.stringify(data, null, 2));

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });

            if (!response.ok) {
                let errorMsg = `Erro ${response.status}: ${response.statusText}`;
                try {
                    const errorData = await response.json();
                    // Tenta pegar mensagens de erro específicas da sua API Java (ex: validação)
                    if (errorData && typeof errorData === 'object') {
                        // Adapte isso à estrutura real da sua resposta de erro da API
                        errorMsg = errorData.message || errorData.error || JSON.stringify(errorData);
                        // Se houver erros de campo específicos, pode tentar extraí-los
                        // if (errorData.errors) { errorMsg += `: ${JSON.stringify(errorData.errors)}`; }
                    }
                } catch (e) { /* Ignora se não for JSON */ }
                throw new Error(errorMsg);
            }

            const novoVeiculo = await response.json();
            console.log("Save Success:", novoVeiculo);
            setSuccess(`Veículo ${novoVeiculo.modelo} (Placa: ${novoVeiculo.placa}) cadastrado com sucesso!`);

            // Opcional: Redirecionar após um tempo ou manter na página
            setTimeout(() => {
                router.push('/veiculo/listar'); // Redireciona para a lista
            }, 2000); // Espera 2 segundos antes de redirecionar

        } catch (err: any) {
            console.error('Erro ao cadastrar veículo:', err);
            setError(err.message || 'Falha ao cadastrar veículo. Verifique os dados (ex: Renavam/Placa únicos) e tente novamente.');
            setIsSubmitting(false); // Permite tentar novamente em caso de erro
        }
        // Não seta isSubmitting para false no sucesso por causa do redirect
    };

    return (
        <>
            <NavBar active="veiculo-cadastrar" /> {/* Atualiza 'active' */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <Link href="/veiculo/listar" className="text-blue-400 hover:underline mb-4 inline-block">
                    &larr; Voltar para Lista de Veículos
                </Link>
                <h1 className="text-2xl md:text-3xl font-bold mb-6 text-center">Cadastrar Novo Veículo</h1>

                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-3xl mx-auto">
                    {/* Mensagens de Erro/Sucesso */}
                    {error && (
                        <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                            <span className="block sm:inline">{error}</span>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                <span className="text-2xl" aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    )}
                    {success && (
                        <p className="mb-4 text-center text-green-400 bg-green-900/50 p-3 rounded border border-green-500">{success}</p>
                    )}

                    {/* Usando o componente de formulário */}
                    {/* Passamos a função de submit diretamente */}
                    <VeiculoForm onSubmit={handleCreateSubmit} isSubmitting={isSubmitting} />
                </div>
            </main>
            {/* Estilos CSS Globais para selects/inputs se necessário */}
            <style jsx global>{` /* ... */ `}</style>
        </>
    );
}
================================================================================

/* --- app\veiculo\deletar\[id]\page.tsx --- */
// /src/app/veiculo/deletar/[id]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';         // Ajuste o path
import { VeiculoResponse } from '@/types/veiculo';  // Ajuste o path

export default function DeletarVeiculoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id as string;
    const id = parseInt(idParam, 10);

    const [veiculoInfo, setVeiculoInfo] = useState<VeiculoResponse | null>(null); // Info para confirmação
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // --- Busca dados do veículo para confirmação ---
    useEffect(() => {
        if (isNaN(id)) {
            setError("ID do veículo inválido.");
            setIsLoadingInfo(false);
            return;
        }

        setIsLoadingInfo(true);
        setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/${id}`; // Endpoint GET Veiculo por ID

        const fetchVeiculoData = async () => {
            try {
                const response = await fetch(apiUrl);
                if (response.status === 404) { throw new Error("Veículo não encontrado para confirmar exclusão."); }
                if (!response.ok) {
                    let errorMsg = `Erro ${response.status}: ${response.statusText}`;
                    try { const errorData = await response.json(); errorMsg = errorData.message || errorMsg; } catch(e){}
                    throw new Error(errorMsg);
                }
                const data: VeiculoResponse = await response.json();
                setVeiculoInfo(data);
            } catch (err: any) {
                setError(err.message || "Falha ao carregar dados do veículo para exclusão.");
                console.error(err);
                setVeiculoInfo(null); // Garante que não mostre dados antigos se der erro
            } finally {
                setIsLoadingInfo(false);
            }
        };
        fetchVeiculoData();
    }, [id]);

    // --- Função para confirmar e executar a exclusão ---
    const handleConfirmDelete = async () => {
        if (isNaN(id)) { setError("ID inválido para excluir."); return; }

        setIsDeleting(true);
        setError(null);
        const apiUrl = `http://localhost:8080/rest/veiculo/${id}`; // Endpoint DELETE Veiculo

        try {
            const response = await fetch(apiUrl, { method: 'DELETE' });

            if (!response.ok) {
                // Tenta ler erro específico (ex: constraint violation)
                let errorMsg = `Erro ${response.status}: ${response.statusText}`;
                try {
                    const errorText = await response.text(); // Pode não ser JSON
                    if (errorText?.toLowerCase().includes('constraintviolation') || errorText?.toLowerCase().includes('integridade')) {
                        errorMsg = "Não é possível excluir: Veículo associado a outros registros.";
                    } else {
                        errorMsg = errorText || errorMsg; // Usa o texto do erro se disponível
                    }
                } catch(e){}
                throw new Error(errorMsg);
            }

            console.log(`Veículo ID ${id} excluído com sucesso.`);
            alert(`Veículo ID ${id} excluído com sucesso.`); // Feedback ao usuário
            router.push('/veiculo/listar'); // Redireciona para a lista

        } catch (err: any) {
            setError(err.message || "Falha ao excluir veículo.");
            console.error("Erro ao excluir veículo:", err);
            setIsDeleting(false); // Permite tentar novamente
        }
        // Não seta isDeleting p/ false no sucesso devido ao redirect
    };

    // --- Função para cancelar ---
    const handleCancel = () => {
        router.push('/veiculo/listar');
    };

    // --- Renderização ---
    return (
        <>
            <NavBar active="veiculo-deletar" /> {/* Atualiza 'active' */}
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border-2 border-red-700">
                    <h2 className="text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        Confirmar Exclusão de Veículo
                    </h2>

                    {isLoadingInfo ? (
                        <p className="text-center text-sky-300 py-5">Carregando dados para confirmação...</p>
                    ) : error && !veiculoInfo ? ( // Erro ao carregar ou ID inválido
                        <div className='text-center'>
                            <p className="text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                            <button onClick={handleCancel} className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                Voltar para Lista
                            </button>
                        </div>
                    ) : !veiculoInfo ? ( // Veículo não encontrado (404) mas sem erro de fetch
                        <div className='text-center'>
                            <p className="text-yellow-400 bg-yellow-900/50 p-3 rounded border border-yellow-500 mb-6">Veículo ID {id} não encontrado. Pode já ter sido excluído.</p>
                            <button onClick={handleCancel} className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                Voltar para Lista
                            </button>
                        </div>
                    ) : (
                        // Tela de Confirmação
                        <>
                            <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir permanentemente o seguinte veículo?</p>
                            <div className='text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded'>
                                <p><strong>ID:</strong> {veiculoInfo.id}</p>
                                <p><strong>Placa:</strong> {veiculoInfo.placa}</p>
                                <p><strong>Modelo:</strong> {veiculoInfo.modelo}</p>
                                <p><strong>Proprietário:</strong> {veiculoInfo.proprietario}</p>
                                <p><strong>Ano:</strong> {veiculoInfo.anoFabricacao?.split('-')[0] || '-'}</p>
                            </div>

                            {/* Mostra erro específico da exclusão, se houver */}
                            {error && !isLoadingInfo && (
                                <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                    <span className="block sm:inline">{error}</span>
                                    <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                        <span className="text-2xl" aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                            )}

                            {/* Botões de Ação */}
                            <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                                <button
                                    onClick={handleConfirmDelete}
                                    className={`px-6 py-3 font-semibold text-white bg-red-700 rounded-md shadow hover:bg-red-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                    disabled={isDeleting}
                                >
                                    {isDeleting ? 'Excluindo...' : 'Sim, Excluir Permanentemente'}
                                </button>
                                <button
                                    onClick={handleCancel}
                                    className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                                    disabled={isDeleting}
                                >
                                    Não, Cancelar
                                </button>
                            </div>
                        </>
                    )}
                </div>
            </main>
        </>
    );
}
================================================================================

/* --- app\veiculo\listar\page.tsx --- */
// /src/app/veiculo/listar/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar'; // Ajuste o path se necessário
// REMOVA a linha abaixo, pois não usaremos o service:
// import { getVeiculos } from '@/services/veiculoService';
import { VeiculoResponse } from '@/types/veiculo'; // Ajuste o path se necessário


export default function ListarVeiculosPage() {
    const [veiculos, setVeiculos] = useState<VeiculoResponse[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const router = useRouter();

    // --- Fetch direto no useEffect ---
    useEffect(() => {
        const fetchVeiculos = async () => {
            setIsLoading(true);
            setError(null);
            // Endpoint da sua API Java para listar todos os veículos
            // Ajuste a URL se o endpoint for diferente (ex: /veiculo?page=0&size=10)
            const apiUrl = `http://localhost:8080/rest/veiculo/all`;

            try {
                const response = await fetch(apiUrl);

                // Tratamento de erros da API
                if (!response.ok) {
                    // Tenta ler uma mensagem de erro do corpo, senão usa o status
                    let errorMsg = `Erro HTTP ${response.status}: ${response.statusText}`;
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.message || errorMsg;
                    } catch (e) { /* Ignora se não conseguir parsear o erro */ }
                    throw new Error(errorMsg);
                }

                // Trata caso de resposta 204 No Content (sem veículos)
                if (response.status === 204) {
                    setVeiculos([]);
                    console.info("Nenhum veículo encontrado (204 No Content).");
                } else {
                    const data: VeiculoResponse[] = await response.json();
                    setVeiculos(data || []); // Garante array vazio se a resposta for inesperada
                }

            } catch (err: any) {
                setError(err.message || "Falha ao carregar veículos.");
                console.error("Erro ao buscar veículos:", err);
                setVeiculos([]); // Limpa veículos em caso de erro
            } finally {
                setIsLoading(false);
            }
        };
        fetchVeiculos();
    }, []); // Executa apenas uma vez ao montar o componente

    // Navega para a página de exclusão dedicada
    const navigateToDelete = (id: number) => {
        router.push(`/veiculo/deletar/${id}`);
    };

    return (
        <>
            <NavBar active="veiculo-listar" /> {/* Passa a prop 'active' correta */}
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Cabeçalho e Botões */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="text-2xl md:text-3xl font-bold text-center sm:text-left">Lista de Veículos</h1>
                    <div className="flex gap-2 flex-wrap justify-center">
                        <Link href="/veiculo/cadastrar">
                            <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                                Novo Veículo
                            </button>
                        </Link>
                        <Link href="/veiculo/buscar">
                            <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md shadow whitespace-nowrap">
                                Buscar Veículo
                            </button>
                        </Link>
                    </div>
                </div>

                {/* Mensagens */}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <span className="block sm:inline">{error}</span>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                            <span className="text-2xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}

                {/* Tabela de Veículos */}
                {isLoading ? (
                    <p className="text-center text-sky-300 py-10">Carregando veículos...</p>
                ) : (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                {/* Ajuste as colunas conforme necessário */}
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Placa</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Modelo</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Proprietário</th>
                                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Ano</th>
                                <th className="px-4 sm:px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {veiculos.length === 0 ? (
                                <tr><td colSpan={6} className="px-6 py-4 text-center text-slate-400">Nenhum veículo encontrado.</td></tr>
                            ) : (
                                veiculos.map((veiculo) => (
                                    <tr key={veiculo.id} className="hover:bg-slate-800/50">
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.id}</td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm font-mono">{veiculo.placa}</td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.modelo}</td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">{veiculo.proprietario}</td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-sm">
                                            {veiculo.anoFabricacao ? veiculo.anoFabricacao.split('-')[0] : '-'}
                                        </td>
                                        <td className="px-4 sm:px-6 py-4 whitespace-nowrap text-center text-sm space-x-2">
                                            <Link href={`/veiculo/alterar/${veiculo.id}`}>
                                                <button className="px-2 py-1 text-xs sm:px-3 sm:py-1 sm:text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">Editar</button>
                                            </Link>
                                            <button
                                                onClick={() => navigateToDelete(veiculo.id)}
                                                className="px-2 py-1 text-xs sm:px-3 sm:py-1 sm:text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            >
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
                {/* Se sua API de listar veículos for paginada, adicione os controles de paginação aqui, similar ao exemplo de agendamento/listar */}
            </main>
        </>
    );
}
================================================================================

/* --- components\nav-bar.tsx --- */
// src/components/nav-bar.tsx
"use client";

import Link from 'next/link';
import { useState } from 'react';

// Adicionar "veiculo" e sub-itens de veículo aos tipos possíveis
interface NabvBarProps {
    active: "inicio" | "clientes" | "cadastrar" | "oficinaOnline" | "agendamento" |
        "veiculo" | "veiculo-listar" | "veiculo-cadastrar" | "veiculo-buscar" | "veiculo-alterar" | "veiculo-deletar" | // <-- Adicionado Veículo
        "relatorio" | "pagamento" |
        "relatorio-agendamentos-futuros" |
        "relatorio-contagem-mensal" |
        "relatorio-historico-cliente" |
        "relatorio-servicos-agendados";
    // Adicionar outros conforme necessário
}

export default function NavBar(props: NabvBarProps) {
    const { active } = props;
    const baseItemClass = "border-b-4 pb-1 transition-colors duration-200 ease-in-out"; // Adicionado transition
    const activeClass = `${baseItemClass} border-sky-300 text-sky-100`; // Classe ativa mais destacada
    const inactiveClass = `${baseItemClass} border-transparent hover:border-sky-400 hover:text-sky-200`; // Efeito hover sutil

    const [isClientesMenuOpen, setIsClientesMenuOpen] = useState(false);
    const [isOficinaMenuOpen, setIsOficinaMenuOpen] = useState(false);
    const [isAgendamentoMenuOpen, setIsAgendamentoMenuOpen] = useState(false);
    const [isVeiculoMenuOpen, setIsVeiculoMenuOpen] = useState(false); // <<< Estado para Veículo
    const [isRelatorioMenuOpen, setIsRelatorioMenuOpen] = useState(false);

    // Verifica se a página ativa pertence a alguma seção com dropdown
    const isClientesActive = active.startsWith("clientes");
    const isOficinaActive = active.startsWith("oficinaOnline");
    const isAgendamentoActive = active.startsWith("agendamento");
    const isVeiculoActive = active.startsWith("veiculo"); // <<< Verifica Veículo
    const isRelatorioActive = active.startsWith("relatorio");

    const getLinkClass = (section: string) => {
        return active.startsWith(section) ? activeClass : inactiveClass;
    };

    const getDropdownTriggerClass = (sectionIsActive: boolean, menuIsOpen: boolean) => {
        return `cursor-pointer px-1 ${ (sectionIsActive || menuIsOpen) ? activeClass : inactiveClass }`;
    };


    return (
        <nav className="flex justify-between items-center p-4 md:p-6 bg-gradient-to-r from-[#075985] to-[#012A46] text-white shadow-md"> {/* Gradiente e sombra */}
            <Link href="/inicio">
                <h1 className="text-xl md:text-2xl font-bold cursor-pointer hover:text-sky-200 transition-colors">Oficina On-line</h1>
            </Link>
            <ul className="flex flex-wrap gap-3 md:gap-5 text-sm md:text-base items-center"> {/* Ajuste de espaçamento */}

                {/* --- Item Início --- */}
                <li className={getLinkClass("inicio")}>
                    <Link href="/inicio" className=" ">Início</Link>
                </li>

                {/* --- Item Clientes (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsClientesMenuOpen(true)}
                    onMouseLeave={() => setIsClientesMenuOpen(false)}
                >
                    <span className={getDropdownTriggerClass(isClientesActive, isClientesMenuOpen)}>
                        Clientes
                    </span>
                    {isClientesMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 z-50 animate-fade-in-down"> {/* Animação */}
                            <li><Link href="/clientes/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Listar Clientes</Link></li>
                            <li><Link href="/clientes/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Cadastrar Cliente</Link></li>
                            <li><Link href="/clientes/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Buscar Cliente</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Item Veículo (Dropdown NOVO) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsVeiculoMenuOpen(true)}
                    onMouseLeave={() => setIsVeiculoMenuOpen(false)}
                >
                    {/* Usar Link direto para a listagem como padrão */}
                    <Link href="/veiculo/listar" className={getDropdownTriggerClass(isVeiculoActive, isVeiculoMenuOpen)}>
                        Veículo
                    </Link>
                    {/* Dropdown que aparece no hover */}
                    {isVeiculoMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 z-50 animate-fade-in-down"> {/* Ajuste o w- */}
                            <li><Link href="/veiculo/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsVeiculoMenuOpen(false)}>Listar Veículos</Link></li>
                            <li><Link href="/veiculo/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsVeiculoMenuOpen(false)}>Cadastrar Veículo</Link></li>
                            <li><Link href="/veiculo/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsVeiculoMenuOpen(false)}>Buscar Veículo</Link></li>
                            {/* Alterar e Deletar geralmente são acessados pela lista, mas pode adicionar links diretos para busca se quiser */}
                            {/* <li><Link href="/veiculo/buscar_alterar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsVeiculoMenuOpen(false)}>Alterar Veículo</Link></li> */}
                            {/* <li><Link href="/veiculo/buscar_deletar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsVeiculoMenuOpen(false)}>Deletar Veículo</Link></li> */}
                        </ul>
                    )}
                </li>

                {/* --- Item Oficina Online (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsOficinaMenuOpen(true)}
                    onMouseLeave={() => setIsOficinaMenuOpen(false)}
                >
                     <span className={getDropdownTriggerClass(isOficinaActive, isOficinaMenuOpen)}>
                         Oficina On-line
                     </span>
                    {isOficinaMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 z-50 animate-fade-in-down">
                            <li><Link href="/oficinaOnline/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Listar Registros</Link></li>
                            <li><Link href="/oficinaOnline/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Novo Diagnóstico</Link></li>
                            <li><Link href="/oficinaOnline/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Buscar Registro</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Item Agendamento (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsAgendamentoMenuOpen(true)}
                    onMouseLeave={() => setIsAgendamentoMenuOpen(false)}
                >
                     <span className={getDropdownTriggerClass(isAgendamentoActive, isAgendamentoMenuOpen)}>
                        Agendamento
                    </span>
                    {isAgendamentoMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 z-50 animate-fade-in-down">
                            <li><Link href="/agendamento/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Listar Agendamentos</Link></li>
                            <li><Link href="/agendamento/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Novo Agendamento</Link></li>
                            <li><Link href="/agendamento/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Buscar Agendamento</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Item Relatório (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsRelatorioMenuOpen(true)}
                    onMouseLeave={() => setIsRelatorioMenuOpen(false)}
                >
                    <Link href="/relatorio" className={getDropdownTriggerClass(isRelatorioActive, isRelatorioMenuOpen)}>
                        Relatório
                    </Link>
                    {isRelatorioMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-56 bg-slate-700 rounded-md shadow-lg py-1 z-50 animate-fade-in-down">
                            <li><Link href="/relatorio/agendamentos-futuros" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsRelatorioMenuOpen(false)}>Agendamentos Futuros</Link></li>
                            <li><Link href="/relatorio/contagem-mensal" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsRelatorioMenuOpen(false)}>Contagem Mensal</Link></li>
                            <li><Link href="/relatorio/historico-cliente" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsRelatorioMenuOpen(false)}>Histórico por Cliente</Link></li>
                            <li><Link href="/relatorio/servicos-agendados" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsRelatorioMenuOpen(false)}>Serviços Agendados</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Item Pagamento --- */}
                <li className={getLinkClass("pagamento")}>
                    <Link href="/pagamento">Pagamento</Link>
                </li>
            </ul>
            {/* Avatar (Mantido) */}
            <img className="size-10 md:size-12 rounded-full border-2 border-sky-200" src="https://avatars.githubusercontent.com/u/4350623?v=4" alt="Avatar do usuário"/>

            {/* Adiciona CSS para a animação do dropdown (opcional, pode ir no globals.css) */}
            <style jsx>{`
                @keyframes fade-in-down {
                    from {
                        opacity: 0;
                        transform: translateY(-10px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
                .animate-fade-in-down {
                    animation: fade-in-down 0.2s ease-out forwards;
                }
            `}</style>
        </nav>
    )
}
================================================================================
